
power-distribution-module-2022-debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b04  08007b04  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007b04  08007b04  00017b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b0c  08007b0c  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b10  08007b10  00017b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004cbac  20000084  08007b98  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004cc30  08007b98  0002cc30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019922  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037a4  00000000  00000000  000399d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c8  00000000  00000000  0003d180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  0003e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029c98  00000000  00000000  0003ff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001add0  00000000  00000000  00069c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103dbf  00000000  00000000  00084a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001887bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006848  00000000  00000000  00188810  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000084 	.word	0x20000084
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079d8 	.word	0x080079d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000088 	.word	0x20000088
 800020c:	080079d8 	.word	0x080079d8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c4:	b480      	push	{r7}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	60f8      	str	r0, [r7, #12]
 80005cc:	60b9      	str	r1, [r7, #8]
 80005ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4a07      	ldr	r2, [pc, #28]	; (80005f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	4a06      	ldr	r2, [pc, #24]	; (80005f4 <vApplicationGetIdleTaskMemory+0x30>)
 80005da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005e2:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e4:	bf00      	nop
 80005e6:	3714      	adds	r7, #20
 80005e8:	46bd      	mov	sp, r7
 80005ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ee:	4770      	bx	lr
 80005f0:	200000a0 	.word	0x200000a0
 80005f4:	200000f4 	.word	0x200000f4

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b5b0      	push	{r4, r5, r7, lr}
 80005fa:	b08e      	sub	sp, #56	; 0x38
 80005fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f001 f9e7 	bl	80019d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f8db 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 fc27 	bl	8000e58 <MX_GPIO_Init>
  MX_DMA_Init();
 800060a:	f000 fbff 	bl	8000e0c <MX_DMA_Init>
  MX_CAN1_Init();
 800060e:	f000 fb09 	bl	8000c24 <MX_CAN1_Init>
  MX_ADC1_Init();
 8000612:	f000 f967 	bl	80008e4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8000616:	f000 fa35 	bl	8000a84 <MX_ADC3_Init>
  MX_I2C4_Init();
 800061a:	f000 fb39 	bl	8000c90 <MX_I2C4_Init>
  MX_TIM2_Init();
 800061e:	f000 fb77 	bl	8000d10 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fbc3 	bl	8000dac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	//Startup short circuit protection to be implemented

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 3000);
 8000626:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800062a:	4957      	ldr	r1, [pc, #348]	; (8000788 <main+0x190>)
 800062c:	4857      	ldr	r0, [pc, #348]	; (800078c <main+0x194>)
 800062e:	f001 fa49 	bl	8001ac4 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 3000);
 8000632:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000636:	4956      	ldr	r1, [pc, #344]	; (8000790 <main+0x198>)
 8000638:	4856      	ldr	r0, [pc, #344]	; (8000794 <main+0x19c>)
 800063a:	f001 fa43 	bl	8001ac4 <HAL_ADC_Start_DMA>

	HAL_GPIO_WritePin(DIA_EN_GPIO_Port, DIA_EN_Pin, RESET);
 800063e:	2200      	movs	r2, #0
 8000640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000644:	4854      	ldr	r0, [pc, #336]	; (8000798 <main+0x1a0>)
 8000646:	f002 ff4b 	bl	80034e0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(EN0_GPIO_Port,  EN0_Pin,  SET);
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000650:	4852      	ldr	r0, [pc, #328]	; (800079c <main+0x1a4>)
 8000652:	f002 ff45 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN1_GPIO_Port,  EN1_Pin,  SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800065c:	4850      	ldr	r0, [pc, #320]	; (80007a0 <main+0x1a8>)
 800065e:	f002 ff3f 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN2_GPIO_Port,  EN2_Pin,  SET);
 8000662:	2201      	movs	r2, #1
 8000664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000668:	484c      	ldr	r0, [pc, #304]	; (800079c <main+0x1a4>)
 800066a:	f002 ff39 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN3_GPIO_Port,  EN3_Pin,  SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000674:	4849      	ldr	r0, [pc, #292]	; (800079c <main+0x1a4>)
 8000676:	f002 ff33 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN4_GPIO_Port,  EN4_Pin,  SET);
 800067a:	2201      	movs	r2, #1
 800067c:	2102      	movs	r1, #2
 800067e:	4849      	ldr	r0, [pc, #292]	; (80007a4 <main+0x1ac>)
 8000680:	f002 ff2e 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN5_GPIO_Port,  EN5_Pin,  SET);
 8000684:	2201      	movs	r2, #1
 8000686:	2101      	movs	r1, #1
 8000688:	4846      	ldr	r0, [pc, #280]	; (80007a4 <main+0x1ac>)
 800068a:	f002 ff29 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN6_GPIO_Port,  EN6_Pin,  SET);
 800068e:	2201      	movs	r2, #1
 8000690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000694:	4842      	ldr	r0, [pc, #264]	; (80007a0 <main+0x1a8>)
 8000696:	f002 ff23 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN7_GPIO_Port,  EN7_Pin,  SET);
 800069a:	2201      	movs	r2, #1
 800069c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006a0:	483f      	ldr	r0, [pc, #252]	; (80007a0 <main+0x1a8>)
 80006a2:	f002 ff1d 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN8_GPIO_Port,  EN8_Pin,  SET);
 80006a6:	2201      	movs	r2, #1
 80006a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006ac:	483c      	ldr	r0, [pc, #240]	; (80007a0 <main+0x1a8>)
 80006ae:	f002 ff17 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN9_GPIO_Port,  EN9_Pin,  SET);
 80006b2:	2201      	movs	r2, #1
 80006b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006b8:	4839      	ldr	r0, [pc, #228]	; (80007a0 <main+0x1a8>)
 80006ba:	f002 ff11 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN10_GPIO_Port, EN10_Pin, SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c4:	4837      	ldr	r0, [pc, #220]	; (80007a4 <main+0x1ac>)
 80006c6:	f002 ff0b 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN11_GPIO_Port, EN11_Pin, SET);
 80006ca:	2201      	movs	r2, #1
 80006cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d0:	4834      	ldr	r0, [pc, #208]	; (80007a4 <main+0x1ac>)
 80006d2:	f002 ff05 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN12_GPIO_Port, EN12_Pin, SET);
 80006d6:	2201      	movs	r2, #1
 80006d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006dc:	4832      	ldr	r0, [pc, #200]	; (80007a8 <main+0x1b0>)
 80006de:	f002 feff 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN13_GPIO_Port, EN13_Pin, SET);
 80006e2:	2201      	movs	r2, #1
 80006e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006e8:	482f      	ldr	r0, [pc, #188]	; (80007a8 <main+0x1b0>)
 80006ea:	f002 fef9 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN14_GPIO_Port, EN14_Pin, SET);
 80006ee:	2201      	movs	r2, #1
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	482a      	ldr	r0, [pc, #168]	; (800079c <main+0x1a4>)
 80006f4:	f002 fef4 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN15_GPIO_Port, EN15_Pin, SET);
 80006f8:	2201      	movs	r2, #1
 80006fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006fe:	4829      	ldr	r0, [pc, #164]	; (80007a4 <main+0x1ac>)
 8000700:	f002 feee 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN16_GPIO_Port, EN16_Pin, SET);
 8000704:	2201      	movs	r2, #1
 8000706:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800070a:	4823      	ldr	r0, [pc, #140]	; (8000798 <main+0x1a0>)
 800070c:	f002 fee8 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN17_GPIO_Port, EN17_Pin, SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000716:	4820      	ldr	r0, [pc, #128]	; (8000798 <main+0x1a0>)
 8000718:	f002 fee2 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN18_GPIO_Port, EN18_Pin, SET);
 800071c:	2201      	movs	r2, #1
 800071e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000722:	481d      	ldr	r0, [pc, #116]	; (8000798 <main+0x1a0>)
 8000724:	f002 fedc 	bl	80034e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(EN19_GPIO_Port, EN19_Pin, SET);
 8000728:	2201      	movs	r2, #1
 800072a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800072e:	481e      	ldr	r0, [pc, #120]	; (80007a8 <main+0x1b0>)
 8000730:	f002 fed6 	bl	80034e0 <HAL_GPIO_WritePin>

	setCurrentSense();
 8000734:	f000 fcc2 	bl	80010bc <setCurrentSense>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 8000738:	4b1c      	ldr	r3, [pc, #112]	; (80007ac <main+0x1b4>)
 800073a:	f107 041c 	add.w	r4, r7, #28
 800073e:	461d      	mov	r5, r3
 8000740:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000742:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000744:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000748:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 800074c:	f107 031c 	add.w	r3, r7, #28
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f005 fa7c 	bl	8005c50 <osThreadCreate>
 8000758:	4603      	mov	r3, r0
 800075a:	4a15      	ldr	r2, [pc, #84]	; (80007b0 <main+0x1b8>)
 800075c:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 800075e:	4b15      	ldr	r3, [pc, #84]	; (80007b4 <main+0x1bc>)
 8000760:	463c      	mov	r4, r7
 8000762:	461d      	mov	r5, r3
 8000764:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000766:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000768:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800076c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 8000770:	463b      	mov	r3, r7
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f005 fa6b 	bl	8005c50 <osThreadCreate>
 800077a:	4603      	mov	r3, r0
 800077c:	4a0e      	ldr	r2, [pc, #56]	; (80007b8 <main+0x1c0>)
 800077e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000780:	f005 fa5f 	bl	8005c42 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000784:	e7fe      	b.n	8000784 <main+0x18c>
 8000786:	bf00      	nop
 8000788:	20000790 	.word	0x20000790
 800078c:	200004f4 	.word	0x200004f4
 8000790:	20001f00 	.word	0x20001f00
 8000794:	2000053c 	.word	0x2000053c
 8000798:	40020400 	.word	0x40020400
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40021000 	.word	0x40021000
 80007ac:	08007a10 	.word	0x08007a10
 80007b0:	20000788 	.word	0x20000788
 80007b4:	08007a2c 	.word	0x08007a2c
 80007b8:	2000078c 	.word	0x2000078c

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b0b4      	sub	sp, #208	; 0xd0
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80007c6:	2230      	movs	r2, #48	; 0x30
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f006 fc9c 	bl	8007108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2284      	movs	r2, #132	; 0x84
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f006 fc8d 	bl	8007108 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ee:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <SystemClock_Config+0x11c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a39      	ldr	r2, [pc, #228]	; (80008d8 <SystemClock_Config+0x11c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40
 80007fa:	4b37      	ldr	r3, [pc, #220]	; (80008d8 <SystemClock_Config+0x11c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000806:	4b35      	ldr	r3, [pc, #212]	; (80008dc <SystemClock_Config+0x120>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a34      	ldr	r2, [pc, #208]	; (80008dc <SystemClock_Config+0x120>)
 800080c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000810:	6013      	str	r3, [r2, #0]
 8000812:	4b32      	ldr	r3, [pc, #200]	; (80008dc <SystemClock_Config+0x120>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800081e:	2302      	movs	r3, #2
 8000820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000824:	2301      	movs	r3, #1
 8000826:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082a:	2310      	movs	r3, #16
 800082c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000830:	2302      	movs	r3, #2
 8000832:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	2300      	movs	r3, #0
 8000838:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 800083c:	2308      	movs	r3, #8
 800083e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000842:	23c0      	movs	r3, #192	; 0xc0
 8000844:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000848:	2302      	movs	r3, #2
 800084a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800084e:	2302      	movs	r3, #2
 8000850:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000858:	4618      	mov	r0, r3
 800085a:	f002 ffd3 	bl	8003804 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000864:	f000 fd5e 	bl	8001324 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000868:	f002 ff7c 	bl	8003764 <HAL_PWREx_EnableOverDrive>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000872:	f000 fd57 	bl	8001324 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000876:	230f      	movs	r3, #15
 8000878:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800087c:	2302      	movs	r3, #2
 800087e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000882:	2300      	movs	r3, #0
 8000884:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000888:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800088c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000890:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000894:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000898:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800089c:	2106      	movs	r1, #6
 800089e:	4618      	mov	r0, r3
 80008a0:	f003 fa54 	bl	8003d4c <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008aa:	f000 fd3b 	bl	8001324 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C4;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <SystemClock_Config+0x124>)
 80008b0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ba:	f107 0308 	add.w	r3, r7, #8
 80008be:	4618      	mov	r0, r3
 80008c0:	f003 fc5c 	bl	800417c <HAL_RCCEx_PeriphCLKConfig>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <SystemClock_Config+0x112>
  {
    Error_Handler();
 80008ca:	f000 fd2b 	bl	8001324 <Error_Handler>
  }
}
 80008ce:	bf00      	nop
 80008d0:	37d0      	adds	r7, #208	; 0xd0
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40007000 	.word	0x40007000
 80008e0:	00020080 	.word	0x00020080

080008e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008f6:	4b60      	ldr	r3, [pc, #384]	; (8000a78 <MX_ADC1_Init+0x194>)
 80008f8:	4a60      	ldr	r2, [pc, #384]	; (8000a7c <MX_ADC1_Init+0x198>)
 80008fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008fc:	4b5e      	ldr	r3, [pc, #376]	; (8000a78 <MX_ADC1_Init+0x194>)
 80008fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000902:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000904:	4b5c      	ldr	r3, [pc, #368]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800090a:	4b5b      	ldr	r3, [pc, #364]	; (8000a78 <MX_ADC1_Init+0x194>)
 800090c:	2201      	movs	r2, #1
 800090e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000910:	4b59      	ldr	r3, [pc, #356]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000912:	2201      	movs	r2, #1
 8000914:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000916:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000918:	2200      	movs	r2, #0
 800091a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800091e:	4b56      	ldr	r3, [pc, #344]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000920:	2200      	movs	r2, #0
 8000922:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000924:	4b54      	ldr	r3, [pc, #336]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000926:	4a56      	ldr	r2, [pc, #344]	; (8000a80 <MX_ADC1_Init+0x19c>)
 8000928:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800092a:	4b53      	ldr	r3, [pc, #332]	; (8000a78 <MX_ADC1_Init+0x194>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 10;
 8000930:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000932:	220a      	movs	r2, #10
 8000934:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000936:	4b50      	ldr	r3, [pc, #320]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000938:	2201      	movs	r2, #1
 800093a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000944:	484c      	ldr	r0, [pc, #304]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000946:	f001 f879 	bl	8001a3c <HAL_ADC_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000950:	f000 fce8 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000954:	2301      	movs	r3, #1
 8000956:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000958:	2301      	movs	r3, #1
 800095a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	4619      	mov	r1, r3
 8000964:	4844      	ldr	r0, [pc, #272]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000966:	f001 f9bb 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000970:	f000 fcd8 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000974:	230c      	movs	r3, #12
 8000976:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000978:	2302      	movs	r3, #2
 800097a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800097c:	463b      	mov	r3, r7
 800097e:	4619      	mov	r1, r3
 8000980:	483d      	ldr	r0, [pc, #244]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000982:	f001 f9ad 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800098c:	f000 fcca 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000990:	2303      	movs	r3, #3
 8000992:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000994:	2303      	movs	r3, #3
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4836      	ldr	r0, [pc, #216]	; (8000a78 <MX_ADC1_Init+0x194>)
 800099e:	f001 f99f 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80009a8:	f000 fcbc 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009b4:	463b      	mov	r3, r7
 80009b6:	4619      	mov	r1, r3
 80009b8:	482f      	ldr	r0, [pc, #188]	; (8000a78 <MX_ADC1_Init+0x194>)
 80009ba:	f001 f991 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80009c4:	f000 fcae 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009c8:	2300      	movs	r3, #0
 80009ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80009cc:	2305      	movs	r3, #5
 80009ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <MX_ADC1_Init+0x194>)
 80009d6:	f001 f983 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80009e0:	f000 fca0 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80009e4:	230d      	movs	r3, #13
 80009e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80009e8:	2306      	movs	r3, #6
 80009ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	4619      	mov	r1, r3
 80009f0:	4821      	ldr	r0, [pc, #132]	; (8000a78 <MX_ADC1_Init+0x194>)
 80009f2:	f001 f975 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80009fc:	f000 fc92 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000a00:	2307      	movs	r3, #7
 8000a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000a04:	2307      	movs	r3, #7
 8000a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a08:	463b      	mov	r3, r7
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	481a      	ldr	r0, [pc, #104]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000a0e:	f001 f967 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000a18:	f000 fc84 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a1c:	2306      	movs	r3, #6
 8000a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000a20:	2308      	movs	r3, #8
 8000a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a24:	463b      	mov	r3, r7
 8000a26:	4619      	mov	r1, r3
 8000a28:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000a2a:	f001 f959 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000a34:	f000 fc76 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a38:	2305      	movs	r3, #5
 8000a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000a3c:	2309      	movs	r3, #9
 8000a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a40:	463b      	mov	r3, r7
 8000a42:	4619      	mov	r1, r3
 8000a44:	480c      	ldr	r0, [pc, #48]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000a46:	f001 f94b 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000a50:	f000 fc68 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000a54:	2304      	movs	r3, #4
 8000a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4805      	ldr	r0, [pc, #20]	; (8000a78 <MX_ADC1_Init+0x194>)
 8000a62:	f001 f93d 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_ADC1_Init+0x18c>
  {
    Error_Handler();
 8000a6c:	f000 fc5a 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200004f4 	.word	0x200004f4
 8000a7c:	40012000 	.word	0x40012000
 8000a80:	0f000001 	.word	0x0f000001

08000a84 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a96:	4b60      	ldr	r3, [pc, #384]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000a98:	4a60      	ldr	r2, [pc, #384]	; (8000c1c <MX_ADC3_Init+0x198>)
 8000a9a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a9c:	4b5e      	ldr	r3, [pc, #376]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000a9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000aa2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000aa4:	4b5c      	ldr	r3, [pc, #368]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000aaa:	4b5b      	ldr	r3, [pc, #364]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000ab0:	4b59      	ldr	r3, [pc, #356]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000ab6:	4b58      	ldr	r3, [pc, #352]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000abe:	4b56      	ldr	r3, [pc, #344]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ac4:	4b54      	ldr	r3, [pc, #336]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ac6:	4a56      	ldr	r2, [pc, #344]	; (8000c20 <MX_ADC3_Init+0x19c>)
 8000ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aca:	4b53      	ldr	r3, [pc, #332]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 10;
 8000ad0:	4b51      	ldr	r3, [pc, #324]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ad2:	220a      	movs	r2, #10
 8000ad4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000ad6:	4b50      	ldr	r3, [pc, #320]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ad8:	2201      	movs	r2, #1
 8000ada:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ade:	4b4e      	ldr	r3, [pc, #312]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000ae4:	484c      	ldr	r0, [pc, #304]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000ae6:	f000 ffa9 	bl	8001a3c <HAL_ADC_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000af0:	f000 fc18 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000af4:	2304      	movs	r3, #4
 8000af6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000af8:	2301      	movs	r3, #1
 8000afa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	4844      	ldr	r0, [pc, #272]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b06:	f001 f8eb 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000b10:	f000 fc08 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b14:	2307      	movs	r3, #7
 8000b16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	483d      	ldr	r0, [pc, #244]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b22:	f001 f8dd 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_ADC3_Init+0xac>
  {
    Error_Handler();
 8000b2c:	f000 fbfa 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b30:	230f      	movs	r3, #15
 8000b32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000b34:	2303      	movs	r3, #3
 8000b36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b38:	463b      	mov	r3, r7
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4836      	ldr	r0, [pc, #216]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b3e:	f001 f8cf 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_ADC3_Init+0xc8>
  {
    Error_Handler();
 8000b48:	f000 fbec 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000b50:	2304      	movs	r3, #4
 8000b52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b54:	463b      	mov	r3, r7
 8000b56:	4619      	mov	r1, r3
 8000b58:	482f      	ldr	r0, [pc, #188]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b5a:	f001 f8c1 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_ADC3_Init+0xe4>
  {
    Error_Handler();
 8000b64:	f000 fbde 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000b68:	2309      	movs	r3, #9
 8000b6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b70:	463b      	mov	r3, r7
 8000b72:	4619      	mov	r1, r3
 8000b74:	4828      	ldr	r0, [pc, #160]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b76:	f001 f8b3 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_ADC3_Init+0x100>
  {
    Error_Handler();
 8000b80:	f000 fbd0 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000b84:	230e      	movs	r3, #14
 8000b86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8000b88:	2306      	movs	r3, #6
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4821      	ldr	r0, [pc, #132]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000b92:	f001 f8a5 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_ADC3_Init+0x11c>
  {
    Error_Handler();
 8000b9c:	f000 fbc2 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000ba0:	2306      	movs	r3, #6
 8000ba2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000ba4:	2307      	movs	r3, #7
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	481a      	ldr	r0, [pc, #104]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000bae:	f001 f897 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_ADC3_Init+0x138>
  {
    Error_Handler();
 8000bb8:	f000 fbb4 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000bca:	f001 f889 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC3_Init+0x154>
  {
    Error_Handler();
 8000bd4:	f000 fba6 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000bd8:	230a      	movs	r3, #10
 8000bda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000bdc:	2309      	movs	r3, #9
 8000bde:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4619      	mov	r1, r3
 8000be4:	480c      	ldr	r0, [pc, #48]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000be6:	f001 f87b 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_ADC3_Init+0x170>
  {
    Error_Handler();
 8000bf0:	f000 fb98 	bl	8001324 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000bf4:	230b      	movs	r3, #11
 8000bf6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bfc:	463b      	mov	r3, r7
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_ADC3_Init+0x194>)
 8000c02:	f001 f86d 	bl	8001ce0 <HAL_ADC_ConfigChannel>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC3_Init+0x18c>
  {
    Error_Handler();
 8000c0c:	f000 fb8a 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	2000053c 	.word	0x2000053c
 8000c1c:	40012200 	.word	0x40012200
 8000c20:	0f000001 	.word	0x0f000001

08000c24 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000c28:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c2a:	4a18      	ldr	r2, [pc, #96]	; (8000c8c <MX_CAN1_Init+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c30:	2206      	movs	r2, #6
 8000c32:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000c3a:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c42:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000c46:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c72:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_CAN1_Init+0x64>)
 8000c74:	f001 fafa 	bl	800226c <HAL_CAN_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c7e:	f000 fb51 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c82:	bf00      	nop
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	20000644 	.word	0x20000644
 8000c8c:	40006400 	.word	0x40006400

08000c90 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000c94:	4b1b      	ldr	r3, [pc, #108]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000c96:	4a1c      	ldr	r2, [pc, #112]	; (8000d08 <MX_I2C4_Init+0x78>)
 8000c98:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20303E5D;
 8000c9a:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000c9c:	4a1b      	ldr	r2, [pc, #108]	; (8000d0c <MX_I2C4_Init+0x7c>)
 8000c9e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca6:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cac:	4b15      	ldr	r3, [pc, #84]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000cb2:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000cca:	480e      	ldr	r0, [pc, #56]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000ccc:	f002 fc22 	bl	8003514 <HAL_I2C_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000cd6:	f000 fb25 	bl	8001324 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cde:	f002 fca9 	bl	8003634 <HAL_I2CEx_ConfigAnalogFilter>
 8000ce2:	4603      	mov	r3, r0
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d001      	beq.n	8000cec <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000ce8:	f000 fb1c 	bl	8001324 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000cec:	2100      	movs	r1, #0
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_I2C4_Init+0x74>)
 8000cf0:	f002 fceb 	bl	80036ca <HAL_I2CEx_ConfigDigitalFilter>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000cfa:	f000 fb13 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000066c 	.word	0x2000066c
 8000d08:	40006000 	.word	0x40006000
 8000d0c:	20303e5d 	.word	0x20303e5d

08000d10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b088      	sub	sp, #32
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d16:	f107 0310 	add.w	r3, r7, #16
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d24:	1d3b      	adds	r3, r7, #4
 8000d26:	2200      	movs	r2, #0
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	605a      	str	r2, [r3, #4]
 8000d2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d30:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d34:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96-1;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d38:	225f      	movs	r2, #95	; 0x5f
 8000d3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d44:	f04f 32ff 	mov.w	r2, #4294967295
 8000d48:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d4a:	4b17      	ldr	r3, [pc, #92]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d56:	4814      	ldr	r0, [pc, #80]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d58:	f003 fe00 	bl	800495c <HAL_TIM_Base_Init>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d62:	f000 fadf 	bl	8001324 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4619      	mov	r1, r3
 8000d72:	480d      	ldr	r0, [pc, #52]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d74:	f003 ffe2 	bl	8004d3c <HAL_TIM_ConfigClockSource>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000d7e:	f000 fad1 	bl	8001324 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_TIM2_Init+0x98>)
 8000d90:	f004 f9fc 	bl	800518c <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000d9a:	f000 fac3 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3720      	adds	r7, #32
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200006b8 	.word	0x200006b8

08000dac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db2:	4a15      	ldr	r2, [pc, #84]	; (8000e08 <MX_USART2_UART_Init+0x5c>)
 8000db4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db6:	4b13      	ldr	r3, [pc, #76]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000db8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USART2_UART_Init+0x58>)
 8000df0:	f004 fa78 	bl	80052e4 <HAL_UART_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000dfa:	f000 fa93 	bl	8001324 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000704 	.word	0x20000704
 8000e08:	40004400 	.word	0x40004400

08000e0c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_DMA_Init+0x48>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <MX_DMA_Init+0x48>)
 8000e18:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <MX_DMA_Init+0x48>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2105      	movs	r1, #5
 8000e2e:	2038      	movs	r0, #56	; 0x38
 8000e30:	f001 fe08 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000e34:	2038      	movs	r0, #56	; 0x38
 8000e36:	f001 fe21 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2039      	movs	r0, #57	; 0x39
 8000e40:	f001 fe00 	bl	8002a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e44:	2039      	movs	r0, #57	; 0x39
 8000e46:	f001 fe19 	bl	8002a7c <HAL_NVIC_EnableIRQ>

}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023800 	.word	0x40023800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08e      	sub	sp, #56	; 0x38
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
 8000e6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e6e:	4b77      	ldr	r3, [pc, #476]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a76      	ldr	r2, [pc, #472]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e74:	f043 0320 	orr.w	r3, r3, #32
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b74      	ldr	r3, [pc, #464]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0320 	and.w	r3, r3, #32
 8000e82:	623b      	str	r3, [r7, #32]
 8000e84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e86:	4b71      	ldr	r3, [pc, #452]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a70      	ldr	r2, [pc, #448]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b6e      	ldr	r3, [pc, #440]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e9e:	4b6b      	ldr	r3, [pc, #428]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a6a      	ldr	r2, [pc, #424]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ea4:	f043 0304 	orr.w	r3, r3, #4
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b68      	ldr	r3, [pc, #416]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0304 	and.w	r3, r3, #4
 8000eb2:	61bb      	str	r3, [r7, #24]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	4b65      	ldr	r3, [pc, #404]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	4a64      	ldr	r2, [pc, #400]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec2:	4b62      	ldr	r3, [pc, #392]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ece:	4b5f      	ldr	r3, [pc, #380]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a5e      	ldr	r2, [pc, #376]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b5c      	ldr	r3, [pc, #368]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ee6:	4b59      	ldr	r3, [pc, #356]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	4a58      	ldr	r2, [pc, #352]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000eec:	f043 0310 	orr.w	r3, r3, #16
 8000ef0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef2:	4b56      	ldr	r3, [pc, #344]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	f003 0310 	and.w	r3, r3, #16
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b53      	ldr	r3, [pc, #332]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a52      	ldr	r2, [pc, #328]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b50      	ldr	r3, [pc, #320]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f16:	4b4d      	ldr	r3, [pc, #308]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a4c      	ldr	r2, [pc, #304]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f1c:	f043 0308 	orr.w	r3, r3, #8
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b4a      	ldr	r3, [pc, #296]	; (800104c <MX_GPIO_Init+0x1f4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0308 	and.w	r3, r3, #8
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, EN13_Pin|EN12_Pin|EN19_Pin, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000f34:	4846      	ldr	r0, [pc, #280]	; (8001050 <MX_GPIO_Init+0x1f8>)
 8000f36:	f002 fad3 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EN18_Pin|EN17_Pin|EN16_Pin|DIA_EN_Pin
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 415c 	mov.w	r1, #56320	; 0xdc00
 8000f40:	4844      	ldr	r0, [pc, #272]	; (8001054 <MX_GPIO_Init+0x1fc>)
 8000f42:	f002 facd 	bl	80034e0 <HAL_GPIO_WritePin>
                          |SEL2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SEL1_Pin|EN11_Pin|EN10_Pin|EN15_Pin
 8000f46:	2200      	movs	r2, #0
 8000f48:	f641 5103 	movw	r1, #7427	; 0x1d03
 8000f4c:	4842      	ldr	r0, [pc, #264]	; (8001058 <MX_GPIO_Init+0x200>)
 8000f4e:	f002 fac7 	bl	80034e0 <HAL_GPIO_WritePin>
                          |EN5_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LATCH_Pin|ADC_LED_Pin|STATUS_LED_Pin|FAULT_LED_Pin, GPIO_PIN_RESET);
 8000f52:	2200      	movs	r2, #0
 8000f54:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000f58:	4840      	ldr	r0, [pc, #256]	; (800105c <MX_GPIO_Init+0x204>)
 8000f5a:	f002 fac1 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, EN14_Pin|EN0_Pin|EN3_Pin|EN2_Pin, GPIO_PIN_RESET);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f44f 51e4 	mov.w	r1, #7296	; 0x1c80
 8000f64:	483e      	ldr	r0, [pc, #248]	; (8001060 <MX_GPIO_Init+0x208>)
 8000f66:	f002 fabb 	bl	80034e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN9_Pin|EN8_Pin|EN7_Pin|EN6_Pin
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f44f 411e 	mov.w	r1, #40448	; 0x9e00
 8000f70:	483c      	ldr	r0, [pc, #240]	; (8001064 <MX_GPIO_Init+0x20c>)
 8000f72:	f002 fab5 	bl	80034e0 <HAL_GPIO_WritePin>
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : SHAKE_INT_Pin */
  GPIO_InitStruct.Pin = SHAKE_INT_Pin;
 8000f76:	2301      	movs	r3, #1
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SHAKE_INT_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f86:	4619      	mov	r1, r3
 8000f88:	4834      	ldr	r0, [pc, #208]	; (800105c <MX_GPIO_Init+0x204>)
 8000f8a:	f002 f8fd 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN13_Pin EN12_Pin EN19_Pin */
  GPIO_InitStruct.Pin = EN13_Pin|EN12_Pin|EN19_Pin;
 8000f8e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f94:	2301      	movs	r3, #1
 8000f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	482a      	ldr	r0, [pc, #168]	; (8001050 <MX_GPIO_Init+0x1f8>)
 8000fa8:	f002 f8ee 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN18_Pin EN17_Pin EN16_Pin DIA_EN_Pin
                           SEL2_Pin */
  GPIO_InitStruct.Pin = EN18_Pin|EN17_Pin|EN16_Pin|DIA_EN_Pin
 8000fac:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
 8000fb0:	627b      	str	r3, [r7, #36]	; 0x24
                          |SEL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4823      	ldr	r0, [pc, #140]	; (8001054 <MX_GPIO_Init+0x1fc>)
 8000fc6:	f002 f8df 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEL1_Pin EN11_Pin EN10_Pin EN15_Pin
                           EN5_Pin EN4_Pin */
  GPIO_InitStruct.Pin = SEL1_Pin|EN11_Pin|EN10_Pin|EN15_Pin
 8000fca:	f641 5303 	movw	r3, #7427	; 0x1d03
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN5_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	481d      	ldr	r0, [pc, #116]	; (8001058 <MX_GPIO_Init+0x200>)
 8000fe4:	f002 f8d0 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : LATCH_Pin ADC_LED_Pin STATUS_LED_Pin FAULT_LED_Pin */
  GPIO_InitStruct.Pin = LATCH_Pin|ADC_LED_Pin|STATUS_LED_Pin|FAULT_LED_Pin;
 8000fe8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000fec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4816      	ldr	r0, [pc, #88]	; (800105c <MX_GPIO_Init+0x204>)
 8001002:	f002 f8c1 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN14_Pin EN0_Pin EN3_Pin EN2_Pin */
  GPIO_InitStruct.Pin = EN14_Pin|EN0_Pin|EN3_Pin|EN2_Pin;
 8001006:	f44f 53e4 	mov.w	r3, #7296	; 0x1c80
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4810      	ldr	r0, [pc, #64]	; (8001060 <MX_GPIO_Init+0x208>)
 8001020:	f002 f8b2 	bl	8003188 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN9_Pin EN8_Pin EN7_Pin EN6_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = EN9_Pin|EN8_Pin|EN7_Pin|EN6_Pin
 8001024:	f44f 431e 	mov.w	r3, #40448	; 0x9e00
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2301      	movs	r3, #1
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103a:	4619      	mov	r1, r3
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_GPIO_Init+0x20c>)
 800103e:	f002 f8a3 	bl	8003188 <HAL_GPIO_Init>

}
 8001042:	bf00      	nop
 8001044:	3738      	adds	r7, #56	; 0x38
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023800 	.word	0x40023800
 8001050:	40021000 	.word	0x40021000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020c00 	.word	0x40020c00
 800105c:	40021800 	.word	0x40021800
 8001060:	40020800 	.word	0x40020800
 8001064:	40020000 	.word	0x40020000

08001068 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <ifEssentialChannel>:
			HAL_GPIO_WritePin(enable_GPIO_port[i],  enable_pin[i],  RESET);
		}
	}
}

uint16_t ifEssentialChannel(uint16_t channel){
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	80fb      	strh	r3, [r7, #6]
	for(uint16_t i = 0; i<7; i++){
 8001086:	2300      	movs	r3, #0
 8001088:	81fb      	strh	r3, [r7, #14]
 800108a:	e00b      	b.n	80010a4 <ifEssentialChannel+0x28>
		if(channel == essentialChannels[i]){
 800108c:	89fb      	ldrh	r3, [r7, #14]
 800108e:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <ifEssentialChannel+0x3c>)
 8001090:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001094:	88fa      	ldrh	r2, [r7, #6]
 8001096:	429a      	cmp	r2, r3
 8001098:	d101      	bne.n	800109e <ifEssentialChannel+0x22>
			return 1;
 800109a:	2301      	movs	r3, #1
 800109c:	e006      	b.n	80010ac <ifEssentialChannel+0x30>
	for(uint16_t i = 0; i<7; i++){
 800109e:	89fb      	ldrh	r3, [r7, #14]
 80010a0:	3301      	adds	r3, #1
 80010a2:	81fb      	strh	r3, [r7, #14]
 80010a4:	89fb      	ldrh	r3, [r7, #14]
 80010a6:	2b06      	cmp	r3, #6
 80010a8:	d9f0      	bls.n	800108c <ifEssentialChannel+0x10>
		}
	}
	return 0;
 80010aa:	2300      	movs	r3, #0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000000 	.word	0x20000000

080010bc <setCurrentSense>:

void setCurrentSense(){  //Fault sense
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SEL1_GPIO_Port, SEL1_Pin, RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <setCurrentSense+0x20>)
 80010c8:	f002 fa0a 	bl	80034e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SEL2_GPIO_Port, SEL2_Pin, RESET);
 80010cc:	2200      	movs	r2, #0
 80010ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010d2:	4803      	ldr	r0, [pc, #12]	; (80010e0 <setCurrentSense+0x24>)
 80010d4:	f002 fa04 	bl	80034e0 <HAL_GPIO_WritePin>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40020c00 	.word	0x40020c00
 80010e0:	40020400 	.word	0x40020400

080010e4 <task_main_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main_loop */
void task_main_loop(void const * argument)
{
 80010e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e6:	b0df      	sub	sp, #380	; 0x17c
 80010e8:	af12      	add	r7, sp, #72	; 0x48
 80010ea:	6378      	str	r0, [r7, #52]	; 0x34
  static unsigned int last_tx_Reset = 0;
  /* Infinite loop */
  for(;;)
  {

	  if(HAL_GetTick() - last_tx_Reset >= (STD_DELAY*20)){                //Reset all states after 20*STD_DELAY milliseconds
 80010ec:	f000 fc9a 	bl	8001a24 <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b77      	ldr	r3, [pc, #476]	; (80012d0 <task_main_loop+0x1ec>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80010fc:	d317      	bcc.n	800112e <task_main_loop+0x4a>
		  for(uint16_t j = 0; j<20; j++){
 80010fe:	2300      	movs	r3, #0
 8001100:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 8001104:	e00a      	b.n	800111c <task_main_loop+0x38>
			  channelStatus[j] = 0;
 8001106:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 800110a:	4a72      	ldr	r2, [pc, #456]	; (80012d4 <task_main_loop+0x1f0>)
 800110c:	2100      	movs	r1, #0
 800110e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  for(uint16_t j = 0; j<20; j++){
 8001112:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8001116:	3301      	adds	r3, #1
 8001118:	f8a7 312e 	strh.w	r3, [r7, #302]	; 0x12e
 800111c:	f8b7 312e 	ldrh.w	r3, [r7, #302]	; 0x12e
 8001120:	2b13      	cmp	r3, #19
 8001122:	d9f0      	bls.n	8001106 <task_main_loop+0x22>
		  }
		  last_tx_Reset = HAL_GetTick();
 8001124:	f000 fc7e 	bl	8001a24 <HAL_GetTick>
 8001128:	4603      	mov	r3, r0
 800112a:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <task_main_loop+0x1ec>)
 800112c:	6013      	str	r3, [r2, #0]
	  }

	  uint8_t msg[240];

	             //Current and Fault Sense
	  for(uint16_t i = 0; i<10; i++){       // Check if ADC is more than 65% then fault
 800112e:	2300      	movs	r3, #0
 8001130:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 8001134:	e033      	b.n	800119e <task_main_loop+0xba>
		  if(adc3_buf[i]>3600){
 8001136:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800113a:	4a67      	ldr	r2, [pc, #412]	; (80012d8 <task_main_loop+0x1f4>)
 800113c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001140:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001144:	d90d      	bls.n	8001162 <task_main_loop+0x7e>
			  if(!ifEssentialChannel(i)) channelStatus[i] = 1;
 8001146:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ff96 	bl	800107c <ifEssentialChannel>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <task_main_loop+0x7e>
 8001156:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800115a:	4a5e      	ldr	r2, [pc, #376]	; (80012d4 <task_main_loop+0x1f0>)
 800115c:	2101      	movs	r1, #1
 800115e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		  }
		  if(adc1_buf[i]>3600){
 8001162:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8001166:	4a5d      	ldr	r2, [pc, #372]	; (80012dc <task_main_loop+0x1f8>)
 8001168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800116c:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8001170:	d910      	bls.n	8001194 <task_main_loop+0xb0>
			  if(!ifEssentialChannel(i+10)) channelStatus[i+10] = 1;
 8001172:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8001176:	330a      	adds	r3, #10
 8001178:	b29b      	uxth	r3, r3
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff ff7e 	bl	800107c <ifEssentialChannel>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d106      	bne.n	8001194 <task_main_loop+0xb0>
 8001186:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 800118a:	330a      	adds	r3, #10
 800118c:	4a51      	ldr	r2, [pc, #324]	; (80012d4 <task_main_loop+0x1f0>)
 800118e:	2101      	movs	r1, #1
 8001190:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	  for(uint16_t i = 0; i<10; i++){       // Check if ADC is more than 65% then fault
 8001194:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8001198:	3301      	adds	r3, #1
 800119a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
 800119e:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 80011a2:	2b09      	cmp	r3, #9
 80011a4:	d9c7      	bls.n	8001136 <task_main_loop+0x52>
		  }
	  }

	  //updateChannel();

	  if (HAL_GetTick() - last_tx_UART >= STD_DELAY)
 80011a6:	f000 fc3d 	bl	8001a24 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b4c      	ldr	r3, [pc, #304]	; (80012e0 <task_main_loop+0x1fc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b63      	cmp	r3, #99	; 0x63
 80011b4:	f240 8087 	bls.w	80012c6 <task_main_loop+0x1e2>
	   {
		  last_tx_UART = HAL_GetTick();
 80011b8:	f000 fc34 	bl	8001a24 <HAL_GetTick>
 80011bc:	4603      	mov	r3, r0
 80011be:	4a48      	ldr	r2, [pc, #288]	; (80012e0 <task_main_loop+0x1fc>)
 80011c0:	6013      	str	r3, [r2, #0]
    
		sprintf((char*)msg, "Raw ADC:\r\n");
 80011c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011c6:	4947      	ldr	r1, [pc, #284]	; (80012e4 <task_main_loop+0x200>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f005 ffa5 	bl	8007118 <siprintf>
		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 80011ce:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff f81c 	bl	8000210 <strlen>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	4840      	ldr	r0, [pc, #256]	; (80012e8 <task_main_loop+0x204>)
 80011e6:	f004 f8cb 	bl	8005380 <HAL_UART_Transmit>
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
				adc3_buf[0],adc3_buf[1],adc3_buf[2],adc3_buf[3],adc3_buf[4],
 80011ea:	4b3b      	ldr	r3, [pc, #236]	; (80012d8 <task_main_loop+0x1f4>)
 80011ec:	881b      	ldrh	r3, [r3, #0]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 80011ee:	469c      	mov	ip, r3
				adc3_buf[0],adc3_buf[1],adc3_buf[2],adc3_buf[3],adc3_buf[4],
 80011f0:	4b39      	ldr	r3, [pc, #228]	; (80012d8 <task_main_loop+0x1f4>)
 80011f2:	885b      	ldrh	r3, [r3, #2]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 80011f4:	469e      	mov	lr, r3
				adc3_buf[0],adc3_buf[1],adc3_buf[2],adc3_buf[3],adc3_buf[4],
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <task_main_loop+0x1f4>)
 80011f8:	889b      	ldrh	r3, [r3, #4]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
				adc3_buf[0],adc3_buf[1],adc3_buf[2],adc3_buf[3],adc3_buf[4],
 80011fc:	4b36      	ldr	r3, [pc, #216]	; (80012d8 <task_main_loop+0x1f4>)
 80011fe:	88db      	ldrh	r3, [r3, #6]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001200:	62fb      	str	r3, [r7, #44]	; 0x2c
				adc3_buf[0],adc3_buf[1],adc3_buf[2],adc3_buf[3],adc3_buf[4],
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <task_main_loop+0x1f4>)
 8001204:	891b      	ldrh	r3, [r3, #8]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001206:	62bb      	str	r3, [r7, #40]	; 0x28
				adc3_buf[5],adc3_buf[6],adc3_buf[7],adc3_buf[8],adc3_buf[9],
 8001208:	4b33      	ldr	r3, [pc, #204]	; (80012d8 <task_main_loop+0x1f4>)
 800120a:	895b      	ldrh	r3, [r3, #10]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
				adc3_buf[5],adc3_buf[6],adc3_buf[7],adc3_buf[8],adc3_buf[9],
 800120e:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <task_main_loop+0x1f4>)
 8001210:	899b      	ldrh	r3, [r3, #12]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001212:	623b      	str	r3, [r7, #32]
				adc3_buf[5],adc3_buf[6],adc3_buf[7],adc3_buf[8],adc3_buf[9],
 8001214:	4b30      	ldr	r3, [pc, #192]	; (80012d8 <task_main_loop+0x1f4>)
 8001216:	89db      	ldrh	r3, [r3, #14]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001218:	61fb      	str	r3, [r7, #28]
				adc3_buf[5],adc3_buf[6],adc3_buf[7],adc3_buf[8],adc3_buf[9],
 800121a:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <task_main_loop+0x1f4>)
 800121c:	8a1b      	ldrh	r3, [r3, #16]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800121e:	61bb      	str	r3, [r7, #24]
				adc3_buf[5],adc3_buf[6],adc3_buf[7],adc3_buf[8],adc3_buf[9],
 8001220:	4b2d      	ldr	r3, [pc, #180]	; (80012d8 <task_main_loop+0x1f4>)
 8001222:	8a5b      	ldrh	r3, [r3, #18]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001224:	617b      	str	r3, [r7, #20]
				adc1_buf[0],adc1_buf[1],adc1_buf[2],adc1_buf[3],adc1_buf[4],
 8001226:	4b2d      	ldr	r3, [pc, #180]	; (80012dc <task_main_loop+0x1f8>)
 8001228:	881b      	ldrh	r3, [r3, #0]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800122a:	613b      	str	r3, [r7, #16]
				adc1_buf[0],adc1_buf[1],adc1_buf[2],adc1_buf[3],adc1_buf[4],
 800122c:	4b2b      	ldr	r3, [pc, #172]	; (80012dc <task_main_loop+0x1f8>)
 800122e:	885b      	ldrh	r3, [r3, #2]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001230:	60fb      	str	r3, [r7, #12]
				adc1_buf[0],adc1_buf[1],adc1_buf[2],adc1_buf[3],adc1_buf[4],
 8001232:	4b2a      	ldr	r3, [pc, #168]	; (80012dc <task_main_loop+0x1f8>)
 8001234:	889b      	ldrh	r3, [r3, #4]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001236:	60bb      	str	r3, [r7, #8]
				adc1_buf[0],adc1_buf[1],adc1_buf[2],adc1_buf[3],adc1_buf[4],
 8001238:	4b28      	ldr	r3, [pc, #160]	; (80012dc <task_main_loop+0x1f8>)
 800123a:	88db      	ldrh	r3, [r3, #6]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800123c:	607b      	str	r3, [r7, #4]
				adc1_buf[0],adc1_buf[1],adc1_buf[2],adc1_buf[3],adc1_buf[4],
 800123e:	4b27      	ldr	r3, [pc, #156]	; (80012dc <task_main_loop+0x1f8>)
 8001240:	891b      	ldrh	r3, [r3, #8]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001242:	461e      	mov	r6, r3
				adc1_buf[5],adc1_buf[6],adc1_buf[7],adc1_buf[8],adc1_buf[9]);
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <task_main_loop+0x1f8>)
 8001246:	895b      	ldrh	r3, [r3, #10]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001248:	461d      	mov	r5, r3
				adc1_buf[5],adc1_buf[6],adc1_buf[7],adc1_buf[8],adc1_buf[9]);
 800124a:	4b24      	ldr	r3, [pc, #144]	; (80012dc <task_main_loop+0x1f8>)
 800124c:	899b      	ldrh	r3, [r3, #12]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800124e:	461c      	mov	r4, r3
				adc1_buf[5],adc1_buf[6],adc1_buf[7],adc1_buf[8],adc1_buf[9]);
 8001250:	4b22      	ldr	r3, [pc, #136]	; (80012dc <task_main_loop+0x1f8>)
 8001252:	89db      	ldrh	r3, [r3, #14]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001254:	4619      	mov	r1, r3
				adc1_buf[5],adc1_buf[6],adc1_buf[7],adc1_buf[8],adc1_buf[9]);
 8001256:	4b21      	ldr	r3, [pc, #132]	; (80012dc <task_main_loop+0x1f8>)
 8001258:	8a1b      	ldrh	r3, [r3, #16]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 800125a:	461a      	mov	r2, r3
				adc1_buf[5],adc1_buf[6],adc1_buf[7],adc1_buf[8],adc1_buf[9]);
 800125c:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <task_main_loop+0x1f8>)
 800125e:	8a5b      	ldrh	r3, [r3, #18]
		sprintf((char*)msg, "%4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d %4d\r\n\n",
 8001260:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001264:	9311      	str	r3, [sp, #68]	; 0x44
 8001266:	9210      	str	r2, [sp, #64]	; 0x40
 8001268:	910f      	str	r1, [sp, #60]	; 0x3c
 800126a:	940e      	str	r4, [sp, #56]	; 0x38
 800126c:	950d      	str	r5, [sp, #52]	; 0x34
 800126e:	960c      	str	r6, [sp, #48]	; 0x30
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	920b      	str	r2, [sp, #44]	; 0x2c
 8001274:	68ba      	ldr	r2, [r7, #8]
 8001276:	920a      	str	r2, [sp, #40]	; 0x28
 8001278:	68fa      	ldr	r2, [r7, #12]
 800127a:	9209      	str	r2, [sp, #36]	; 0x24
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	9208      	str	r2, [sp, #32]
 8001280:	697a      	ldr	r2, [r7, #20]
 8001282:	9207      	str	r2, [sp, #28]
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	9206      	str	r2, [sp, #24]
 8001288:	69fa      	ldr	r2, [r7, #28]
 800128a:	9205      	str	r2, [sp, #20]
 800128c:	6a3a      	ldr	r2, [r7, #32]
 800128e:	9204      	str	r2, [sp, #16]
 8001290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001292:	9203      	str	r2, [sp, #12]
 8001294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001296:	9202      	str	r2, [sp, #8]
 8001298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800129a:	9201      	str	r2, [sp, #4]
 800129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800129e:	9300      	str	r3, [sp, #0]
 80012a0:	4673      	mov	r3, lr
 80012a2:	4662      	mov	r2, ip
 80012a4:	4911      	ldr	r1, [pc, #68]	; (80012ec <task_main_loop+0x208>)
 80012a6:	f005 ff37 	bl	8007118 <siprintf>

		HAL_UART_Transmit(&huart2, msg, strlen((char*)msg), HAL_MAX_DELAY);
 80012aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7fe ffae 	bl	8000210 <strlen>
 80012b4:	4603      	mov	r3, r0
 80012b6:	b29a      	uxth	r2, r3
 80012b8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	4809      	ldr	r0, [pc, #36]	; (80012e8 <task_main_loop+0x204>)
 80012c2:	f004 f85d 	bl	8005380 <HAL_UART_Transmit>
	   }
	  osDelay(1);
 80012c6:	2001      	movs	r0, #1
 80012c8:	f004 fd0e 	bl	8005ce8 <osDelay>
  {
 80012cc:	e70e      	b.n	80010ec <task_main_loop+0x8>
 80012ce:	bf00      	nop
 80012d0:	20003698 	.word	0x20003698
 80012d4:	20003670 	.word	0x20003670
 80012d8:	20001f00 	.word	0x20001f00
 80012dc:	20000790 	.word	0x20000790
 80012e0:	2000369c 	.word	0x2000369c
 80012e4:	08007a48 	.word	0x08007a48
 80012e8:	20000704 	.word	0x20000704
 80012ec:	08007a54 	.word	0x08007a54

080012f0 <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80012f8:	2001      	movs	r0, #1
 80012fa:	f004 fcf5 	bl	8005ce8 <osDelay>
 80012fe:	e7fb      	b.n	80012f8 <task_gcan_hw+0x8>

08001300 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a04      	ldr	r2, [pc, #16]	; (8001320 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d101      	bne.n	8001316 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001312:	f000 fb73 	bl	80019fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40001000 	.word	0x40001000

08001324 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001328:	b672      	cpsid	i
}
 800132a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800132c:	e7fe      	b.n	800132c <Error_Handler+0x8>
	...

08001330 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_MspInit+0x4c>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_MspInit+0x4c>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a0a      	ldr	r2, [pc, #40]	; (800137c <HAL_MspInit+0x4c>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	603b      	str	r3, [r7, #0]
 8001364:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	210f      	movs	r1, #15
 800136a:	f06f 0001 	mvn.w	r0, #1
 800136e:	f001 fb69 	bl	8002a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40023800 	.word	0x40023800

08001380 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08e      	sub	sp, #56	; 0x38
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a73      	ldr	r2, [pc, #460]	; (800156c <HAL_ADC_MspInit+0x1ec>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d16d      	bne.n	800147e <HAL_ADC_MspInit+0xfe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a2:	4b73      	ldr	r3, [pc, #460]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a72      	ldr	r2, [pc, #456]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b70      	ldr	r3, [pc, #448]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b6:	623b      	str	r3, [r7, #32]
 80013b8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	4b6d      	ldr	r3, [pc, #436]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	4a6c      	ldr	r2, [pc, #432]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013c0:	f043 0304 	orr.w	r3, r3, #4
 80013c4:	6313      	str	r3, [r2, #48]	; 0x30
 80013c6:	4b6a      	ldr	r3, [pc, #424]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	f003 0304 	and.w	r3, r3, #4
 80013ce:	61fb      	str	r3, [r7, #28]
 80013d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	4b67      	ldr	r3, [pc, #412]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a66      	ldr	r2, [pc, #408]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b64      	ldr	r3, [pc, #400]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0301 	and.w	r3, r3, #1
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = ADC_INPUT11_Pin|ADC_INPUT15_Pin;
 80013ea:	230c      	movs	r3, #12
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ee:	2303      	movs	r3, #3
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	485d      	ldr	r0, [pc, #372]	; (8001574 <HAL_ADC_MspInit+0x1f4>)
 80013fe:	f001 fec3 	bl	8003188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADC_INPUT14_Pin|ADC_INPUT10_Pin|ADC_INPUT13_Pin|ADC_INPUT12_Pin
 8001402:	23ff      	movs	r3, #255	; 0xff
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
                          |ADC_INPUT19_Pin|ADC_INPUT18_Pin|ADC_INPUT17_Pin|ADC_INPUT16_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001406:	2303      	movs	r3, #3
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001412:	4619      	mov	r1, r3
 8001414:	4858      	ldr	r0, [pc, #352]	; (8001578 <HAL_ADC_MspInit+0x1f8>)
 8001416:	f001 feb7 	bl	8003188 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800141a:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 800141c:	4a58      	ldr	r2, [pc, #352]	; (8001580 <HAL_ADC_MspInit+0x200>)
 800141e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001420:	4b56      	ldr	r3, [pc, #344]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001422:	2200      	movs	r2, #0
 8001424:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001426:	4b55      	ldr	r3, [pc, #340]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001428:	2200      	movs	r2, #0
 800142a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800142c:	4b53      	ldr	r3, [pc, #332]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 800142e:	2200      	movs	r2, #0
 8001430:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001432:	4b52      	ldr	r3, [pc, #328]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001434:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001438:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800143a:	4b50      	ldr	r3, [pc, #320]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 800143c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001440:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001442:	4b4e      	ldr	r3, [pc, #312]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001444:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001448:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800144a:	4b4c      	ldr	r3, [pc, #304]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 800144c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001450:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8001452:	4b4a      	ldr	r3, [pc, #296]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001454:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001458:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800145a:	4b48      	ldr	r3, [pc, #288]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 800145c:	2200      	movs	r2, #0
 800145e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001460:	4846      	ldr	r0, [pc, #280]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001462:	f001 fb19 	bl	8002a98 <HAL_DMA_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <HAL_ADC_MspInit+0xf0>
    {
      Error_Handler();
 800146c:	f7ff ff5a 	bl	8001324 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a42      	ldr	r2, [pc, #264]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001474:	639a      	str	r2, [r3, #56]	; 0x38
 8001476:	4a41      	ldr	r2, [pc, #260]	; (800157c <HAL_ADC_MspInit+0x1fc>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800147c:	e072      	b.n	8001564 <HAL_ADC_MspInit+0x1e4>
  else if(hadc->Instance==ADC3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a40      	ldr	r2, [pc, #256]	; (8001584 <HAL_ADC_MspInit+0x204>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d16d      	bne.n	8001564 <HAL_ADC_MspInit+0x1e4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	4a38      	ldr	r2, [pc, #224]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001492:	6453      	str	r3, [r2, #68]	; 0x44
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80014a0:	4b33      	ldr	r3, [pc, #204]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a32      	ldr	r2, [pc, #200]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014a6:	f043 0320 	orr.w	r3, r3, #32
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b30      	ldr	r3, [pc, #192]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0320 	and.w	r3, r3, #32
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b8:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <HAL_ADC_MspInit+0x1f0>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ADC_INPUT4_Pin|ADC_INPUT5_Pin|ADC_INPUT2_Pin|ADC_INPUT0_Pin
 80014d0:	f44f 63ff 	mov.w	r3, #2040	; 0x7f8
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d6:	2303      	movs	r3, #3
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e2:	4619      	mov	r1, r3
 80014e4:	4828      	ldr	r0, [pc, #160]	; (8001588 <HAL_ADC_MspInit+0x208>)
 80014e6:	f001 fe4f 	bl	8003188 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ADC_INPUT8_Pin|ADC_INPUT9_Pin;
 80014ea:	2303      	movs	r3, #3
 80014ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014ee:	2303      	movs	r3, #3
 80014f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	4619      	mov	r1, r3
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <HAL_ADC_MspInit+0x1f4>)
 80014fe:	f001 fe43 	bl	8003188 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001504:	4a22      	ldr	r2, [pc, #136]	; (8001590 <HAL_ADC_MspInit+0x210>)
 8001506:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001508:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800150a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800150e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001510:	4b1e      	ldr	r3, [pc, #120]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001516:	4b1d      	ldr	r3, [pc, #116]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001518:	2200      	movs	r2, #0
 800151a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800151c:	4b1b      	ldr	r3, [pc, #108]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800151e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001522:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001524:	4b19      	ldr	r3, [pc, #100]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001526:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800152a:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001534:	4b15      	ldr	r3, [pc, #84]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001536:	f44f 7280 	mov.w	r2, #256	; 0x100
 800153a:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800153c:	4b13      	ldr	r3, [pc, #76]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800153e:	2200      	movs	r2, #0
 8001540:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001542:	4b12      	ldr	r3, [pc, #72]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001544:	2200      	movs	r2, #0
 8001546:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800154a:	f001 faa5 	bl	8002a98 <HAL_DMA_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <HAL_ADC_MspInit+0x1d8>
      Error_Handler();
 8001554:	f7ff fee6 	bl	8001324 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a0c      	ldr	r2, [pc, #48]	; (800158c <HAL_ADC_MspInit+0x20c>)
 800155c:	639a      	str	r2, [r3, #56]	; 0x38
 800155e:	4a0b      	ldr	r2, [pc, #44]	; (800158c <HAL_ADC_MspInit+0x20c>)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001564:	bf00      	nop
 8001566:	3738      	adds	r7, #56	; 0x38
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40012000 	.word	0x40012000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020800 	.word	0x40020800
 8001578:	40020000 	.word	0x40020000
 800157c:	20000584 	.word	0x20000584
 8001580:	40026410 	.word	0x40026410
 8001584:	40012200 	.word	0x40012200
 8001588:	40021400 	.word	0x40021400
 800158c:	200005e4 	.word	0x200005e4
 8001590:	40026428 	.word	0x40026428

08001594 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	; 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a23      	ldr	r2, [pc, #140]	; (8001640 <HAL_CAN_MspInit+0xac>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d140      	bne.n	8001638 <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015b6:	4b23      	ldr	r3, [pc, #140]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	4a22      	ldr	r2, [pc, #136]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015c0:	6413      	str	r3, [r2, #64]	; 0x40
 80015c2:	4b20      	ldr	r3, [pc, #128]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b1d      	ldr	r3, [pc, #116]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b1a      	ldr	r3, [pc, #104]	; (8001644 <HAL_CAN_MspInit+0xb0>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015e6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80015f8:	2309      	movs	r3, #9
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	4811      	ldr	r0, [pc, #68]	; (8001648 <HAL_CAN_MspInit+0xb4>)
 8001604:	f001 fdc0 	bl	8003188 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8001608:	2200      	movs	r2, #0
 800160a:	2105      	movs	r1, #5
 800160c:	2013      	movs	r0, #19
 800160e:	f001 fa19 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001612:	2013      	movs	r0, #19
 8001614:	f001 fa32 	bl	8002a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	2105      	movs	r1, #5
 800161c:	2014      	movs	r0, #20
 800161e:	f001 fa11 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001622:	2014      	movs	r0, #20
 8001624:	f001 fa2a 	bl	8002a7c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2105      	movs	r1, #5
 800162c:	2015      	movs	r0, #21
 800162e:	f001 fa09 	bl	8002a44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001632:	2015      	movs	r0, #21
 8001634:	f001 fa22 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40006400 	.word	0x40006400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020400 	.word	0x40020400

0800164c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08a      	sub	sp, #40	; 0x28
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C4)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a17      	ldr	r2, [pc, #92]	; (80016c8 <HAL_I2C_MspInit+0x7c>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d128      	bne.n	80016c0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C4_MspInit 0 */

  /* USER CODE END I2C4_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <HAL_I2C_MspInit+0x80>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a16      	ldr	r2, [pc, #88]	; (80016cc <HAL_I2C_MspInit+0x80>)
 8001674:	f043 0320 	orr.w	r3, r3, #32
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b14      	ldr	r3, [pc, #80]	; (80016cc <HAL_I2C_MspInit+0x80>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0320 	and.w	r3, r3, #32
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    /**I2C4 GPIO Configuration
    PF14     ------> I2C4_SCL
    PF15     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8001686:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800168a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800168c:	2312      	movs	r3, #18
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001694:	2303      	movs	r3, #3
 8001696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001698:	2304      	movs	r3, #4
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800169c:	f107 0314 	add.w	r3, r7, #20
 80016a0:	4619      	mov	r1, r3
 80016a2:	480b      	ldr	r0, [pc, #44]	; (80016d0 <HAL_I2C_MspInit+0x84>)
 80016a4:	f001 fd70 	bl	8003188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6413      	str	r3, [r2, #64]	; 0x40
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_I2C_MspInit+0x80>)
 80016b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40006000 	.word	0x40006000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40021400 	.word	0x40021400

080016d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016e4:	d10b      	bne.n	80016fe <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <HAL_TIM_Base_MspInit+0x38>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ea:	4a08      	ldr	r2, [pc, #32]	; (800170c <HAL_TIM_Base_MspInit+0x38>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6413      	str	r3, [r2, #64]	; 0x40
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_TIM_Base_MspInit+0x38>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016fe:	bf00      	nop
 8001700:	3714      	adds	r7, #20
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	40023800 	.word	0x40023800

08001710 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b08a      	sub	sp, #40	; 0x28
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]
 8001724:	60da      	str	r2, [r3, #12]
 8001726:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a17      	ldr	r2, [pc, #92]	; (800178c <HAL_UART_MspInit+0x7c>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d127      	bne.n	8001782 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001732:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_UART_MspInit+0x80>)
 8001734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001736:	4a16      	ldr	r2, [pc, #88]	; (8001790 <HAL_UART_MspInit+0x80>)
 8001738:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800173c:	6413      	str	r3, [r2, #64]	; 0x40
 800173e:	4b14      	ldr	r3, [pc, #80]	; (8001790 <HAL_UART_MspInit+0x80>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800174a:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_UART_MspInit+0x80>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a10      	ldr	r2, [pc, #64]	; (8001790 <HAL_UART_MspInit+0x80>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_UART_MspInit+0x80>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0308 	and.w	r3, r3, #8
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001762:	2360      	movs	r3, #96	; 0x60
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001766:	2302      	movs	r3, #2
 8001768:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176a:	2300      	movs	r3, #0
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176e:	2303      	movs	r3, #3
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001772:	2307      	movs	r3, #7
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	4619      	mov	r1, r3
 800177c:	4805      	ldr	r0, [pc, #20]	; (8001794 <HAL_UART_MspInit+0x84>)
 800177e:	f001 fd03 	bl	8003188 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001782:	bf00      	nop
 8001784:	3728      	adds	r7, #40	; 0x28
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40004400 	.word	0x40004400
 8001790:	40023800 	.word	0x40023800
 8001794:	40020c00 	.word	0x40020c00

08001798 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08c      	sub	sp, #48	; 0x30
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	6879      	ldr	r1, [r7, #4]
 80017ac:	2036      	movs	r0, #54	; 0x36
 80017ae:	f001 f949 	bl	8002a44 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017b2:	2036      	movs	r0, #54	; 0x36
 80017b4:	f001 f962 	bl	8002a7c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017b8:	4b1f      	ldr	r3, [pc, #124]	; (8001838 <HAL_InitTick+0xa0>)
 80017ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017bc:	4a1e      	ldr	r2, [pc, #120]	; (8001838 <HAL_InitTick+0xa0>)
 80017be:	f043 0310 	orr.w	r3, r3, #16
 80017c2:	6413      	str	r3, [r2, #64]	; 0x40
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <HAL_InitTick+0xa0>)
 80017c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c8:	f003 0310 	and.w	r3, r3, #16
 80017cc:	60fb      	str	r3, [r7, #12]
 80017ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d0:	f107 0210 	add.w	r2, r7, #16
 80017d4:	f107 0314 	add.w	r3, r7, #20
 80017d8:	4611      	mov	r1, r2
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fc9c 	bl	8004118 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80017e0:	f002 fc72 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80017e4:	4603      	mov	r3, r0
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ec:	4a13      	ldr	r2, [pc, #76]	; (800183c <HAL_InitTick+0xa4>)
 80017ee:	fba2 2303 	umull	r2, r3, r2, r3
 80017f2:	0c9b      	lsrs	r3, r3, #18
 80017f4:	3b01      	subs	r3, #1
 80017f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017f8:	4b11      	ldr	r3, [pc, #68]	; (8001840 <HAL_InitTick+0xa8>)
 80017fa:	4a12      	ldr	r2, [pc, #72]	; (8001844 <HAL_InitTick+0xac>)
 80017fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017fe:	4b10      	ldr	r3, [pc, #64]	; (8001840 <HAL_InitTick+0xa8>)
 8001800:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001804:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001806:	4a0e      	ldr	r2, [pc, #56]	; (8001840 <HAL_InitTick+0xa8>)
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <HAL_InitTick+0xa8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001812:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <HAL_InitTick+0xa8>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001818:	4809      	ldr	r0, [pc, #36]	; (8001840 <HAL_InitTick+0xa8>)
 800181a:	f003 f89f 	bl	800495c <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001824:	4806      	ldr	r0, [pc, #24]	; (8001840 <HAL_InitTick+0xa8>)
 8001826:	f003 f8f1 	bl	8004a0c <HAL_TIM_Base_Start_IT>
 800182a:	4603      	mov	r3, r0
 800182c:	e000      	b.n	8001830 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
}
 8001830:	4618      	mov	r0, r3
 8001832:	3730      	adds	r7, #48	; 0x30
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	40023800 	.word	0x40023800
 800183c:	431bde83 	.word	0x431bde83
 8001840:	200036a0 	.word	0x200036a0
 8001844:	40001000 	.word	0x40001000

08001848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800184c:	e7fe      	b.n	800184c <NMI_Handler+0x4>

0800184e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001852:	e7fe      	b.n	8001852 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	e7fe      	b.n	8001858 <MemManage_Handler+0x4>

0800185a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800185e:	e7fe      	b.n	800185e <BusFault_Handler+0x4>

08001860 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <UsageFault_Handler+0x4>

08001866 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <CAN1_TX_IRQHandler+0x10>)
 800187a:	f000 fdf2 	bl	8002462 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000644 	.word	0x20000644

08001888 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800188c:	4802      	ldr	r0, [pc, #8]	; (8001898 <CAN1_RX0_IRQHandler+0x10>)
 800188e:	f000 fde8 	bl	8002462 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000644 	.word	0x20000644

0800189c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018a0:	4802      	ldr	r0, [pc, #8]	; (80018ac <CAN1_RX1_IRQHandler+0x10>)
 80018a2:	f000 fdde 	bl	8002462 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018a6:	bf00      	nop
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000644 	.word	0x20000644

080018b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM6_DAC_IRQHandler+0x10>)
 80018b6:	f003 f921 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200036a0 	.word	0x200036a0

080018c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80018c8:	4802      	ldr	r0, [pc, #8]	; (80018d4 <DMA2_Stream0_IRQHandler+0x10>)
 80018ca:	f001 f9f3 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000584 	.word	0x20000584

080018d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80018dc:	4802      	ldr	r0, [pc, #8]	; (80018e8 <DMA2_Stream1_IRQHandler+0x10>)
 80018de:	f001 f9e9 	bl	8002cb4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	200005e4 	.word	0x200005e4

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f005 fbbc 	bl	8007098 <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20050000 	.word	0x20050000
 800194c:	00000400 	.word	0x00000400
 8001950:	200036ec 	.word	0x200036ec
 8001954:	2004cc30 	.word	0x2004cc30

08001958 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800197c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019b4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001980:	480d      	ldr	r0, [pc, #52]	; (80019b8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001982:	490e      	ldr	r1, [pc, #56]	; (80019bc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001984:	4a0e      	ldr	r2, [pc, #56]	; (80019c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001986:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001988:	e002      	b.n	8001990 <LoopCopyDataInit>

0800198a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800198a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800198c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800198e:	3304      	adds	r3, #4

08001990 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001990:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001992:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001994:	d3f9      	bcc.n	800198a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001996:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001998:	4c0b      	ldr	r4, [pc, #44]	; (80019c8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800199a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800199c:	e001      	b.n	80019a2 <LoopFillZerobss>

0800199e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800199e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019a0:	3204      	adds	r2, #4

080019a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019a4:	d3fb      	bcc.n	800199e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019a6:	f7ff ffd7 	bl	8001958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019aa:	f005 fb7b 	bl	80070a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ae:	f7fe fe23 	bl	80005f8 <main>
  bx  lr    
 80019b2:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80019b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80019b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019bc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80019c0:	08007b14 	.word	0x08007b14
  ldr r2, =_sbss
 80019c4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80019c8:	2004cc30 	.word	0x2004cc30

080019cc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019cc:	e7fe      	b.n	80019cc <ADC_IRQHandler>
	...

080019d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_Init+0x28>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_Init+0x28>)
 80019da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019de:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e0:	2003      	movs	r0, #3
 80019e2:	f001 f824 	bl	8002a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e6:	2000      	movs	r0, #0
 80019e8:	f7ff fed6 	bl	8001798 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80019ec:	f7ff fca0 	bl	8001330 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	40023c00 	.word	0x40023c00

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	; (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000018 	.word	0x20000018
 8001a20:	200036f0 	.word	0x200036f0

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	; (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200036f0 	.word	0x200036f0

08001a3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a44:	2300      	movs	r3, #0
 8001a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e031      	b.n	8001ab6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fc90 	bl	8001380 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d116      	bne.n	8001aa8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_ADC_Init+0x84>)
 8001a80:	4013      	ands	r3, r2
 8001a82:	f043 0202 	orr.w	r2, r3, #2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fa72 	bl	8001f74 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f023 0303 	bic.w	r3, r3, #3
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40
 8001aa6:	e001      	b.n	8001aac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	ffffeefd 	.word	0xffffeefd

08001ac4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d101      	bne.n	8001ae2 <HAL_ADC_Start_DMA+0x1e>
 8001ade:	2302      	movs	r3, #2
 8001ae0:	e0d4      	b.n	8001c8c <HAL_ADC_Start_DMA+0x1c8>
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d018      	beq.n	8001b2a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001b08:	4b62      	ldr	r3, [pc, #392]	; (8001c94 <HAL_ADC_Start_DMA+0x1d0>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a62      	ldr	r2, [pc, #392]	; (8001c98 <HAL_ADC_Start_DMA+0x1d4>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9a      	lsrs	r2, r3, #18
 8001b14:	4613      	mov	r3, r2
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	4413      	add	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b1c:	e002      	b.n	8001b24 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f9      	bne.n	8001b1e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	f040 809c 	bne.w	8001c72 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001b3e:	4b57      	ldr	r3, [pc, #348]	; (8001c9c <HAL_ADC_Start_DMA+0x1d8>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d007      	beq.n	8001b68 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b74:	d106      	bne.n	8001b84 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f023 0206 	bic.w	r2, r3, #6
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
 8001b82:	e002      	b.n	8001b8a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b96:	4a42      	ldr	r2, [pc, #264]	; (8001ca0 <HAL_ADC_Start_DMA+0x1dc>)
 8001b98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9e:	4a41      	ldr	r2, [pc, #260]	; (8001ca4 <HAL_ADC_Start_DMA+0x1e0>)
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba6:	4a40      	ldr	r2, [pc, #256]	; (8001ca8 <HAL_ADC_Start_DMA+0x1e4>)
 8001ba8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001bc2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bd2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	334c      	adds	r3, #76	; 0x4c
 8001bde:	4619      	mov	r1, r3
 8001be0:	68ba      	ldr	r2, [r7, #8]
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f001 f806 	bl	8002bf4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001be8:	4b30      	ldr	r3, [pc, #192]	; (8001cac <HAL_ADC_Start_DMA+0x1e8>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10f      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d143      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c10:	609a      	str	r2, [r3, #8]
 8001c12:	e03a      	b.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a25      	ldr	r2, [pc, #148]	; (8001cb0 <HAL_ADC_Start_DMA+0x1ec>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d10e      	bne.n	8001c3c <HAL_ADC_Start_DMA+0x178>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d107      	bne.n	8001c3c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c3a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_ADC_Start_DMA+0x1e8>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d120      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_ADC_Start_DMA+0x1f0>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d11b      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d114      	bne.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	e00b      	b.n	8001c8a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c76:	f043 0210 	orr.w	r2, r3, #16
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f043 0201 	orr.w	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3718      	adds	r7, #24
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000010 	.word	0x20000010
 8001c98:	431bde83 	.word	0x431bde83
 8001c9c:	fffff8fe 	.word	0xfffff8fe
 8001ca0:	08002169 	.word	0x08002169
 8001ca4:	08002223 	.word	0x08002223
 8001ca8:	0800223f 	.word	0x0800223f
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	40012000 	.word	0x40012000
 8001cb4:	40012200 	.word	0x40012200

08001cb8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x1c>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e12a      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x272>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b09      	cmp	r3, #9
 8001d0a:	d93a      	bls.n	8001d82 <HAL_ADC_ConfigChannel+0xa2>
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d14:	d035      	beq.n	8001d82 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	68d9      	ldr	r1, [r3, #12]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	461a      	mov	r2, r3
 8001d24:	4613      	mov	r3, r2
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4413      	add	r3, r2
 8001d2a:	3b1e      	subs	r3, #30
 8001d2c:	2207      	movs	r2, #7
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	43da      	mvns	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	400a      	ands	r2, r1
 8001d3a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a87      	ldr	r2, [pc, #540]	; (8001f60 <HAL_ADC_ConfigChannel+0x280>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d10a      	bne.n	8001d5c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68d9      	ldr	r1, [r3, #12]
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	061a      	lsls	r2, r3, #24
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	430a      	orrs	r2, r1
 8001d58:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d5a:	e035      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68d9      	ldr	r1, [r3, #12]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4403      	add	r3, r0
 8001d74:	3b1e      	subs	r3, #30
 8001d76:	409a      	lsls	r2, r3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	430a      	orrs	r2, r1
 8001d7e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d80:	e022      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	6919      	ldr	r1, [r3, #16]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	4613      	mov	r3, r2
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4413      	add	r3, r2
 8001d96:	2207      	movs	r2, #7
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6919      	ldr	r1, [r3, #16]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	4603      	mov	r3, r0
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	4403      	add	r3, r0
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	d824      	bhi.n	8001e1a <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	4413      	add	r3, r2
 8001de0:	3b05      	subs	r3, #5
 8001de2:	221f      	movs	r2, #31
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43da      	mvns	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	400a      	ands	r2, r1
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4613      	mov	r3, r2
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b05      	subs	r3, #5
 8001e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	635a      	str	r2, [r3, #52]	; 0x34
 8001e18:	e04c      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b0c      	cmp	r3, #12
 8001e20:	d824      	bhi.n	8001e6c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b23      	subs	r3, #35	; 0x23
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b23      	subs	r3, #35	; 0x23
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	631a      	str	r2, [r3, #48]	; 0x30
 8001e6a:	e023      	b.n	8001eb4 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685a      	ldr	r2, [r3, #4]
 8001e76:	4613      	mov	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3b41      	subs	r3, #65	; 0x41
 8001e7e:	221f      	movs	r2, #31
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	43da      	mvns	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	400a      	ands	r2, r1
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	3b41      	subs	r3, #65	; 0x41
 8001ea8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a2a      	ldr	r2, [pc, #168]	; (8001f64 <HAL_ADC_ConfigChannel+0x284>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1f4>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ec6:	d105      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001ec8:	4b27      	ldr	r3, [pc, #156]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001ece:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ed2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a22      	ldr	r2, [pc, #136]	; (8001f64 <HAL_ADC_ConfigChannel+0x284>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d109      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x212>
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b12      	cmp	r3, #18
 8001ee4:	d105      	bne.n	8001ef2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001ee6:	4b20      	ldr	r3, [pc, #128]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	4a1f      	ldr	r2, [pc, #124]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001eec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ef0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <HAL_ADC_ConfigChannel+0x284>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d125      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x268>
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_ADC_ConfigChannel+0x280>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d003      	beq.n	8001f0e <HAL_ADC_ConfigChannel+0x22e>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b11      	cmp	r3, #17
 8001f0c:	d11c      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001f0e:	4b16      	ldr	r3, [pc, #88]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	4a15      	ldr	r2, [pc, #84]	; (8001f68 <HAL_ADC_ConfigChannel+0x288>)
 8001f14:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001f18:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_ADC_ConfigChannel+0x280>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d111      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <HAL_ADC_ConfigChannel+0x28c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a11      	ldr	r2, [pc, #68]	; (8001f70 <HAL_ADC_ConfigChannel+0x290>)
 8001f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f2e:	0c9a      	lsrs	r2, r3, #18
 8001f30:	4613      	mov	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	005b      	lsls	r3, r3, #1
 8001f38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f3a:	e002      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1f9      	bne.n	8001f3c <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3714      	adds	r7, #20
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	10000012 	.word	0x10000012
 8001f64:	40012000 	.word	0x40012000
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	20000010 	.word	0x20000010
 8001f70:	431bde83 	.word	0x431bde83

08001f74 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	4b78      	ldr	r3, [pc, #480]	; (8002160 <ADC_Init+0x1ec>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	4a77      	ldr	r2, [pc, #476]	; (8002160 <ADC_Init+0x1ec>)
 8001f82:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f86:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	4b75      	ldr	r3, [pc, #468]	; (8002160 <ADC_Init+0x1ec>)
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4973      	ldr	r1, [pc, #460]	; (8002160 <ADC_Init+0x1ec>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <ADC_Init+0x1f0>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	035a      	lsls	r2, r3, #13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051a      	lsls	r2, r3, #20
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002126:	025a      	lsls	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	029a      	lsls	r2, r3, #10
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	0f000001 	.word	0x0f000001

08002168 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d13c      	bne.n	80021fc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d12b      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d127      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021aa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d006      	beq.n	80021c0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d119      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	685a      	ldr	r2, [r3, #4]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0220 	bic.w	r2, r2, #32
 80021ce:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7fe ff37 	bl	8001068 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80021fa:	e00e      	b.n	800221a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f003 0310 	and.w	r3, r3, #16
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002208:	68f8      	ldr	r0, [r7, #12]
 800220a:	f7ff fd5f 	bl	8001ccc <HAL_ADC_ErrorCallback>
}
 800220e:	e004      	b.n	800221a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	4798      	blx	r3
}
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f7ff fd41 	bl	8001cb8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002236:	bf00      	nop
 8002238:	3710      	adds	r7, #16
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}

0800223e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800223e:	b580      	push	{r7, lr}
 8002240:	b084      	sub	sp, #16
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2240      	movs	r2, #64	; 0x40
 8002250:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002256:	f043 0204 	orr.w	r2, r3, #4
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f7ff fd34 	bl	8001ccc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0ed      	b.n	800245a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d102      	bne.n	8002290 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff f982 	bl	8001594 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0202 	bic.w	r2, r2, #2
 800229e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022a0:	f7ff fbc0 	bl	8001a24 <HAL_GetTick>
 80022a4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022a6:	e012      	b.n	80022ce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022a8:	f7ff fbbc 	bl	8001a24 <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b0a      	cmp	r3, #10
 80022b4:	d90b      	bls.n	80022ce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2205      	movs	r2, #5
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0c5      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1e5      	bne.n	80022a8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f042 0201 	orr.w	r2, r2, #1
 80022ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022ec:	f7ff fb9a 	bl	8001a24 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80022f2:	e012      	b.n	800231a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80022f4:	f7ff fb96 	bl	8001a24 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b0a      	cmp	r3, #10
 8002300:	d90b      	bls.n	800231a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002306:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2205      	movs	r2, #5
 8002312:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e09f      	b.n	800245a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0e5      	beq.n	80022f4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	7e1b      	ldrb	r3, [r3, #24]
 800232c:	2b01      	cmp	r3, #1
 800232e:	d108      	bne.n	8002342 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	e007      	b.n	8002352 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7e5b      	ldrb	r3, [r3, #25]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002368:	601a      	str	r2, [r3, #0]
 800236a:	e007      	b.n	800237c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800237a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e9b      	ldrb	r3, [r3, #26]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d108      	bne.n	8002396 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0220 	orr.w	r2, r2, #32
 8002392:	601a      	str	r2, [r3, #0]
 8002394:	e007      	b.n	80023a6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 0220 	bic.w	r2, r2, #32
 80023a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	7edb      	ldrb	r3, [r3, #27]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d108      	bne.n	80023c0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f022 0210 	bic.w	r2, r2, #16
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	e007      	b.n	80023d0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f042 0210 	orr.w	r2, r2, #16
 80023ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	7f1b      	ldrb	r3, [r3, #28]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d108      	bne.n	80023ea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f042 0208 	orr.w	r2, r2, #8
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	e007      	b.n	80023fa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0208 	bic.w	r2, r2, #8
 80023f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	7f5b      	ldrb	r3, [r3, #29]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d108      	bne.n	8002414 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0204 	orr.w	r2, r2, #4
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	e007      	b.n	8002424 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0204 	bic.w	r2, r2, #4
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	ea42 0103 	orr.w	r1, r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	1e5a      	subs	r2, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002458:	2300      	movs	r3, #0
}
 800245a:	4618      	mov	r0, r3
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b08a      	sub	sp, #40	; 0x28
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d07c      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d023      	beq.n	80024fa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2201      	movs	r2, #1
 80024b8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f983 	bl	80027d0 <HAL_CAN_TxMailbox0CompleteCallback>
 80024ca:	e016      	b.n	80024fa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d004      	beq.n	80024e0 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
 80024de:	e00c      	b.n	80024fa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d004      	beq.n	80024f4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
 80024f2:	e002      	b.n	80024fa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f989 	bl	800280c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d024      	beq.n	800254e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f44f 7280 	mov.w	r2, #256	; 0x100
 800250c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f000 f963 	bl	80027e4 <HAL_CAN_TxMailbox1CompleteCallback>
 800251e:	e016      	b.n	800254e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002526:	2b00      	cmp	r3, #0
 8002528:	d004      	beq.n	8002534 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
 8002532:	e00c      	b.n	800254e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002544:	627b      	str	r3, [r7, #36]	; 0x24
 8002546:	e002      	b.n	800254e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 f969 	bl	8002820 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d024      	beq.n	80025a2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002560:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f000 f943 	bl	80027f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002572:	e016      	b.n	80025a2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002574:	69bb      	ldr	r3, [r7, #24]
 8002576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d004      	beq.n	8002588 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
 8002586:	e00c      	b.n	80025a2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	627b      	str	r3, [r7, #36]	; 0x24
 800259a:	e002      	b.n	80025a2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f949 	bl	8002834 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	f003 0308 	and.w	r3, r3, #8
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00c      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d007      	beq.n	80025c6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2210      	movs	r2, #16
 80025c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80025c6:	6a3b      	ldr	r3, [r7, #32]
 80025c8:	f003 0304 	and.w	r3, r3, #4
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2208      	movs	r2, #8
 80025e0:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f93a 	bl	800285c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d009      	beq.n	8002606 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d002      	beq.n	8002606 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f921 	bl	8002848 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002620:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2210      	movs	r2, #16
 8002628:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	f003 0320 	and.w	r3, r3, #32
 8002630:	2b00      	cmp	r3, #0
 8002632:	d00b      	beq.n	800264c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2208      	movs	r2, #8
 8002644:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f91c 	bl	8002884 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	f003 0310 	and.w	r3, r3, #16
 8002652:	2b00      	cmp	r3, #0
 8002654:	d009      	beq.n	800266a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 f903 	bl	8002870 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00b      	beq.n	800268c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d006      	beq.n	800268c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2210      	movs	r2, #16
 8002684:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f906 	bl	8002898 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800268c:	6a3b      	ldr	r3, [r7, #32]
 800268e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d006      	beq.n	80026ae <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2208      	movs	r2, #8
 80026a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f000 f8ff 	bl	80028ac <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d07b      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	f003 0304 	and.w	r3, r3, #4
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d072      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d008      	beq.n	80026de <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	f043 0302 	orr.w	r3, r3, #2
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002700:	2b00      	cmp	r3, #0
 8002702:	d008      	beq.n	8002716 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	f043 0304 	orr.w	r3, r3, #4
 8002714:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800271c:	2b00      	cmp	r3, #0
 800271e:	d043      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002726:	2b00      	cmp	r3, #0
 8002728:	d03e      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002730:	2b60      	cmp	r3, #96	; 0x60
 8002732:	d02b      	beq.n	800278c <HAL_CAN_IRQHandler+0x32a>
 8002734:	2b60      	cmp	r3, #96	; 0x60
 8002736:	d82e      	bhi.n	8002796 <HAL_CAN_IRQHandler+0x334>
 8002738:	2b50      	cmp	r3, #80	; 0x50
 800273a:	d022      	beq.n	8002782 <HAL_CAN_IRQHandler+0x320>
 800273c:	2b50      	cmp	r3, #80	; 0x50
 800273e:	d82a      	bhi.n	8002796 <HAL_CAN_IRQHandler+0x334>
 8002740:	2b40      	cmp	r3, #64	; 0x40
 8002742:	d019      	beq.n	8002778 <HAL_CAN_IRQHandler+0x316>
 8002744:	2b40      	cmp	r3, #64	; 0x40
 8002746:	d826      	bhi.n	8002796 <HAL_CAN_IRQHandler+0x334>
 8002748:	2b30      	cmp	r3, #48	; 0x30
 800274a:	d010      	beq.n	800276e <HAL_CAN_IRQHandler+0x30c>
 800274c:	2b30      	cmp	r3, #48	; 0x30
 800274e:	d822      	bhi.n	8002796 <HAL_CAN_IRQHandler+0x334>
 8002750:	2b10      	cmp	r3, #16
 8002752:	d002      	beq.n	800275a <HAL_CAN_IRQHandler+0x2f8>
 8002754:	2b20      	cmp	r3, #32
 8002756:	d005      	beq.n	8002764 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002758:	e01d      	b.n	8002796 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800275a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002762:	e019      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002766:	f043 0310 	orr.w	r3, r3, #16
 800276a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800276c:	e014      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	f043 0320 	orr.w	r3, r3, #32
 8002774:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002776:	e00f      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002780:	e00a      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800278a:	e005      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002794:	e000      	b.n	8002798 <HAL_CAN_IRQHandler+0x336>
            break;
 8002796:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027a6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2204      	movs	r2, #4
 80027ae:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80027b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d008      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	431a      	orrs	r2, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f87c 	bl	80028c0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80027c8:	bf00      	nop
 80027ca:	3728      	adds	r7, #40	; 0x28
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800283c:	bf00      	nop
 800283e:	370c      	adds	r7, #12
 8002840:	46bd      	mov	sp, r7
 8002842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002846:	4770      	bx	lr

08002848 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <__NVIC_SetPriorityGrouping+0x40>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028f0:	4013      	ands	r3, r2
 80028f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <__NVIC_SetPriorityGrouping+0x44>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <__NVIC_SetPriorityGrouping+0x40>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00
 8002918:	05fa0000 	.word	0x05fa0000

0800291c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <__NVIC_GetPriorityGrouping+0x18>)
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	0a1b      	lsrs	r3, r3, #8
 8002926:	f003 0307 	and.w	r3, r3, #7
}
 800292a:	4618      	mov	r0, r3
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	e000ed00 	.word	0xe000ed00

08002938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4603      	mov	r3, r0
 8002940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002946:	2b00      	cmp	r3, #0
 8002948:	db0b      	blt.n	8002962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800294a:	79fb      	ldrb	r3, [r7, #7]
 800294c:	f003 021f 	and.w	r2, r3, #31
 8002950:	4907      	ldr	r1, [pc, #28]	; (8002970 <__NVIC_EnableIRQ+0x38>)
 8002952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002956:	095b      	lsrs	r3, r3, #5
 8002958:	2001      	movs	r0, #1
 800295a:	fa00 f202 	lsl.w	r2, r0, r2
 800295e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	e000e100 	.word	0xe000e100

08002974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	4603      	mov	r3, r0
 800297c:	6039      	str	r1, [r7, #0]
 800297e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002984:	2b00      	cmp	r3, #0
 8002986:	db0a      	blt.n	800299e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	490c      	ldr	r1, [pc, #48]	; (80029c0 <__NVIC_SetPriority+0x4c>)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	0112      	lsls	r2, r2, #4
 8002994:	b2d2      	uxtb	r2, r2
 8002996:	440b      	add	r3, r1
 8002998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800299c:	e00a      	b.n	80029b4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	b2da      	uxtb	r2, r3
 80029a2:	4908      	ldr	r1, [pc, #32]	; (80029c4 <__NVIC_SetPriority+0x50>)
 80029a4:	79fb      	ldrb	r3, [r7, #7]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	3b04      	subs	r3, #4
 80029ac:	0112      	lsls	r2, r2, #4
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	440b      	add	r3, r1
 80029b2:	761a      	strb	r2, [r3, #24]
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000e100 	.word	0xe000e100
 80029c4:	e000ed00 	.word	0xe000ed00

080029c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b089      	sub	sp, #36	; 0x24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f003 0307 	and.w	r3, r3, #7
 80029da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	f1c3 0307 	rsb	r3, r3, #7
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	bf28      	it	cs
 80029e6:	2304      	movcs	r3, #4
 80029e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3304      	adds	r3, #4
 80029ee:	2b06      	cmp	r3, #6
 80029f0:	d902      	bls.n	80029f8 <NVIC_EncodePriority+0x30>
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	3b03      	subs	r3, #3
 80029f6:	e000      	b.n	80029fa <NVIC_EncodePriority+0x32>
 80029f8:	2300      	movs	r3, #0
 80029fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43da      	mvns	r2, r3
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	401a      	ands	r2, r3
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a10:	f04f 31ff 	mov.w	r1, #4294967295
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1a:	43d9      	mvns	r1, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	4313      	orrs	r3, r2
         );
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3724      	adds	r7, #36	; 0x24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr

08002a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b082      	sub	sp, #8
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff ff4c 	bl	80028d4 <__NVIC_SetPriorityGrouping>
}
 8002a3c:	bf00      	nop
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a52:	2300      	movs	r3, #0
 8002a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a56:	f7ff ff61 	bl	800291c <__NVIC_GetPriorityGrouping>
 8002a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	68b9      	ldr	r1, [r7, #8]
 8002a60:	6978      	ldr	r0, [r7, #20]
 8002a62:	f7ff ffb1 	bl	80029c8 <NVIC_EncodePriority>
 8002a66:	4602      	mov	r2, r0
 8002a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6c:	4611      	mov	r1, r2
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7ff ff80 	bl	8002974 <__NVIC_SetPriority>
}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff ff54 	bl	8002938 <__NVIC_EnableIRQ>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002aa4:	f7fe ffbe 	bl	8001a24 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e099      	b.n	8002be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0201 	bic.w	r2, r2, #1
 8002ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad4:	e00f      	b.n	8002af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ad6:	f7fe ffa5 	bl	8001a24 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b05      	cmp	r3, #5
 8002ae2:	d908      	bls.n	8002af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2220      	movs	r2, #32
 8002ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2203      	movs	r2, #3
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e078      	b.n	8002be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0301 	and.w	r3, r3, #1
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1e8      	bne.n	8002ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_DMA_Init+0x158>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b04      	cmp	r3, #4
 8002b4e:	d107      	bne.n	8002b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f023 0307 	bic.w	r3, r3, #7
 8002b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d117      	bne.n	8002bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00e      	beq.n	8002bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	f000 fa77 	bl	8003090 <DMA_CheckFifoParam>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d008      	beq.n	8002bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2240      	movs	r2, #64	; 0x40
 8002bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e016      	b.n	8002be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 fa2e 	bl	8003024 <DMA_CalcBaseAndBitshift>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	223f      	movs	r2, #63	; 0x3f
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	f010803f 	.word	0xf010803f

08002bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_DMA_Start_IT+0x26>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e048      	b.n	8002cac <HAL_DMA_Start_IT+0xb8>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d137      	bne.n	8002c9e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2202      	movs	r2, #2
 8002c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	68b9      	ldr	r1, [r7, #8]
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f000 f9c0 	bl	8002fc8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c4c:	223f      	movs	r2, #63	; 0x3f
 8002c4e:	409a      	lsls	r2, r3
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0216 	orr.w	r2, r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c72:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d007      	beq.n	8002c8c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f042 0208 	orr.w	r2, r2, #8
 8002c8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f042 0201 	orr.w	r2, r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e005      	b.n	8002caa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002caa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002cc0:	4b8e      	ldr	r3, [pc, #568]	; (8002efc <HAL_DMA_IRQHandler+0x248>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a8e      	ldr	r2, [pc, #568]	; (8002f00 <HAL_DMA_IRQHandler+0x24c>)
 8002cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cca:	0a9b      	lsrs	r3, r3, #10
 8002ccc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cde:	2208      	movs	r2, #8
 8002ce0:	409a      	lsls	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d01a      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d013      	beq.n	8002d20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0204 	bic.w	r2, r2, #4
 8002d06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	2208      	movs	r2, #8
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	f043 0201 	orr.w	r2, r3, #1
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2201      	movs	r2, #1
 8002d26:	409a      	lsls	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d012      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00b      	beq.n	8002d56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d42:	2201      	movs	r2, #1
 8002d44:	409a      	lsls	r2, r3
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d4e:	f043 0202 	orr.w	r2, r3, #2
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d012      	beq.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00b      	beq.n	8002d8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d78:	2204      	movs	r2, #4
 8002d7a:	409a      	lsls	r2, r3
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d90:	2210      	movs	r2, #16
 8002d92:	409a      	lsls	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d043      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d03c      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dae:	2210      	movs	r2, #16
 8002db0:	409a      	lsls	r2, r3
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d018      	beq.n	8002df6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d108      	bne.n	8002de4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d024      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	4798      	blx	r3
 8002de2:	e01f      	b.n	8002e24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01b      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	4798      	blx	r3
 8002df4:	e016      	b.n	8002e24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0208 	bic.w	r2, r2, #8
 8002e12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e28:	2220      	movs	r2, #32
 8002e2a:	409a      	lsls	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4013      	ands	r3, r2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 808f 	beq.w	8002f54 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0310 	and.w	r3, r3, #16
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8087 	beq.w	8002f54 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b05      	cmp	r3, #5
 8002e5c:	d136      	bne.n	8002ecc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0216 	bic.w	r2, r2, #22
 8002e6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	695a      	ldr	r2, [r3, #20]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d103      	bne.n	8002e8e <HAL_DMA_IRQHandler+0x1da>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea2:	223f      	movs	r2, #63	; 0x3f
 8002ea4:	409a      	lsls	r2, r3
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d07e      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	4798      	blx	r3
        }
        return;
 8002eca:	e079      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01d      	beq.n	8002f16 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10d      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d031      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
 8002ef8:	e02c      	b.n	8002f54 <HAL_DMA_IRQHandler+0x2a0>
 8002efa:	bf00      	nop
 8002efc:	20000010 	.word	0x20000010
 8002f00:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d023      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	4798      	blx	r3
 8002f14:	e01e      	b.n	8002f54 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10f      	bne.n	8002f44 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0210 	bic.w	r2, r2, #16
 8002f32:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d003      	beq.n	8002f54 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d032      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d022      	beq.n	8002fae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2205      	movs	r2, #5
 8002f6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0201 	bic.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	3301      	adds	r3, #1
 8002f84:	60bb      	str	r3, [r7, #8]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d307      	bcc.n	8002f9c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f2      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x2cc>
 8002f9a:	e000      	b.n	8002f9e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002f9c:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	4798      	blx	r3
 8002fbe:	e000      	b.n	8002fc2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002fc0:	bf00      	nop
    }
  }
}
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	683a      	ldr	r2, [r7, #0]
 8002fec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d108      	bne.n	8003008 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68ba      	ldr	r2, [r7, #8]
 8003004:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003006:	e007      	b.n	8003018 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	60da      	str	r2, [r3, #12]
}
 8003018:	bf00      	nop
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	3b10      	subs	r3, #16
 8003034:	4a13      	ldr	r2, [pc, #76]	; (8003084 <DMA_CalcBaseAndBitshift+0x60>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	091b      	lsrs	r3, r3, #4
 800303c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800303e:	4a12      	ldr	r2, [pc, #72]	; (8003088 <DMA_CalcBaseAndBitshift+0x64>)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	4413      	add	r3, r2
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	461a      	mov	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2b03      	cmp	r3, #3
 8003050:	d908      	bls.n	8003064 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	461a      	mov	r2, r3
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <DMA_CalcBaseAndBitshift+0x68>)
 800305a:	4013      	ands	r3, r2
 800305c:	1d1a      	adds	r2, r3, #4
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	; 0x58
 8003062:	e006      	b.n	8003072 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	461a      	mov	r2, r3
 800306a:	4b08      	ldr	r3, [pc, #32]	; (800308c <DMA_CalcBaseAndBitshift+0x68>)
 800306c:	4013      	ands	r3, r2
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	aaaaaaab 	.word	0xaaaaaaab
 8003088:	08007ac8 	.word	0x08007ac8
 800308c:	fffffc00 	.word	0xfffffc00

08003090 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003090:	b480      	push	{r7}
 8003092:	b085      	sub	sp, #20
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	699b      	ldr	r3, [r3, #24]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d11f      	bne.n	80030ea <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b03      	cmp	r3, #3
 80030ae:	d856      	bhi.n	800315e <DMA_CheckFifoParam+0xce>
 80030b0:	a201      	add	r2, pc, #4	; (adr r2, 80030b8 <DMA_CheckFifoParam+0x28>)
 80030b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b6:	bf00      	nop
 80030b8:	080030c9 	.word	0x080030c9
 80030bc:	080030db 	.word	0x080030db
 80030c0:	080030c9 	.word	0x080030c9
 80030c4:	0800315f 	.word	0x0800315f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d046      	beq.n	8003162 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030d4:	2301      	movs	r3, #1
 80030d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d8:	e043      	b.n	8003162 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030e2:	d140      	bne.n	8003166 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030e8:	e03d      	b.n	8003166 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	699b      	ldr	r3, [r3, #24]
 80030ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030f2:	d121      	bne.n	8003138 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d837      	bhi.n	800316a <DMA_CheckFifoParam+0xda>
 80030fa:	a201      	add	r2, pc, #4	; (adr r2, 8003100 <DMA_CheckFifoParam+0x70>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003111 	.word	0x08003111
 8003104:	08003117 	.word	0x08003117
 8003108:	08003111 	.word	0x08003111
 800310c:	08003129 	.word	0x08003129
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	73fb      	strb	r3, [r7, #15]
      break;
 8003114:	e030      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d025      	beq.n	800316e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003126:	e022      	b.n	800316e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003130:	d11f      	bne.n	8003172 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003136:	e01c      	b.n	8003172 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	2b02      	cmp	r3, #2
 800313c:	d903      	bls.n	8003146 <DMA_CheckFifoParam+0xb6>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d003      	beq.n	800314c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003144:	e018      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      break;
 800314a:	e015      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00e      	beq.n	8003176 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
      break;
 800315c:	e00b      	b.n	8003176 <DMA_CheckFifoParam+0xe6>
      break;
 800315e:	bf00      	nop
 8003160:	e00a      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003162:	bf00      	nop
 8003164:	e008      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003166:	bf00      	nop
 8003168:	e006      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 800316a:	bf00      	nop
 800316c:	e004      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 800316e:	bf00      	nop
 8003170:	e002      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;   
 8003172:	bf00      	nop
 8003174:	e000      	b.n	8003178 <DMA_CheckFifoParam+0xe8>
      break;
 8003176:	bf00      	nop
    }
  } 
  
  return status; 
 8003178:	7bfb      	ldrb	r3, [r7, #15]
}
 800317a:	4618      	mov	r0, r3
 800317c:	3714      	adds	r7, #20
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop

08003188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800319a:	2300      	movs	r3, #0
 800319c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800319e:	2300      	movs	r3, #0
 80031a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031a2:	2300      	movs	r3, #0
 80031a4:	61fb      	str	r3, [r7, #28]
 80031a6:	e175      	b.n	8003494 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031a8:	2201      	movs	r2, #1
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	fa02 f303 	lsl.w	r3, r2, r3
 80031b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031bc:	693a      	ldr	r2, [r7, #16]
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	f040 8164 	bne.w	800348e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d00b      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031da:	2b11      	cmp	r3, #17
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b12      	cmp	r3, #18
 80031e4:	d130      	bne.n	8003248 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800324e:	69fb      	ldr	r3, [r7, #28]
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	2203      	movs	r2, #3
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	fa02 f303 	lsl.w	r3, r2, r3
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	4313      	orrs	r3, r2
 8003270:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	69ba      	ldr	r2, [r7, #24]
 8003276:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d003      	beq.n	8003288 <HAL_GPIO_Init+0x100>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b12      	cmp	r3, #18
 8003286:	d123      	bne.n	80032d0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	08da      	lsrs	r2, r3, #3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3208      	adds	r2, #8
 8003290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003294:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	220f      	movs	r2, #15
 80032a0:	fa02 f303 	lsl.w	r3, r2, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4013      	ands	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	691a      	ldr	r2, [r3, #16]
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	08da      	lsrs	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	3208      	adds	r2, #8
 80032ca:	69b9      	ldr	r1, [r7, #24]
 80032cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	69ba      	ldr	r2, [r7, #24]
 80032e4:	4013      	ands	r3, r2
 80032e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 0203 	and.w	r2, r3, #3
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	005b      	lsls	r3, r3, #1
 80032f4:	fa02 f303 	lsl.w	r3, r2, r3
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	f000 80be 	beq.w	800348e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003312:	4b66      	ldr	r3, [pc, #408]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003316:	4a65      	ldr	r2, [pc, #404]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003318:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331c:	6453      	str	r3, [r2, #68]	; 0x44
 800331e:	4b63      	ldr	r3, [pc, #396]	; (80034ac <HAL_GPIO_Init+0x324>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800332a:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_GPIO_Init+0x328>)
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	089b      	lsrs	r3, r3, #2
 8003330:	3302      	adds	r3, #2
 8003332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003336:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	f003 0303 	and.w	r3, r3, #3
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	220f      	movs	r2, #15
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_GPIO_Init+0x32c>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d037      	beq.n	80033c6 <HAL_GPIO_Init+0x23e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a57      	ldr	r2, [pc, #348]	; (80034b8 <HAL_GPIO_Init+0x330>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d031      	beq.n	80033c2 <HAL_GPIO_Init+0x23a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a56      	ldr	r2, [pc, #344]	; (80034bc <HAL_GPIO_Init+0x334>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x236>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a55      	ldr	r2, [pc, #340]	; (80034c0 <HAL_GPIO_Init+0x338>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x232>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a54      	ldr	r2, [pc, #336]	; (80034c4 <HAL_GPIO_Init+0x33c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x22e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a53      	ldr	r2, [pc, #332]	; (80034c8 <HAL_GPIO_Init+0x340>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x22a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a52      	ldr	r2, [pc, #328]	; (80034cc <HAL_GPIO_Init+0x344>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x226>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a51      	ldr	r2, [pc, #324]	; (80034d0 <HAL_GPIO_Init+0x348>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x222>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a50      	ldr	r2, [pc, #320]	; (80034d4 <HAL_GPIO_Init+0x34c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x21e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4f      	ldr	r2, [pc, #316]	; (80034d8 <HAL_GPIO_Init+0x350>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x21a>
 800339e:	2309      	movs	r3, #9
 80033a0:	e012      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a2:	230a      	movs	r3, #10
 80033a4:	e010      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033a6:	2308      	movs	r3, #8
 80033a8:	e00e      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033aa:	2307      	movs	r3, #7
 80033ac:	e00c      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ae:	2306      	movs	r3, #6
 80033b0:	e00a      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b2:	2305      	movs	r3, #5
 80033b4:	e008      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033b6:	2304      	movs	r3, #4
 80033b8:	e006      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033ba:	2303      	movs	r3, #3
 80033bc:	e004      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033be:	2302      	movs	r3, #2
 80033c0:	e002      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <HAL_GPIO_Init+0x240>
 80033c6:	2300      	movs	r3, #0
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	f002 0203 	and.w	r2, r2, #3
 80033ce:	0092      	lsls	r2, r2, #2
 80033d0:	4093      	lsls	r3, r2
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80033d8:	4935      	ldr	r1, [pc, #212]	; (80034b0 <HAL_GPIO_Init+0x328>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	089b      	lsrs	r3, r3, #2
 80033de:	3302      	adds	r3, #2
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033e6:	4b3d      	ldr	r3, [pc, #244]	; (80034dc <HAL_GPIO_Init+0x354>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800340a:	4a34      	ldr	r2, [pc, #208]	; (80034dc <HAL_GPIO_Init+0x354>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003410:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003434:	4a29      	ldr	r2, [pc, #164]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800343a:	4b28      	ldr	r3, [pc, #160]	; (80034dc <HAL_GPIO_Init+0x354>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4313      	orrs	r3, r2
 800345c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800345e:	4a1f      	ldr	r2, [pc, #124]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003464:	4b1d      	ldr	r3, [pc, #116]	; (80034dc <HAL_GPIO_Init+0x354>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	43db      	mvns	r3, r3
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	4013      	ands	r3, r2
 8003472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d003      	beq.n	8003488 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003488:	4a14      	ldr	r2, [pc, #80]	; (80034dc <HAL_GPIO_Init+0x354>)
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3301      	adds	r3, #1
 8003492:	61fb      	str	r3, [r7, #28]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	2b0f      	cmp	r3, #15
 8003498:	f67f ae86 	bls.w	80031a8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	3724      	adds	r7, #36	; 0x24
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
 80034b0:	40013800 	.word	0x40013800
 80034b4:	40020000 	.word	0x40020000
 80034b8:	40020400 	.word	0x40020400
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40020c00 	.word	0x40020c00
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40021400 	.word	0x40021400
 80034cc:	40021800 	.word	0x40021800
 80034d0:	40021c00 	.word	0x40021c00
 80034d4:	40022000 	.word	0x40022000
 80034d8:	40022400 	.word	0x40022400
 80034dc:	40013c00 	.word	0x40013c00

080034e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034e0:	b480      	push	{r7}
 80034e2:	b083      	sub	sp, #12
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	460b      	mov	r3, r1
 80034ea:	807b      	strh	r3, [r7, #2]
 80034ec:	4613      	mov	r3, r2
 80034ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034f0:	787b      	ldrb	r3, [r7, #1]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034f6:	887a      	ldrh	r2, [r7, #2]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80034fc:	e003      	b.n	8003506 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80034fe:	887b      	ldrh	r3, [r7, #2]
 8003500:	041a      	lsls	r2, r3, #16
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	619a      	str	r2, [r3, #24]
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07f      	b.n	8003626 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fe f886 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0201 	bic.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003564:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003574:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	e006      	b.n	800359c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689a      	ldr	r2, [r3, #8]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800359a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d104      	bne.n	80035ae <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035ac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681a      	ldr	r2, [r3, #0]
 80035b8:	4b1d      	ldr	r3, [pc, #116]	; (8003630 <HAL_I2C_Init+0x11c>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691a      	ldr	r2, [r3, #16]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	ea42 0103 	orr.w	r1, r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	021a      	lsls	r2, r3, #8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69d9      	ldr	r1, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1a      	ldr	r2, [r3, #32]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f042 0201 	orr.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2220      	movs	r2, #32
 8003612:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3708      	adds	r7, #8
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	02008000 	.word	0x02008000

08003634 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b20      	cmp	r3, #32
 8003648:	d138      	bne.n	80036bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003650:	2b01      	cmp	r3, #1
 8003652:	d101      	bne.n	8003658 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003654:	2302      	movs	r3, #2
 8003656:	e032      	b.n	80036be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	; 0x24
 8003664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003686:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2220      	movs	r2, #32
 80036ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	e000      	b.n	80036be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80036bc:	2302      	movs	r3, #2
  }
}
 80036be:	4618      	mov	r0, r3
 80036c0:	370c      	adds	r7, #12
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b085      	sub	sp, #20
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	d139      	bne.n	8003754 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e033      	b.n	8003756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2224      	movs	r2, #36	; 0x24
 80036fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f022 0201 	bic.w	r2, r2, #1
 800370c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800371c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	021b      	lsls	r3, r3, #8
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	4313      	orrs	r3, r2
 8003726:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f042 0201 	orr.w	r2, r2, #1
 800373e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3714      	adds	r7, #20
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	4a22      	ldr	r2, [pc, #136]	; (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6413      	str	r3, [r2, #64]	; 0x40
 800377a:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_PWREx_EnableOverDrive+0x98>)
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003782:	603b      	str	r3, [r7, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a1d      	ldr	r2, [pc, #116]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003792:	f7fe f947 	bl	8001a24 <HAL_GetTick>
 8003796:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003798:	e009      	b.n	80037ae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800379a:	f7fe f943 	bl	8001a24 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037a8:	d901      	bls.n	80037ae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e022      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ba:	d1ee      	bne.n	800379a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a0f      	ldr	r2, [pc, #60]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80037c8:	f7fe f92c 	bl	8001a24 <HAL_GetTick>
 80037cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037ce:	e009      	b.n	80037e4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80037d0:	f7fe f928 	bl	8001a24 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037de:	d901      	bls.n	80037e4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e007      	b.n	80037f4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_PWREx_EnableOverDrive+0x9c>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037f0:	d1ee      	bne.n	80037d0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	40023800 	.word	0x40023800
 8003800:	40007000 	.word	0x40007000

08003804 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	e291      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 8087 	beq.w	8003936 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003828:	4b96      	ldr	r3, [pc, #600]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 030c 	and.w	r3, r3, #12
 8003830:	2b04      	cmp	r3, #4
 8003832:	d00c      	beq.n	800384e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003834:	4b93      	ldr	r3, [pc, #588]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f003 030c 	and.w	r3, r3, #12
 800383c:	2b08      	cmp	r3, #8
 800383e:	d112      	bne.n	8003866 <HAL_RCC_OscConfig+0x62>
 8003840:	4b90      	ldr	r3, [pc, #576]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800384c:	d10b      	bne.n	8003866 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800384e:	4b8d      	ldr	r3, [pc, #564]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d06c      	beq.n	8003934 <HAL_RCC_OscConfig+0x130>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d168      	bne.n	8003934 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e26b      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800386e:	d106      	bne.n	800387e <HAL_RCC_OscConfig+0x7a>
 8003870:	4b84      	ldr	r3, [pc, #528]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a83      	ldr	r2, [pc, #524]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800387a:	6013      	str	r3, [r2, #0]
 800387c:	e02e      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10c      	bne.n	80038a0 <HAL_RCC_OscConfig+0x9c>
 8003886:	4b7f      	ldr	r3, [pc, #508]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a7e      	ldr	r2, [pc, #504]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800388c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003890:	6013      	str	r3, [r2, #0]
 8003892:	4b7c      	ldr	r3, [pc, #496]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a7b      	ldr	r2, [pc, #492]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003898:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800389c:	6013      	str	r3, [r2, #0]
 800389e:	e01d      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038a8:	d10c      	bne.n	80038c4 <HAL_RCC_OscConfig+0xc0>
 80038aa:	4b76      	ldr	r3, [pc, #472]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a75      	ldr	r2, [pc, #468]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b73      	ldr	r3, [pc, #460]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a72      	ldr	r2, [pc, #456]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	e00b      	b.n	80038dc <HAL_RCC_OscConfig+0xd8>
 80038c4:	4b6f      	ldr	r3, [pc, #444]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a6e      	ldr	r2, [pc, #440]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ce:	6013      	str	r3, [r2, #0]
 80038d0:	4b6c      	ldr	r3, [pc, #432]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a6b      	ldr	r2, [pc, #428]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80038d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d013      	beq.n	800390c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e4:	f7fe f89e 	bl	8001a24 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038ec:	f7fe f89a 	bl	8001a24 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b64      	cmp	r3, #100	; 0x64
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e21f      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0xe8>
 800390a:	e014      	b.n	8003936 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fe f88a 	bl	8001a24 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003914:	f7fe f886 	bl	8001a24 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b64      	cmp	r3, #100	; 0x64
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e20b      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003926:	4b57      	ldr	r3, [pc, #348]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f0      	bne.n	8003914 <HAL_RCC_OscConfig+0x110>
 8003932:	e000      	b.n	8003936 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003934:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d069      	beq.n	8003a16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003942:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f003 030c 	and.w	r3, r3, #12
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800394e:	4b4d      	ldr	r3, [pc, #308]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 030c 	and.w	r3, r3, #12
 8003956:	2b08      	cmp	r3, #8
 8003958:	d11c      	bne.n	8003994 <HAL_RCC_OscConfig+0x190>
 800395a:	4b4a      	ldr	r3, [pc, #296]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d116      	bne.n	8003994 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003966:	4b47      	ldr	r3, [pc, #284]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <HAL_RCC_OscConfig+0x17a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d001      	beq.n	800397e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e1df      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	691b      	ldr	r3, [r3, #16]
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	493d      	ldr	r1, [pc, #244]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003992:	e040      	b.n	8003a16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d023      	beq.n	80039e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800399c:	4b39      	ldr	r3, [pc, #228]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a38      	ldr	r2, [pc, #224]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039a2:	f043 0301 	orr.w	r3, r3, #1
 80039a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a8:	f7fe f83c 	bl	8001a24 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039b0:	f7fe f838 	bl	8001a24 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e1bd      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c2:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	00db      	lsls	r3, r3, #3
 80039dc:	4929      	ldr	r1, [pc, #164]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]
 80039e2:	e018      	b.n	8003a16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e4:	4b27      	ldr	r3, [pc, #156]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a26      	ldr	r2, [pc, #152]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 80039ea:	f023 0301 	bic.w	r3, r3, #1
 80039ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f0:	f7fe f818 	bl	8001a24 <HAL_GetTick>
 80039f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f6:	e008      	b.n	8003a0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f8:	f7fe f814 	bl	8001a24 <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d901      	bls.n	8003a0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003a06:	2303      	movs	r3, #3
 8003a08:	e199      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1f0      	bne.n	80039f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d038      	beq.n	8003a94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d019      	beq.n	8003a5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a2a:	4b16      	ldr	r3, [pc, #88]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a2e:	4a15      	ldr	r2, [pc, #84]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a36:	f7fd fff5 	bl	8001a24 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a3c:	e008      	b.n	8003a50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a3e:	f7fd fff1 	bl	8001a24 <HAL_GetTick>
 8003a42:	4602      	mov	r2, r0
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	1ad3      	subs	r3, r2, r3
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d901      	bls.n	8003a50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a4c:	2303      	movs	r3, #3
 8003a4e:	e176      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a50:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d0f0      	beq.n	8003a3e <HAL_RCC_OscConfig+0x23a>
 8003a5c:	e01a      	b.n	8003a94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a62:	4a08      	ldr	r2, [pc, #32]	; (8003a84 <HAL_RCC_OscConfig+0x280>)
 8003a64:	f023 0301 	bic.w	r3, r3, #1
 8003a68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6a:	f7fd ffdb 	bl	8001a24 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	e00a      	b.n	8003a88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a72:	f7fd ffd7 	bl	8001a24 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d903      	bls.n	8003a88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e15c      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
 8003a84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a88:	4b91      	ldr	r3, [pc, #580]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003a8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1ee      	bne.n	8003a72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a4 	beq.w	8003bea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b8b      	ldr	r3, [pc, #556]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10d      	bne.n	8003aca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	4a87      	ldr	r2, [pc, #540]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aba:	4b85      	ldr	r3, [pc, #532]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aca:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003ad6:	4b7f      	ldr	r3, [pc, #508]	; (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a7e      	ldr	r2, [pc, #504]	; (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fd ff9f 	bl	8001a24 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fd ff9b 	bl	8001a24 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b64      	cmp	r3, #100	; 0x64
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e120      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afc:	4b75      	ldr	r3, [pc, #468]	; (8003cd4 <HAL_RCC_OscConfig+0x4d0>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x31a>
 8003b10:	4b6f      	ldr	r3, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1c:	e02d      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x33c>
 8003b26:	4b6a      	ldr	r3, [pc, #424]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	4a69      	ldr	r2, [pc, #420]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b2c:	f023 0301 	bic.w	r3, r3, #1
 8003b30:	6713      	str	r3, [r2, #112]	; 0x70
 8003b32:	4b67      	ldr	r3, [pc, #412]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b36:	4a66      	ldr	r2, [pc, #408]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b38:	f023 0304 	bic.w	r3, r3, #4
 8003b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3e:	e01c      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	2b05      	cmp	r3, #5
 8003b46:	d10c      	bne.n	8003b62 <HAL_RCC_OscConfig+0x35e>
 8003b48:	4b61      	ldr	r3, [pc, #388]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a60      	ldr	r2, [pc, #384]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b4e:	f043 0304 	orr.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
 8003b54:	4b5e      	ldr	r3, [pc, #376]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b58:	4a5d      	ldr	r2, [pc, #372]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b5a:	f043 0301 	orr.w	r3, r3, #1
 8003b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b60:	e00b      	b.n	8003b7a <HAL_RCC_OscConfig+0x376>
 8003b62:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b66:	4a5a      	ldr	r2, [pc, #360]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b68:	f023 0301 	bic.w	r3, r3, #1
 8003b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b6e:	4b58      	ldr	r3, [pc, #352]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b72:	4a57      	ldr	r2, [pc, #348]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003b74:	f023 0304 	bic.w	r3, r3, #4
 8003b78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d015      	beq.n	8003bae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b82:	f7fd ff4f 	bl	8001a24 <HAL_GetTick>
 8003b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b88:	e00a      	b.n	8003ba0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8a:	f7fd ff4b 	bl	8001a24 <HAL_GetTick>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e0ce      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ba0:	4b4b      	ldr	r3, [pc, #300]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ee      	beq.n	8003b8a <HAL_RCC_OscConfig+0x386>
 8003bac:	e014      	b.n	8003bd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fd ff39 	bl	8001a24 <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd ff35 	bl	8001a24 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e0b8      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bcc:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1ee      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bd8:	7dfb      	ldrb	r3, [r7, #23]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d105      	bne.n	8003bea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bde:	4b3c      	ldr	r3, [pc, #240]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	4a3b      	ldr	r2, [pc, #236]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003be4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003be8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a4 	beq.w	8003d3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf4:	4b36      	ldr	r3, [pc, #216]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d06b      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d149      	bne.n	8003c9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c08:	4b31      	ldr	r3, [pc, #196]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a30      	ldr	r2, [pc, #192]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c14:	f7fd ff06 	bl	8001a24 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c1c:	f7fd ff02 	bl	8001a24 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b02      	cmp	r3, #2
 8003c28:	d901      	bls.n	8003c2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e087      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c2e:	4b28      	ldr	r3, [pc, #160]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	69da      	ldr	r2, [r3, #28]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	019b      	lsls	r3, r3, #6
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c50:	085b      	lsrs	r3, r3, #1
 8003c52:	3b01      	subs	r3, #1
 8003c54:	041b      	lsls	r3, r3, #16
 8003c56:	431a      	orrs	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	061b      	lsls	r3, r3, #24
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	4a1b      	ldr	r2, [pc, #108]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a18      	ldr	r2, [pc, #96]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c74:	f7fd fed6 	bl	8001a24 <HAL_GetTick>
 8003c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	e008      	b.n	8003c8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7c:	f7fd fed2 	bl	8001a24 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e057      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d0f0      	beq.n	8003c7c <HAL_RCC_OscConfig+0x478>
 8003c9a:	e04f      	b.n	8003d3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a0b      	ldr	r2, [pc, #44]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003ca2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca8:	f7fd febc 	bl	8001a24 <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cb0:	f7fd feb8 	bl	8001a24 <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e03d      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cc2:	4b03      	ldr	r3, [pc, #12]	; (8003cd0 <HAL_RCC_OscConfig+0x4cc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x4ac>
 8003cce:	e035      	b.n	8003d3c <HAL_RCC_OscConfig+0x538>
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_RCC_OscConfig+0x544>)
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d028      	beq.n	8003d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d121      	bne.n	8003d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d11a      	bne.n	8003d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003d08:	4013      	ands	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d111      	bne.n	8003d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1e:	085b      	lsrs	r3, r3, #1
 8003d20:	3b01      	subs	r3, #1
 8003d22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40023800 	.word	0x40023800

08003d4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0d0      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d64:	4b6a      	ldr	r3, [pc, #424]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d910      	bls.n	8003d94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d72:	4b67      	ldr	r3, [pc, #412]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f023 020f 	bic.w	r2, r3, #15
 8003d7a:	4965      	ldr	r1, [pc, #404]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d82:	4b63      	ldr	r3, [pc, #396]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d001      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e0b8      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0302 	and.w	r3, r3, #2
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d020      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0304 	and.w	r3, r3, #4
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dac:	4b59      	ldr	r3, [pc, #356]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4a58      	ldr	r2, [pc, #352]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003db2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003db6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0308 	and.w	r3, r3, #8
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d005      	beq.n	8003dd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003dc4:	4b53      	ldr	r3, [pc, #332]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	4a52      	ldr	r2, [pc, #328]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003dce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dd0:	4b50      	ldr	r3, [pc, #320]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	494d      	ldr	r1, [pc, #308]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d040      	beq.n	8003e70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d107      	bne.n	8003e06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003df6:	4b47      	ldr	r3, [pc, #284]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d115      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e07f      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d107      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0e:	4b41      	ldr	r3, [pc, #260]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d109      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e073      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e1e:	4b3d      	ldr	r3, [pc, #244]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e06b      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e2e:	4b39      	ldr	r3, [pc, #228]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f023 0203 	bic.w	r2, r3, #3
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	4936      	ldr	r1, [pc, #216]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e40:	f7fd fdf0 	bl	8001a24 <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e46:	e00a      	b.n	8003e5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e48:	f7fd fdec 	bl	8001a24 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e053      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e5e:	4b2d      	ldr	r3, [pc, #180]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	f003 020c 	and.w	r2, r3, #12
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d1eb      	bne.n	8003e48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e70:	4b27      	ldr	r3, [pc, #156]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d210      	bcs.n	8003ea0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7e:	4b24      	ldr	r3, [pc, #144]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f023 020f 	bic.w	r2, r3, #15
 8003e86:	4922      	ldr	r1, [pc, #136]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8e:	4b20      	ldr	r3, [pc, #128]	; (8003f10 <HAL_RCC_ClockConfig+0x1c4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 030f 	and.w	r3, r3, #15
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e032      	b.n	8003f06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0304 	and.w	r3, r3, #4
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003eac:	4b19      	ldr	r3, [pc, #100]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	4916      	ldr	r1, [pc, #88]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d009      	beq.n	8003ede <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003eca:	4b12      	ldr	r3, [pc, #72]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	691b      	ldr	r3, [r3, #16]
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	490e      	ldr	r1, [pc, #56]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ede:	f000 f821 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_RCC_ClockConfig+0x1c8>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	490a      	ldr	r1, [pc, #40]	; (8003f18 <HAL_RCC_ClockConfig+0x1cc>)
 8003ef0:	5ccb      	ldrb	r3, [r1, r3]
 8003ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ef6:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <HAL_RCC_ClockConfig+0x1d0>)
 8003ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003efa:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_ClockConfig+0x1d4>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fd fc4a 	bl	8001798 <HAL_InitTick>

  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	40023c00 	.word	0x40023c00
 8003f14:	40023800 	.word	0x40023800
 8003f18:	08007ab0 	.word	0x08007ab0
 8003f1c:	20000010 	.word	0x20000010
 8003f20:	20000014 	.word	0x20000014

08003f24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f28:	b090      	sub	sp, #64	; 0x40
 8003f2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8003f30:	2300      	movs	r3, #0
 8003f32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f34:	2300      	movs	r3, #0
 8003f36:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3c:	4b59      	ldr	r3, [pc, #356]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f003 030c 	and.w	r3, r3, #12
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x40>
 8003f48:	2b08      	cmp	r3, #8
 8003f4a:	f200 80a1 	bhi.w	8004090 <HAL_RCC_GetSysClockFreq+0x16c>
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_RCC_GetSysClockFreq+0x34>
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	d003      	beq.n	8003f5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003f56:	e09b      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f58:	4b53      	ldr	r3, [pc, #332]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003f5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f5c:	e09b      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f5e:	4b53      	ldr	r3, [pc, #332]	; (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f60:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003f62:	e098      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f64:	4b4f      	ldr	r3, [pc, #316]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003f6e:	4b4d      	ldr	r3, [pc, #308]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d028      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f7a:	4b4a      	ldr	r3, [pc, #296]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	099b      	lsrs	r3, r3, #6
 8003f80:	2200      	movs	r2, #0
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	627a      	str	r2, [r7, #36]	; 0x24
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003f8c:	2100      	movs	r1, #0
 8003f8e:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f90:	fb03 f201 	mul.w	r2, r3, r1
 8003f94:	2300      	movs	r3, #0
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	4a43      	ldr	r2, [pc, #268]	; (80040ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003f9e:	fba0 1202 	umull	r1, r2, r0, r2
 8003fa2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa4:	460a      	mov	r2, r1
 8003fa6:	62ba      	str	r2, [r7, #40]	; 0x28
 8003fa8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003faa:	4413      	add	r3, r2
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
 8003fb4:	61fa      	str	r2, [r7, #28]
 8003fb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003fbe:	f7fc f97f 	bl	80002c0 <__aeabi_uldivmod>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fca:	e053      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fcc:	4b35      	ldr	r3, [pc, #212]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	613b      	str	r3, [r7, #16]
 8003fd6:	617a      	str	r2, [r7, #20]
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003fde:	f04f 0b00 	mov.w	fp, #0
 8003fe2:	4652      	mov	r2, sl
 8003fe4:	465b      	mov	r3, fp
 8003fe6:	f04f 0000 	mov.w	r0, #0
 8003fea:	f04f 0100 	mov.w	r1, #0
 8003fee:	0159      	lsls	r1, r3, #5
 8003ff0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ff4:	0150      	lsls	r0, r2, #5
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	ebb2 080a 	subs.w	r8, r2, sl
 8003ffe:	eb63 090b 	sbc.w	r9, r3, fp
 8004002:	f04f 0200 	mov.w	r2, #0
 8004006:	f04f 0300 	mov.w	r3, #0
 800400a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800400e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004012:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004016:	ebb2 0408 	subs.w	r4, r2, r8
 800401a:	eb63 0509 	sbc.w	r5, r3, r9
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	00eb      	lsls	r3, r5, #3
 8004028:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800402c:	00e2      	lsls	r2, r4, #3
 800402e:	4614      	mov	r4, r2
 8004030:	461d      	mov	r5, r3
 8004032:	eb14 030a 	adds.w	r3, r4, sl
 8004036:	603b      	str	r3, [r7, #0]
 8004038:	eb45 030b 	adc.w	r3, r5, fp
 800403c:	607b      	str	r3, [r7, #4]
 800403e:	f04f 0200 	mov.w	r2, #0
 8004042:	f04f 0300 	mov.w	r3, #0
 8004046:	e9d7 4500 	ldrd	r4, r5, [r7]
 800404a:	4629      	mov	r1, r5
 800404c:	028b      	lsls	r3, r1, #10
 800404e:	4621      	mov	r1, r4
 8004050:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004054:	4621      	mov	r1, r4
 8004056:	028a      	lsls	r2, r1, #10
 8004058:	4610      	mov	r0, r2
 800405a:	4619      	mov	r1, r3
 800405c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405e:	2200      	movs	r2, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004068:	f7fc f92a 	bl	80002c0 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004092:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004098:	4618      	mov	r0, r3
 800409a:	3740      	adds	r7, #64	; 0x40
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	016e3600 	.word	0x016e3600

080040b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040b0:	b480      	push	{r7}
 80040b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80040b6:	681b      	ldr	r3, [r3, #0]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	46bd      	mov	sp, r7
 80040bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	20000010 	.word	0x20000010

080040c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80040cc:	f7ff fff0 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040d0:	4602      	mov	r2, r0
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	0a9b      	lsrs	r3, r3, #10
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	4903      	ldr	r1, [pc, #12]	; (80040ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80040de:	5ccb      	ldrb	r3, [r1, r3]
 80040e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40023800 	.word	0x40023800
 80040ec:	08007ac0 	.word	0x08007ac0

080040f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040f4:	f7ff ffdc 	bl	80040b0 <HAL_RCC_GetHCLKFreq>
 80040f8:	4602      	mov	r2, r0
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	0b5b      	lsrs	r3, r3, #13
 8004100:	f003 0307 	and.w	r3, r3, #7
 8004104:	4903      	ldr	r1, [pc, #12]	; (8004114 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004106:	5ccb      	ldrb	r3, [r1, r3]
 8004108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	bd80      	pop	{r7, pc}
 8004110:	40023800 	.word	0x40023800
 8004114:	08007ac0 	.word	0x08007ac0

08004118 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	220f      	movs	r2, #15
 8004126:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004128:	4b12      	ldr	r3, [pc, #72]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 0203 	and.w	r2, r3, #3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004134:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004140:	4b0c      	ldr	r3, [pc, #48]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800414c:	4b09      	ldr	r3, [pc, #36]	; (8004174 <HAL_RCC_GetClockConfig+0x5c>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_RCC_GetClockConfig+0x60>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	601a      	str	r2, [r3, #0]
}
 8004166:	bf00      	nop
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop
 8004174:	40023800 	.word	0x40023800
 8004178:	40023c00 	.word	0x40023c00

0800417c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b088      	sub	sp, #32
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004188:	2300      	movs	r3, #0
 800418a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004190:	2300      	movs	r3, #0
 8004192:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f003 0301 	and.w	r3, r3, #1
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d012      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80041a4:	4b69      	ldr	r3, [pc, #420]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	4a68      	ldr	r2, [pc, #416]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ae:	6093      	str	r3, [r2, #8]
 80041b0:	4b66      	ldr	r3, [pc, #408]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b8:	4964      	ldr	r1, [pc, #400]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80041c6:	2301      	movs	r3, #1
 80041c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d017      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80041d6:	4b5d      	ldr	r3, [pc, #372]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	4959      	ldr	r1, [pc, #356]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041f4:	d101      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004202:	2301      	movs	r3, #1
 8004204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d017      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004212:	4b4e      	ldr	r3, [pc, #312]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	494a      	ldr	r1, [pc, #296]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004230:	d101      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800423e:	2301      	movs	r3, #1
 8004240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800424e:	2301      	movs	r3, #1
 8004250:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0320 	and.w	r3, r3, #32
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 808b 	beq.w	8004376 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004260:	4b3a      	ldr	r3, [pc, #232]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	4a39      	ldr	r2, [pc, #228]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426a:	6413      	str	r3, [r2, #64]	; 0x40
 800426c:	4b37      	ldr	r3, [pc, #220]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004274:	60bb      	str	r3, [r7, #8]
 8004276:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a34      	ldr	r2, [pc, #208]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800427e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004284:	f7fd fbce 	bl	8001a24 <HAL_GetTick>
 8004288:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800428a:	e008      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800428c:	f7fd fbca 	bl	8001a24 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b64      	cmp	r3, #100	; 0x64
 8004298:	d901      	bls.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e357      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800429e:	4b2c      	ldr	r3, [pc, #176]	; (8004350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0f0      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80042aa:	4b28      	ldr	r3, [pc, #160]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d035      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d02e      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042c8:	4b20      	ldr	r3, [pc, #128]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042d2:	4b1e      	ldr	r3, [pc, #120]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042d6:	4a1d      	ldr	r2, [pc, #116]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042de:	4b1b      	ldr	r3, [pc, #108]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80042f0:	4b16      	ldr	r3, [pc, #88]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	f003 0301 	and.w	r3, r3, #1
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d114      	bne.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7fd fb92 	bl	8001a24 <HAL_GetTick>
 8004300:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	e00a      	b.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fd fb8e 	bl	8001a24 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e319      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	4b0c      	ldr	r3, [pc, #48]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ee      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004332:	d111      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004334:	4b05      	ldr	r3, [pc, #20]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004342:	400b      	ands	r3, r1
 8004344:	4901      	ldr	r1, [pc, #4]	; (800434c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
 800434a:	e00b      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800434c:	40023800 	.word	0x40023800
 8004350:	40007000 	.word	0x40007000
 8004354:	0ffffcff 	.word	0x0ffffcff
 8004358:	4baa      	ldr	r3, [pc, #680]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	4aa9      	ldr	r2, [pc, #676]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800435e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004362:	6093      	str	r3, [r2, #8]
 8004364:	4ba7      	ldr	r3, [pc, #668]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004370:	49a4      	ldr	r1, [pc, #656]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004372:	4313      	orrs	r3, r2
 8004374:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 0310 	and.w	r3, r3, #16
 800437e:	2b00      	cmp	r3, #0
 8004380:	d010      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004382:	4ba0      	ldr	r3, [pc, #640]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004388:	4a9e      	ldr	r2, [pc, #632]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800438a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800438e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004392:	4b9c      	ldr	r3, [pc, #624]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004394:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	4999      	ldr	r1, [pc, #612]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d00a      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043b0:	4b94      	ldr	r3, [pc, #592]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043be:	4991      	ldr	r1, [pc, #580]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043d2:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043e0:	4988      	ldr	r1, [pc, #544]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00a      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80043f4:	4b83      	ldr	r3, [pc, #524]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80043f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004402:	4980      	ldr	r1, [pc, #512]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00a      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004416:	4b7b      	ldr	r3, [pc, #492]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4977      	ldr	r1, [pc, #476]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004438:	4b72      	ldr	r3, [pc, #456]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800443a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443e:	f023 0203 	bic.w	r2, r3, #3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	496f      	ldr	r1, [pc, #444]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004448:	4313      	orrs	r3, r2
 800444a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004460:	f023 020c 	bic.w	r2, r3, #12
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004468:	4966      	ldr	r1, [pc, #408]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800446a:	4313      	orrs	r3, r2
 800446c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00a      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800448a:	495e      	ldr	r1, [pc, #376]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800448c:	4313      	orrs	r3, r2
 800448e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800449e:	4b59      	ldr	r3, [pc, #356]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ac:	4955      	ldr	r1, [pc, #340]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00a      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80044c0:	4b50      	ldr	r3, [pc, #320]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ce:	494d      	ldr	r1, [pc, #308]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00a      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80044e2:	4b48      	ldr	r3, [pc, #288]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	4944      	ldr	r1, [pc, #272]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00a      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004504:	4b3f      	ldr	r3, [pc, #252]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	493c      	ldr	r1, [pc, #240]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004514:	4313      	orrs	r3, r2
 8004516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004522:	2b00      	cmp	r3, #0
 8004524:	d00a      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004526:	4b37      	ldr	r3, [pc, #220]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004534:	4933      	ldr	r1, [pc, #204]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004536:	4313      	orrs	r3, r2
 8004538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00a      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004548:	4b2e      	ldr	r3, [pc, #184]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800454a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800454e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004556:	492b      	ldr	r1, [pc, #172]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d011      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800456a:	4b26      	ldr	r3, [pc, #152]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800456c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004570:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004578:	4922      	ldr	r1, [pc, #136]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800457a:	4313      	orrs	r3, r2
 800457c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004588:	d101      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800458a:	2301      	movs	r3, #1
 800458c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0308 	and.w	r3, r3, #8
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800459a:	2301      	movs	r3, #1
 800459c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00a      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80045aa:	4b16      	ldr	r3, [pc, #88]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045b8:	4912      	ldr	r1, [pc, #72]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80045cc:	4b0d      	ldr	r3, [pc, #52]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045dc:	4909      	ldr	r1, [pc, #36]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d006      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	f000 80d9 	beq.w	80047aa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a01      	ldr	r2, [pc, #4]	; (8004604 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80045fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004602:	e001      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004604:	40023800 	.word	0x40023800
 8004608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460a:	f7fd fa0b 	bl	8001a24 <HAL_GetTick>
 800460e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004610:	e008      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004612:	f7fd fa07 	bl	8001a24 <HAL_GetTick>
 8004616:	4602      	mov	r2, r0
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	1ad3      	subs	r3, r2, r3
 800461c:	2b64      	cmp	r3, #100	; 0x64
 800461e:	d901      	bls.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004620:	2303      	movs	r3, #3
 8004622:	e194      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004624:	4b6c      	ldr	r3, [pc, #432]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f0      	bne.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d021      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004640:	2b00      	cmp	r3, #0
 8004642:	d11d      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004644:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004646:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800464a:	0c1b      	lsrs	r3, r3, #16
 800464c:	f003 0303 	and.w	r3, r3, #3
 8004650:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004652:	4b61      	ldr	r3, [pc, #388]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004654:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004658:	0e1b      	lsrs	r3, r3, #24
 800465a:	f003 030f 	and.w	r3, r3, #15
 800465e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	019a      	lsls	r2, r3, #6
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	041b      	lsls	r3, r3, #16
 800466a:	431a      	orrs	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	061b      	lsls	r3, r3, #24
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	071b      	lsls	r3, r3, #28
 8004678:	4957      	ldr	r1, [pc, #348]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d004      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d00a      	beq.n	80046ac <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d02e      	beq.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046aa:	d129      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80046ac:	4b4a      	ldr	r3, [pc, #296]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b2:	0c1b      	lsrs	r3, r3, #16
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80046ba:	4b47      	ldr	r3, [pc, #284]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046c0:	0f1b      	lsrs	r3, r3, #28
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	019a      	lsls	r2, r3, #6
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	061b      	lsls	r3, r3, #24
 80046da:	431a      	orrs	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	071b      	lsls	r3, r3, #28
 80046e0:	493d      	ldr	r1, [pc, #244]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046e2:	4313      	orrs	r3, r2
 80046e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80046e8:	4b3b      	ldr	r3, [pc, #236]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f023 021f 	bic.w	r2, r3, #31
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	3b01      	subs	r3, #1
 80046f8:	4937      	ldr	r1, [pc, #220]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d01d      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800470c:	4b32      	ldr	r3, [pc, #200]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800470e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004712:	0e1b      	lsrs	r3, r3, #24
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800471a:	4b2f      	ldr	r3, [pc, #188]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800471c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004720:	0f1b      	lsrs	r3, r3, #28
 8004722:	f003 0307 	and.w	r3, r3, #7
 8004726:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	019a      	lsls	r2, r3, #6
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	431a      	orrs	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	061b      	lsls	r3, r3, #24
 800473a:	431a      	orrs	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	071b      	lsls	r3, r3, #28
 8004740:	4925      	ldr	r1, [pc, #148]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d011      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	019a      	lsls	r2, r3, #6
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	041b      	lsls	r3, r3, #16
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	68db      	ldr	r3, [r3, #12]
 8004766:	061b      	lsls	r3, r3, #24
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	071b      	lsls	r3, r3, #28
 8004770:	4919      	ldr	r1, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004772:	4313      	orrs	r3, r2
 8004774:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004778:	4b17      	ldr	r3, [pc, #92]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a16      	ldr	r2, [pc, #88]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800477e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004782:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004784:	f7fd f94e 	bl	8001a24 <HAL_GetTick>
 8004788:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800478a:	e008      	b.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800478c:	f7fd f94a 	bl	8001a24 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	; 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e0d7      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800479e:	4b0e      	ldr	r3, [pc, #56]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d0f0      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80047aa:	69bb      	ldr	r3, [r7, #24]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	f040 80cd 	bne.w	800494c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a08      	ldr	r2, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047be:	f7fd f931 	bl	8001a24 <HAL_GetTick>
 80047c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047c4:	e00a      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80047c6:	f7fd f92d 	bl	8001a24 <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b64      	cmp	r3, #100	; 0x64
 80047d2:	d903      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e0ba      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80047d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80047dc:	4b5e      	ldr	r3, [pc, #376]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80047e8:	d0ed      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x682>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02e      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	2b00      	cmp	r3, #0
 8004810:	d12a      	bne.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004812:	4b51      	ldr	r3, [pc, #324]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004818:	0c1b      	lsrs	r3, r3, #16
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004820:	4b4d      	ldr	r3, [pc, #308]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004826:	0f1b      	lsrs	r3, r3, #28
 8004828:	f003 0307 	and.w	r3, r3, #7
 800482c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	695b      	ldr	r3, [r3, #20]
 8004832:	019a      	lsls	r2, r3, #6
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	041b      	lsls	r3, r3, #16
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	061b      	lsls	r3, r3, #24
 8004840:	431a      	orrs	r2, r3
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	071b      	lsls	r3, r3, #28
 8004846:	4944      	ldr	r1, [pc, #272]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800484e:	4b42      	ldr	r3, [pc, #264]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	021b      	lsls	r3, r3, #8
 8004860:	493d      	ldr	r1, [pc, #244]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004862:	4313      	orrs	r3, r2
 8004864:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d022      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004878:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800487c:	d11d      	bne.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800487e:	4b36      	ldr	r3, [pc, #216]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	0e1b      	lsrs	r3, r3, #24
 8004886:	f003 030f 	and.w	r3, r3, #15
 800488a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800488c:	4b32      	ldr	r3, [pc, #200]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800488e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004892:	0f1b      	lsrs	r3, r3, #28
 8004894:	f003 0307 	and.w	r3, r3, #7
 8004898:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	019a      	lsls	r2, r3, #6
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a1b      	ldr	r3, [r3, #32]
 80048a4:	041b      	lsls	r3, r3, #16
 80048a6:	431a      	orrs	r2, r3
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	061b      	lsls	r3, r3, #24
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	071b      	lsls	r3, r3, #28
 80048b2:	4929      	ldr	r1, [pc, #164]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f003 0308 	and.w	r3, r3, #8
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d028      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80048c6:	4b24      	ldr	r3, [pc, #144]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048cc:	0e1b      	lsrs	r3, r3, #24
 80048ce:	f003 030f 	and.w	r3, r3, #15
 80048d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80048d4:	4b20      	ldr	r3, [pc, #128]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048da:	0c1b      	lsrs	r3, r3, #16
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	019a      	lsls	r2, r3, #6
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	041b      	lsls	r3, r3, #16
 80048ec:	431a      	orrs	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	071b      	lsls	r3, r3, #28
 80048fa:	4917      	ldr	r1, [pc, #92]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004908:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	4911      	ldr	r1, [pc, #68]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800491e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004922:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004924:	f7fd f87e 	bl	8001a24 <HAL_GetTick>
 8004928:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800492a:	e008      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800492c:	f7fd f87a 	bl	8001a24 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b64      	cmp	r3, #100	; 0x64
 8004938:	d901      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e007      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800493e:	4b06      	ldr	r3, [pc, #24]	; (8004958 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004946:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800494a:	d1ef      	bne.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023800 	.word	0x40023800

0800495c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e049      	b.n	8004a02 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004974:	b2db      	uxtb	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	d106      	bne.n	8004988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7fc fea6 	bl	80016d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	3304      	adds	r3, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4610      	mov	r0, r2
 800499c:	f000 fabc 	bl	8004f18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2201      	movs	r2, #1
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2201      	movs	r2, #1
 80049cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2201      	movs	r2, #1
 80049d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2201      	movs	r2, #1
 80049e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d001      	beq.n	8004a24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e054      	b.n	8004ace <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a26      	ldr	r2, [pc, #152]	; (8004adc <HAL_TIM_Base_Start_IT+0xd0>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d022      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4e:	d01d      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a22      	ldr	r2, [pc, #136]	; (8004ae0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d018      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a21      	ldr	r2, [pc, #132]	; (8004ae4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d013      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a1f      	ldr	r2, [pc, #124]	; (8004ae8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d00e      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a1e      	ldr	r2, [pc, #120]	; (8004aec <HAL_TIM_Base_Start_IT+0xe0>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d009      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a1c      	ldr	r2, [pc, #112]	; (8004af0 <HAL_TIM_Base_Start_IT+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d004      	beq.n	8004a8c <HAL_TIM_Base_Start_IT+0x80>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a1b      	ldr	r2, [pc, #108]	; (8004af4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d115      	bne.n	8004ab8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689a      	ldr	r2, [r3, #8]
 8004a92:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_TIM_Base_Start_IT+0xec>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2b06      	cmp	r3, #6
 8004a9c:	d015      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0xbe>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa4:	d011      	beq.n	8004aca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f042 0201 	orr.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ab6:	e008      	b.n	8004aca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f042 0201 	orr.w	r2, r2, #1
 8004ac6:	601a      	str	r2, [r3, #0]
 8004ac8:	e000      	b.n	8004acc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3714      	adds	r7, #20
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40010000 	.word	0x40010000
 8004ae0:	40000400 	.word	0x40000400
 8004ae4:	40000800 	.word	0x40000800
 8004ae8:	40000c00 	.word	0x40000c00
 8004aec:	40010400 	.word	0x40010400
 8004af0:	40014000 	.word	0x40014000
 8004af4:	40001800 	.word	0x40001800
 8004af8:	00010007 	.word	0x00010007

08004afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0202 	mvn.w	r2, #2
 8004b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9cc 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 f9be 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 f9cf 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0204 	mvn.w	r2, #4
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f9a2 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f994 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 f9a5 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0208 	mvn.w	r2, #8
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f978 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f96a 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f97b 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0210 	mvn.w	r2, #16
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 f94e 	bl	8004edc <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 f940 	bl	8004ec8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 f951 	bl	8004ef0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10e      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0201 	mvn.w	r2, #1
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7fc fb40 	bl	8001300 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d10e      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d107      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fb08 	bl	80052bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cba:	d10e      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc6:	2b80      	cmp	r3, #128	; 0x80
 8004cc8:	d107      	bne.n	8004cda <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fafb 	bl	80052d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce4:	2b40      	cmp	r3, #64	; 0x40
 8004ce6:	d10e      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf2:	2b40      	cmp	r3, #64	; 0x40
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f8ff 	bl	8004f04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	691b      	ldr	r3, [r3, #16]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b20      	cmp	r3, #32
 8004d12:	d10e      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b20      	cmp	r3, #32
 8004d20:	d107      	bne.n	8004d32 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f06f 0220 	mvn.w	r2, #32
 8004d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f000 fabb 	bl	80052a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d32:	bf00      	nop
 8004d34:	3708      	adds	r7, #8
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d101      	bne.n	8004d54 <HAL_TIM_ConfigClockSource+0x18>
 8004d50:	2302      	movs	r3, #2
 8004d52:	e0b3      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x180>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2202      	movs	r2, #2
 8004d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	4b55      	ldr	r3, [pc, #340]	; (8004ec4 <HAL_TIM_ConfigClockSource+0x188>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d8c:	d03e      	beq.n	8004e0c <HAL_TIM_ConfigClockSource+0xd0>
 8004d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d92:	f200 8087 	bhi.w	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d9a:	f000 8085 	beq.w	8004ea8 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004da2:	d87f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004da4:	2b70      	cmp	r3, #112	; 0x70
 8004da6:	d01a      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0xa2>
 8004da8:	2b70      	cmp	r3, #112	; 0x70
 8004daa:	d87b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dac:	2b60      	cmp	r3, #96	; 0x60
 8004dae:	d050      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x116>
 8004db0:	2b60      	cmp	r3, #96	; 0x60
 8004db2:	d877      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004db4:	2b50      	cmp	r3, #80	; 0x50
 8004db6:	d03c      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0xf6>
 8004db8:	2b50      	cmp	r3, #80	; 0x50
 8004dba:	d873      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dbc:	2b40      	cmp	r3, #64	; 0x40
 8004dbe:	d058      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x136>
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d86f      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d064      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dc8:	2b30      	cmp	r3, #48	; 0x30
 8004dca:	d86b      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d060      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d867      	bhi.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d05c      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
 8004dd8:	2b10      	cmp	r3, #16
 8004dda:	d05a      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004ddc:	e062      	b.n	8004ea4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6899      	ldr	r1, [r3, #8]
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	f000 f9ad 	bl	800514c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e00:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	609a      	str	r2, [r3, #8]
      break;
 8004e0a:	e04e      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6818      	ldr	r0, [r3, #0]
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	6899      	ldr	r1, [r3, #8]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	685a      	ldr	r2, [r3, #4]
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	f000 f996 	bl	800514c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e2e:	609a      	str	r2, [r3, #8]
      break;
 8004e30:	e03b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 f90a 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2150      	movs	r1, #80	; 0x50
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 f963 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e50:	e02b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 f929 	bl	80050b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2160      	movs	r1, #96	; 0x60
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 f953 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e70:	e01b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f8ea 	bl	8005058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2140      	movs	r1, #64	; 0x40
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 f943 	bl	8005116 <TIM_ITRx_SetConfig>
      break;
 8004e90:	e00b      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4610      	mov	r0, r2
 8004e9e:	f000 f93a 	bl	8005116 <TIM_ITRx_SetConfig>
        break;
 8004ea2:	e002      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ea8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	fffeff88 	.word	0xfffeff88

08004ec8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a40      	ldr	r2, [pc, #256]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d013      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d00f      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a3d      	ldr	r2, [pc, #244]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a3c      	ldr	r2, [pc, #240]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3b      	ldr	r2, [pc, #236]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_Base_SetConfig+0x40>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a3a      	ldr	r2, [pc, #232]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d108      	bne.n	8004f6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a2f      	ldr	r2, [pc, #188]	; (800502c <TIM_Base_SetConfig+0x114>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d02b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f78:	d027      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2c      	ldr	r2, [pc, #176]	; (8005030 <TIM_Base_SetConfig+0x118>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d023      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2b      	ldr	r2, [pc, #172]	; (8005034 <TIM_Base_SetConfig+0x11c>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d01f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2a      	ldr	r2, [pc, #168]	; (8005038 <TIM_Base_SetConfig+0x120>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a29      	ldr	r2, [pc, #164]	; (800503c <TIM_Base_SetConfig+0x124>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d017      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a28      	ldr	r2, [pc, #160]	; (8005040 <TIM_Base_SetConfig+0x128>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <TIM_Base_SetConfig+0x12c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00f      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_Base_SetConfig+0x130>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d00b      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a25      	ldr	r2, [pc, #148]	; (800504c <TIM_Base_SetConfig+0x134>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d007      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a24      	ldr	r2, [pc, #144]	; (8005050 <TIM_Base_SetConfig+0x138>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d003      	beq.n	8004fca <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	; (8005054 <TIM_Base_SetConfig+0x13c>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d108      	bne.n	8004fdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0a      	ldr	r2, [pc, #40]	; (800502c <TIM_Base_SetConfig+0x114>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d003      	beq.n	8005010 <TIM_Base_SetConfig+0xf8>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a0c      	ldr	r2, [pc, #48]	; (800503c <TIM_Base_SetConfig+0x124>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d103      	bne.n	8005018 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	615a      	str	r2, [r3, #20]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
 800502a:	bf00      	nop
 800502c:	40010000 	.word	0x40010000
 8005030:	40000400 	.word	0x40000400
 8005034:	40000800 	.word	0x40000800
 8005038:	40000c00 	.word	0x40000c00
 800503c:	40010400 	.word	0x40010400
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800
 800504c:	40001800 	.word	0x40001800
 8005050:	40001c00 	.word	0x40001c00
 8005054:	40002000 	.word	0x40002000

08005058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	693a      	ldr	r2, [r7, #16]
 800508a:	4313      	orrs	r3, r2
 800508c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f023 030a 	bic.w	r3, r3, #10
 8005094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	4313      	orrs	r3, r2
 800509c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	621a      	str	r2, [r3, #32]
}
 80050aa:	bf00      	nop
 80050ac:	371c      	adds	r7, #28
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6a1b      	ldr	r3, [r3, #32]
 80050c6:	f023 0210 	bic.w	r2, r3, #16
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6a1b      	ldr	r3, [r3, #32]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	031b      	lsls	r3, r3, #12
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr

08005116 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005116:	b480      	push	{r7}
 8005118:	b085      	sub	sp, #20
 800511a:	af00      	add	r7, sp, #0
 800511c:	6078      	str	r0, [r7, #4]
 800511e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800512e:	683a      	ldr	r2, [r7, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	f043 0307 	orr.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	609a      	str	r2, [r3, #8]
}
 8005140:	bf00      	nop
 8005142:	3714      	adds	r7, #20
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800514c:	b480      	push	{r7}
 800514e:	b087      	sub	sp, #28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005166:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	021a      	lsls	r2, r3, #8
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	431a      	orrs	r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	4313      	orrs	r3, r2
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	4313      	orrs	r3, r2
 8005178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	609a      	str	r2, [r3, #8]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800518c:	b480      	push	{r7}
 800518e:	b085      	sub	sp, #20
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800519c:	2b01      	cmp	r3, #1
 800519e:	d101      	bne.n	80051a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051a0:	2302      	movs	r3, #2
 80051a2:	e06d      	b.n	8005280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2202      	movs	r2, #2
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a30      	ldr	r2, [pc, #192]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d004      	beq.n	80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a2f      	ldr	r2, [pc, #188]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d108      	bne.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051f0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a20      	ldr	r2, [pc, #128]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d022      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005216:	d01d      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d018      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d013      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a1a      	ldr	r2, [pc, #104]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00e      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a15      	ldr	r2, [pc, #84]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d009      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d10c      	bne.n	800526e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800525a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	4313      	orrs	r3, r2
 8005264:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	68ba      	ldr	r2, [r7, #8]
 800526c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2200      	movs	r2, #0
 800527a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800527e:	2300      	movs	r3, #0
}
 8005280:	4618      	mov	r0, r3
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	40010000 	.word	0x40010000
 8005290:	40010400 	.word	0x40010400
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40000c00 	.word	0x40000c00
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40001800 	.word	0x40001800

080052a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052b0:	bf00      	nop
 80052b2:	370c      	adds	r7, #12
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80052d8:	bf00      	nop
 80052da:	370c      	adds	r7, #12
 80052dc:	46bd      	mov	sp, r7
 80052de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e2:	4770      	bx	lr

080052e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e040      	b.n	8005378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f7fc fa02 	bl	8001710 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2224      	movs	r2, #36	; 0x24
 8005310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f8c0 	bl	80054a8 <UART_SetConfig>
 8005328:	4603      	mov	r3, r0
 800532a:	2b01      	cmp	r3, #1
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e022      	b.n	8005378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	2b00      	cmp	r3, #0
 8005338:	d002      	beq.n	8005340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb18 	bl	8005970 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800534e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800535e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fb9f 	bl	8005ab4 <UART_CheckIdleState>
 8005376:	4603      	mov	r3, r0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08a      	sub	sp, #40	; 0x28
 8005384:	af02      	add	r7, sp, #8
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	4613      	mov	r3, r2
 800538e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 8081 	bne.w	800549c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d002      	beq.n	80053a6 <HAL_UART_Transmit+0x26>
 80053a0:	88fb      	ldrh	r3, [r7, #6]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e079      	b.n	800549e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Transmit+0x38>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e072      	b.n	800549e <HAL_UART_Transmit+0x11e>
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2221      	movs	r2, #33	; 0x21
 80053cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053ce:	f7fc fb29 	bl	8001a24 <HAL_GetTick>
 80053d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	88fa      	ldrh	r2, [r7, #6]
 80053d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ec:	d108      	bne.n	8005400 <HAL_UART_Transmit+0x80>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d104      	bne.n	8005400 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	61bb      	str	r3, [r7, #24]
 80053fe:	e003      	b.n	8005408 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005410:	e02c      	b.n	800546c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2200      	movs	r2, #0
 800541a:	2180      	movs	r1, #128	; 0x80
 800541c:	68f8      	ldr	r0, [r7, #12]
 800541e:	f000 fb7c 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e038      	b.n	800549e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10b      	bne.n	800544a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	461a      	mov	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005440:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	3302      	adds	r3, #2
 8005446:	61bb      	str	r3, [r7, #24]
 8005448:	e007      	b.n	800545a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	781a      	ldrb	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	3301      	adds	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005472:	b29b      	uxth	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1cc      	bne.n	8005412 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2200      	movs	r2, #0
 8005480:	2140      	movs	r1, #64	; 0x40
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f000 fb49 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d001      	beq.n	8005492 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800548e:	2303      	movs	r3, #3
 8005490:	e005      	b.n	800549e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2220      	movs	r2, #32
 8005496:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	e000      	b.n	800549e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800549c:	2302      	movs	r3, #2
  }
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3720      	adds	r7, #32
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
	...

080054a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b088      	sub	sp, #32
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	431a      	orrs	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	69db      	ldr	r3, [r3, #28]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	4ba6      	ldr	r3, [pc, #664]	; (800576c <UART_SetConfig+0x2c4>)
 80054d4:	4013      	ands	r3, r2
 80054d6:	687a      	ldr	r2, [r7, #4]
 80054d8:	6812      	ldr	r2, [r2, #0]
 80054da:	6979      	ldr	r1, [r7, #20]
 80054dc:	430b      	orrs	r3, r1
 80054de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68da      	ldr	r2, [r3, #12]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	430a      	orrs	r2, r1
 8005518:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a94      	ldr	r2, [pc, #592]	; (8005770 <UART_SetConfig+0x2c8>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d120      	bne.n	8005566 <UART_SetConfig+0xbe>
 8005524:	4b93      	ldr	r3, [pc, #588]	; (8005774 <UART_SetConfig+0x2cc>)
 8005526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552a:	f003 0303 	and.w	r3, r3, #3
 800552e:	2b03      	cmp	r3, #3
 8005530:	d816      	bhi.n	8005560 <UART_SetConfig+0xb8>
 8005532:	a201      	add	r2, pc, #4	; (adr r2, 8005538 <UART_SetConfig+0x90>)
 8005534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005538:	08005549 	.word	0x08005549
 800553c:	08005555 	.word	0x08005555
 8005540:	0800554f 	.word	0x0800554f
 8005544:	0800555b 	.word	0x0800555b
 8005548:	2301      	movs	r3, #1
 800554a:	77fb      	strb	r3, [r7, #31]
 800554c:	e150      	b.n	80057f0 <UART_SetConfig+0x348>
 800554e:	2302      	movs	r3, #2
 8005550:	77fb      	strb	r3, [r7, #31]
 8005552:	e14d      	b.n	80057f0 <UART_SetConfig+0x348>
 8005554:	2304      	movs	r3, #4
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e14a      	b.n	80057f0 <UART_SetConfig+0x348>
 800555a:	2308      	movs	r3, #8
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e147      	b.n	80057f0 <UART_SetConfig+0x348>
 8005560:	2310      	movs	r3, #16
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e144      	b.n	80057f0 <UART_SetConfig+0x348>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a83      	ldr	r2, [pc, #524]	; (8005778 <UART_SetConfig+0x2d0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d132      	bne.n	80055d6 <UART_SetConfig+0x12e>
 8005570:	4b80      	ldr	r3, [pc, #512]	; (8005774 <UART_SetConfig+0x2cc>)
 8005572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005576:	f003 030c 	and.w	r3, r3, #12
 800557a:	2b0c      	cmp	r3, #12
 800557c:	d828      	bhi.n	80055d0 <UART_SetConfig+0x128>
 800557e:	a201      	add	r2, pc, #4	; (adr r2, 8005584 <UART_SetConfig+0xdc>)
 8005580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005584:	080055b9 	.word	0x080055b9
 8005588:	080055d1 	.word	0x080055d1
 800558c:	080055d1 	.word	0x080055d1
 8005590:	080055d1 	.word	0x080055d1
 8005594:	080055c5 	.word	0x080055c5
 8005598:	080055d1 	.word	0x080055d1
 800559c:	080055d1 	.word	0x080055d1
 80055a0:	080055d1 	.word	0x080055d1
 80055a4:	080055bf 	.word	0x080055bf
 80055a8:	080055d1 	.word	0x080055d1
 80055ac:	080055d1 	.word	0x080055d1
 80055b0:	080055d1 	.word	0x080055d1
 80055b4:	080055cb 	.word	0x080055cb
 80055b8:	2300      	movs	r3, #0
 80055ba:	77fb      	strb	r3, [r7, #31]
 80055bc:	e118      	b.n	80057f0 <UART_SetConfig+0x348>
 80055be:	2302      	movs	r3, #2
 80055c0:	77fb      	strb	r3, [r7, #31]
 80055c2:	e115      	b.n	80057f0 <UART_SetConfig+0x348>
 80055c4:	2304      	movs	r3, #4
 80055c6:	77fb      	strb	r3, [r7, #31]
 80055c8:	e112      	b.n	80057f0 <UART_SetConfig+0x348>
 80055ca:	2308      	movs	r3, #8
 80055cc:	77fb      	strb	r3, [r7, #31]
 80055ce:	e10f      	b.n	80057f0 <UART_SetConfig+0x348>
 80055d0:	2310      	movs	r3, #16
 80055d2:	77fb      	strb	r3, [r7, #31]
 80055d4:	e10c      	b.n	80057f0 <UART_SetConfig+0x348>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a68      	ldr	r2, [pc, #416]	; (800577c <UART_SetConfig+0x2d4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d120      	bne.n	8005622 <UART_SetConfig+0x17a>
 80055e0:	4b64      	ldr	r3, [pc, #400]	; (8005774 <UART_SetConfig+0x2cc>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055ea:	2b30      	cmp	r3, #48	; 0x30
 80055ec:	d013      	beq.n	8005616 <UART_SetConfig+0x16e>
 80055ee:	2b30      	cmp	r3, #48	; 0x30
 80055f0:	d814      	bhi.n	800561c <UART_SetConfig+0x174>
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d009      	beq.n	800560a <UART_SetConfig+0x162>
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d810      	bhi.n	800561c <UART_SetConfig+0x174>
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <UART_SetConfig+0x15c>
 80055fe:	2b10      	cmp	r3, #16
 8005600:	d006      	beq.n	8005610 <UART_SetConfig+0x168>
 8005602:	e00b      	b.n	800561c <UART_SetConfig+0x174>
 8005604:	2300      	movs	r3, #0
 8005606:	77fb      	strb	r3, [r7, #31]
 8005608:	e0f2      	b.n	80057f0 <UART_SetConfig+0x348>
 800560a:	2302      	movs	r3, #2
 800560c:	77fb      	strb	r3, [r7, #31]
 800560e:	e0ef      	b.n	80057f0 <UART_SetConfig+0x348>
 8005610:	2304      	movs	r3, #4
 8005612:	77fb      	strb	r3, [r7, #31]
 8005614:	e0ec      	b.n	80057f0 <UART_SetConfig+0x348>
 8005616:	2308      	movs	r3, #8
 8005618:	77fb      	strb	r3, [r7, #31]
 800561a:	e0e9      	b.n	80057f0 <UART_SetConfig+0x348>
 800561c:	2310      	movs	r3, #16
 800561e:	77fb      	strb	r3, [r7, #31]
 8005620:	e0e6      	b.n	80057f0 <UART_SetConfig+0x348>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a56      	ldr	r2, [pc, #344]	; (8005780 <UART_SetConfig+0x2d8>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d120      	bne.n	800566e <UART_SetConfig+0x1c6>
 800562c:	4b51      	ldr	r3, [pc, #324]	; (8005774 <UART_SetConfig+0x2cc>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005632:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005636:	2bc0      	cmp	r3, #192	; 0xc0
 8005638:	d013      	beq.n	8005662 <UART_SetConfig+0x1ba>
 800563a:	2bc0      	cmp	r3, #192	; 0xc0
 800563c:	d814      	bhi.n	8005668 <UART_SetConfig+0x1c0>
 800563e:	2b80      	cmp	r3, #128	; 0x80
 8005640:	d009      	beq.n	8005656 <UART_SetConfig+0x1ae>
 8005642:	2b80      	cmp	r3, #128	; 0x80
 8005644:	d810      	bhi.n	8005668 <UART_SetConfig+0x1c0>
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <UART_SetConfig+0x1a8>
 800564a:	2b40      	cmp	r3, #64	; 0x40
 800564c:	d006      	beq.n	800565c <UART_SetConfig+0x1b4>
 800564e:	e00b      	b.n	8005668 <UART_SetConfig+0x1c0>
 8005650:	2300      	movs	r3, #0
 8005652:	77fb      	strb	r3, [r7, #31]
 8005654:	e0cc      	b.n	80057f0 <UART_SetConfig+0x348>
 8005656:	2302      	movs	r3, #2
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e0c9      	b.n	80057f0 <UART_SetConfig+0x348>
 800565c:	2304      	movs	r3, #4
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e0c6      	b.n	80057f0 <UART_SetConfig+0x348>
 8005662:	2308      	movs	r3, #8
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e0c3      	b.n	80057f0 <UART_SetConfig+0x348>
 8005668:	2310      	movs	r3, #16
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e0c0      	b.n	80057f0 <UART_SetConfig+0x348>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a44      	ldr	r2, [pc, #272]	; (8005784 <UART_SetConfig+0x2dc>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d125      	bne.n	80056c4 <UART_SetConfig+0x21c>
 8005678:	4b3e      	ldr	r3, [pc, #248]	; (8005774 <UART_SetConfig+0x2cc>)
 800567a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005682:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005686:	d017      	beq.n	80056b8 <UART_SetConfig+0x210>
 8005688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800568c:	d817      	bhi.n	80056be <UART_SetConfig+0x216>
 800568e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005692:	d00b      	beq.n	80056ac <UART_SetConfig+0x204>
 8005694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005698:	d811      	bhi.n	80056be <UART_SetConfig+0x216>
 800569a:	2b00      	cmp	r3, #0
 800569c:	d003      	beq.n	80056a6 <UART_SetConfig+0x1fe>
 800569e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056a2:	d006      	beq.n	80056b2 <UART_SetConfig+0x20a>
 80056a4:	e00b      	b.n	80056be <UART_SetConfig+0x216>
 80056a6:	2300      	movs	r3, #0
 80056a8:	77fb      	strb	r3, [r7, #31]
 80056aa:	e0a1      	b.n	80057f0 <UART_SetConfig+0x348>
 80056ac:	2302      	movs	r3, #2
 80056ae:	77fb      	strb	r3, [r7, #31]
 80056b0:	e09e      	b.n	80057f0 <UART_SetConfig+0x348>
 80056b2:	2304      	movs	r3, #4
 80056b4:	77fb      	strb	r3, [r7, #31]
 80056b6:	e09b      	b.n	80057f0 <UART_SetConfig+0x348>
 80056b8:	2308      	movs	r3, #8
 80056ba:	77fb      	strb	r3, [r7, #31]
 80056bc:	e098      	b.n	80057f0 <UART_SetConfig+0x348>
 80056be:	2310      	movs	r3, #16
 80056c0:	77fb      	strb	r3, [r7, #31]
 80056c2:	e095      	b.n	80057f0 <UART_SetConfig+0x348>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <UART_SetConfig+0x2e0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d125      	bne.n	800571a <UART_SetConfig+0x272>
 80056ce:	4b29      	ldr	r3, [pc, #164]	; (8005774 <UART_SetConfig+0x2cc>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80056d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056dc:	d017      	beq.n	800570e <UART_SetConfig+0x266>
 80056de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80056e2:	d817      	bhi.n	8005714 <UART_SetConfig+0x26c>
 80056e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056e8:	d00b      	beq.n	8005702 <UART_SetConfig+0x25a>
 80056ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056ee:	d811      	bhi.n	8005714 <UART_SetConfig+0x26c>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <UART_SetConfig+0x254>
 80056f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056f8:	d006      	beq.n	8005708 <UART_SetConfig+0x260>
 80056fa:	e00b      	b.n	8005714 <UART_SetConfig+0x26c>
 80056fc:	2301      	movs	r3, #1
 80056fe:	77fb      	strb	r3, [r7, #31]
 8005700:	e076      	b.n	80057f0 <UART_SetConfig+0x348>
 8005702:	2302      	movs	r3, #2
 8005704:	77fb      	strb	r3, [r7, #31]
 8005706:	e073      	b.n	80057f0 <UART_SetConfig+0x348>
 8005708:	2304      	movs	r3, #4
 800570a:	77fb      	strb	r3, [r7, #31]
 800570c:	e070      	b.n	80057f0 <UART_SetConfig+0x348>
 800570e:	2308      	movs	r3, #8
 8005710:	77fb      	strb	r3, [r7, #31]
 8005712:	e06d      	b.n	80057f0 <UART_SetConfig+0x348>
 8005714:	2310      	movs	r3, #16
 8005716:	77fb      	strb	r3, [r7, #31]
 8005718:	e06a      	b.n	80057f0 <UART_SetConfig+0x348>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a1b      	ldr	r2, [pc, #108]	; (800578c <UART_SetConfig+0x2e4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d138      	bne.n	8005796 <UART_SetConfig+0x2ee>
 8005724:	4b13      	ldr	r3, [pc, #76]	; (8005774 <UART_SetConfig+0x2cc>)
 8005726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800572a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800572e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005732:	d017      	beq.n	8005764 <UART_SetConfig+0x2bc>
 8005734:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005738:	d82a      	bhi.n	8005790 <UART_SetConfig+0x2e8>
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573e:	d00b      	beq.n	8005758 <UART_SetConfig+0x2b0>
 8005740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005744:	d824      	bhi.n	8005790 <UART_SetConfig+0x2e8>
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <UART_SetConfig+0x2aa>
 800574a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800574e:	d006      	beq.n	800575e <UART_SetConfig+0x2b6>
 8005750:	e01e      	b.n	8005790 <UART_SetConfig+0x2e8>
 8005752:	2300      	movs	r3, #0
 8005754:	77fb      	strb	r3, [r7, #31]
 8005756:	e04b      	b.n	80057f0 <UART_SetConfig+0x348>
 8005758:	2302      	movs	r3, #2
 800575a:	77fb      	strb	r3, [r7, #31]
 800575c:	e048      	b.n	80057f0 <UART_SetConfig+0x348>
 800575e:	2304      	movs	r3, #4
 8005760:	77fb      	strb	r3, [r7, #31]
 8005762:	e045      	b.n	80057f0 <UART_SetConfig+0x348>
 8005764:	2308      	movs	r3, #8
 8005766:	77fb      	strb	r3, [r7, #31]
 8005768:	e042      	b.n	80057f0 <UART_SetConfig+0x348>
 800576a:	bf00      	nop
 800576c:	efff69f3 	.word	0xefff69f3
 8005770:	40011000 	.word	0x40011000
 8005774:	40023800 	.word	0x40023800
 8005778:	40004400 	.word	0x40004400
 800577c:	40004800 	.word	0x40004800
 8005780:	40004c00 	.word	0x40004c00
 8005784:	40005000 	.word	0x40005000
 8005788:	40011400 	.word	0x40011400
 800578c:	40007800 	.word	0x40007800
 8005790:	2310      	movs	r3, #16
 8005792:	77fb      	strb	r3, [r7, #31]
 8005794:	e02c      	b.n	80057f0 <UART_SetConfig+0x348>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a72      	ldr	r2, [pc, #456]	; (8005964 <UART_SetConfig+0x4bc>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d125      	bne.n	80057ec <UART_SetConfig+0x344>
 80057a0:	4b71      	ldr	r3, [pc, #452]	; (8005968 <UART_SetConfig+0x4c0>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80057aa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057ae:	d017      	beq.n	80057e0 <UART_SetConfig+0x338>
 80057b0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80057b4:	d817      	bhi.n	80057e6 <UART_SetConfig+0x33e>
 80057b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ba:	d00b      	beq.n	80057d4 <UART_SetConfig+0x32c>
 80057bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c0:	d811      	bhi.n	80057e6 <UART_SetConfig+0x33e>
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d003      	beq.n	80057ce <UART_SetConfig+0x326>
 80057c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80057ca:	d006      	beq.n	80057da <UART_SetConfig+0x332>
 80057cc:	e00b      	b.n	80057e6 <UART_SetConfig+0x33e>
 80057ce:	2300      	movs	r3, #0
 80057d0:	77fb      	strb	r3, [r7, #31]
 80057d2:	e00d      	b.n	80057f0 <UART_SetConfig+0x348>
 80057d4:	2302      	movs	r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e00a      	b.n	80057f0 <UART_SetConfig+0x348>
 80057da:	2304      	movs	r3, #4
 80057dc:	77fb      	strb	r3, [r7, #31]
 80057de:	e007      	b.n	80057f0 <UART_SetConfig+0x348>
 80057e0:	2308      	movs	r3, #8
 80057e2:	77fb      	strb	r3, [r7, #31]
 80057e4:	e004      	b.n	80057f0 <UART_SetConfig+0x348>
 80057e6:	2310      	movs	r3, #16
 80057e8:	77fb      	strb	r3, [r7, #31]
 80057ea:	e001      	b.n	80057f0 <UART_SetConfig+0x348>
 80057ec:	2310      	movs	r3, #16
 80057ee:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	69db      	ldr	r3, [r3, #28]
 80057f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f8:	d15c      	bne.n	80058b4 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80057fa:	7ffb      	ldrb	r3, [r7, #31]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d828      	bhi.n	8005852 <UART_SetConfig+0x3aa>
 8005800:	a201      	add	r2, pc, #4	; (adr r2, 8005808 <UART_SetConfig+0x360>)
 8005802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005806:	bf00      	nop
 8005808:	0800582d 	.word	0x0800582d
 800580c:	08005835 	.word	0x08005835
 8005810:	0800583d 	.word	0x0800583d
 8005814:	08005853 	.word	0x08005853
 8005818:	08005843 	.word	0x08005843
 800581c:	08005853 	.word	0x08005853
 8005820:	08005853 	.word	0x08005853
 8005824:	08005853 	.word	0x08005853
 8005828:	0800584b 	.word	0x0800584b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800582c:	f7fe fc4c 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 8005830:	61b8      	str	r0, [r7, #24]
        break;
 8005832:	e013      	b.n	800585c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005834:	f7fe fc5c 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 8005838:	61b8      	str	r0, [r7, #24]
        break;
 800583a:	e00f      	b.n	800585c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800583c:	4b4b      	ldr	r3, [pc, #300]	; (800596c <UART_SetConfig+0x4c4>)
 800583e:	61bb      	str	r3, [r7, #24]
        break;
 8005840:	e00c      	b.n	800585c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005842:	f7fe fb6f 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 8005846:	61b8      	str	r0, [r7, #24]
        break;
 8005848:	e008      	b.n	800585c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800584a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584e:	61bb      	str	r3, [r7, #24]
        break;
 8005850:	e004      	b.n	800585c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	77bb      	strb	r3, [r7, #30]
        break;
 800585a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d074      	beq.n	800594c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	005a      	lsls	r2, r3, #1
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	441a      	add	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	fbb2 f3f3 	udiv	r3, r2, r3
 8005876:	b29b      	uxth	r3, r3
 8005878:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	2b0f      	cmp	r3, #15
 800587e:	d916      	bls.n	80058ae <UART_SetConfig+0x406>
 8005880:	693b      	ldr	r3, [r7, #16]
 8005882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005886:	d212      	bcs.n	80058ae <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	b29b      	uxth	r3, r3
 800588c:	f023 030f 	bic.w	r3, r3, #15
 8005890:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	085b      	lsrs	r3, r3, #1
 8005896:	b29b      	uxth	r3, r3
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	b29a      	uxth	r2, r3
 800589e:	89fb      	ldrh	r3, [r7, #14]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	89fa      	ldrh	r2, [r7, #14]
 80058aa:	60da      	str	r2, [r3, #12]
 80058ac:	e04e      	b.n	800594c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	77bb      	strb	r3, [r7, #30]
 80058b2:	e04b      	b.n	800594c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058b4:	7ffb      	ldrb	r3, [r7, #31]
 80058b6:	2b08      	cmp	r3, #8
 80058b8:	d827      	bhi.n	800590a <UART_SetConfig+0x462>
 80058ba:	a201      	add	r2, pc, #4	; (adr r2, 80058c0 <UART_SetConfig+0x418>)
 80058bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c0:	080058e5 	.word	0x080058e5
 80058c4:	080058ed 	.word	0x080058ed
 80058c8:	080058f5 	.word	0x080058f5
 80058cc:	0800590b 	.word	0x0800590b
 80058d0:	080058fb 	.word	0x080058fb
 80058d4:	0800590b 	.word	0x0800590b
 80058d8:	0800590b 	.word	0x0800590b
 80058dc:	0800590b 	.word	0x0800590b
 80058e0:	08005903 	.word	0x08005903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058e4:	f7fe fbf0 	bl	80040c8 <HAL_RCC_GetPCLK1Freq>
 80058e8:	61b8      	str	r0, [r7, #24]
        break;
 80058ea:	e013      	b.n	8005914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058ec:	f7fe fc00 	bl	80040f0 <HAL_RCC_GetPCLK2Freq>
 80058f0:	61b8      	str	r0, [r7, #24]
        break;
 80058f2:	e00f      	b.n	8005914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058f4:	4b1d      	ldr	r3, [pc, #116]	; (800596c <UART_SetConfig+0x4c4>)
 80058f6:	61bb      	str	r3, [r7, #24]
        break;
 80058f8:	e00c      	b.n	8005914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058fa:	f7fe fb13 	bl	8003f24 <HAL_RCC_GetSysClockFreq>
 80058fe:	61b8      	str	r0, [r7, #24]
        break;
 8005900:	e008      	b.n	8005914 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005906:	61bb      	str	r3, [r7, #24]
        break;
 8005908:	e004      	b.n	8005914 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800590e:	2301      	movs	r3, #1
 8005910:	77bb      	strb	r3, [r7, #30]
        break;
 8005912:	bf00      	nop
    }

    if (pclk != 0U)
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d018      	beq.n	800594c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	085a      	lsrs	r2, r3, #1
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	441a      	add	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	fbb2 f3f3 	udiv	r3, r2, r3
 800592c:	b29b      	uxth	r3, r3
 800592e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	2b0f      	cmp	r3, #15
 8005934:	d908      	bls.n	8005948 <UART_SetConfig+0x4a0>
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800593c:	d204      	bcs.n	8005948 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	60da      	str	r2, [r3, #12]
 8005946:	e001      	b.n	800594c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2200      	movs	r2, #0
 8005956:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005958:	7fbb      	ldrb	r3, [r7, #30]
}
 800595a:	4618      	mov	r0, r3
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40007c00 	.word	0x40007c00
 8005968:	40023800 	.word	0x40023800
 800596c:	00f42400 	.word	0x00f42400

08005970 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597c:	f003 0301 	and.w	r3, r3, #1
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00a      	beq.n	800599a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	f003 0302 	and.w	r3, r3, #2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d00a      	beq.n	80059bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	430a      	orrs	r2, r1
 80059ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00a      	beq.n	80059de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a04:	f003 0310 	and.w	r3, r3, #16
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d00a      	beq.n	8005a22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	f003 0320 	and.w	r3, r3, #32
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00a      	beq.n	8005a44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	430a      	orrs	r2, r1
 8005a42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01a      	beq.n	8005a86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a6e:	d10a      	bne.n	8005a86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	605a      	str	r2, [r3, #4]
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af02      	add	r7, sp, #8
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ac4:	f7fb ffae 	bl	8001a24 <HAL_GetTick>
 8005ac8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0308 	and.w	r3, r3, #8
 8005ad4:	2b08      	cmp	r3, #8
 8005ad6:	d10e      	bne.n	8005af6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ad8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f817 	bl	8005b1a <UART_WaitOnFlagUntilTimeout>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e00d      	b.n	8005b12 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2220      	movs	r2, #32
 8005afa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2220      	movs	r2, #32
 8005b00:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	603b      	str	r3, [r7, #0]
 8005b26:	4613      	mov	r3, r2
 8005b28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b2a:	e05e      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b2c:	69bb      	ldr	r3, [r7, #24]
 8005b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b32:	d05a      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b34:	f7fb ff76 	bl	8001a24 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	69ba      	ldr	r2, [r7, #24]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d302      	bcc.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x30>
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d11b      	bne.n	8005b82 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005b58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f022 0201 	bic.w	r2, r2, #1
 8005b68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2220      	movs	r2, #32
 8005b6e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2220      	movs	r2, #32
 8005b74:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	e043      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f003 0304 	and.w	r3, r3, #4
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d02c      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b9e:	d124      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005bb8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689a      	ldr	r2, [r3, #8]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f022 0201 	bic.w	r2, r2, #1
 8005bc8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2220      	movs	r2, #32
 8005bd4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e00f      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d091      	beq.n	8005b2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b085      	sub	sp, #20
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	4603      	mov	r3, r0
 8005c1a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c24:	2b84      	cmp	r3, #132	; 0x84
 8005c26:	d005      	beq.n	8005c34 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c28:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	4413      	add	r3, r2
 8005c30:	3303      	adds	r3, #3
 8005c32:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c34:	68fb      	ldr	r3, [r7, #12]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3714      	adds	r7, #20
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr

08005c42 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005c46:	f000 fae9 	bl	800621c <vTaskStartScheduler>
  
  return osOK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005c50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c52:	b089      	sub	sp, #36	; 0x24
 8005c54:	af04      	add	r7, sp, #16
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d020      	beq.n	8005ca4 <osThreadCreate+0x54>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d01c      	beq.n	8005ca4 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685c      	ldr	r4, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681d      	ldr	r5, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	691e      	ldr	r6, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f7ff ffc8 	bl	8005c12 <makeFreeRtosPriority>
 8005c82:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	695b      	ldr	r3, [r3, #20]
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005c8c:	9202      	str	r2, [sp, #8]
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	9100      	str	r1, [sp, #0]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	4632      	mov	r2, r6
 8005c96:	4629      	mov	r1, r5
 8005c98:	4620      	mov	r0, r4
 8005c9a:	f000 f8ed 	bl	8005e78 <xTaskCreateStatic>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	e01c      	b.n	8005cde <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	685c      	ldr	r4, [r3, #4]
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cb0:	b29e      	uxth	r6, r3
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7ff ffaa 	bl	8005c12 <makeFreeRtosPriority>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	f107 030c 	add.w	r3, r7, #12
 8005cc4:	9301      	str	r3, [sp, #4]
 8005cc6:	9200      	str	r2, [sp, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	4632      	mov	r2, r6
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f000 f935 	bl	8005f3e <xTaskCreate>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d001      	beq.n	8005cde <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	e000      	b.n	8005ce0 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005cde:	68fb      	ldr	r3, [r7, #12]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3714      	adds	r7, #20
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ce8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <osDelay+0x16>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	e000      	b.n	8005d00 <osDelay+0x18>
 8005cfe:	2301      	movs	r3, #1
 8005d00:	4618      	mov	r0, r3
 8005d02:	f000 fa55 	bl	80061b0 <vTaskDelay>
  
  return osOK;
 8005d06:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}

08005d10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f103 0208 	add.w	r2, r3, #8
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f04f 32ff 	mov.w	r2, #4294967295
 8005d28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f103 0208 	add.w	r2, r3, #8
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f103 0208 	add.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d44:	bf00      	nop
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b085      	sub	sp, #20
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
 8005d72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	689a      	ldr	r2, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	683a      	ldr	r2, [r7, #0]
 8005d8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	683a      	ldr	r2, [r7, #0]
 8005d94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	687a      	ldr	r2, [r7, #4]
 8005d9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	1c5a      	adds	r2, r3, #1
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	601a      	str	r2, [r3, #0]
}
 8005da6:	bf00      	nop
 8005da8:	3714      	adds	r7, #20
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc8:	d103      	bne.n	8005dd2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	e00c      	b.n	8005dec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	e002      	b.n	8005de0 <vListInsert+0x2e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	60fb      	str	r3, [r7, #12]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d2f6      	bcs.n	8005dda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	683a      	ldr	r2, [r7, #0]
 8005dfa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68fa      	ldr	r2, [r7, #12]
 8005e00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	683a      	ldr	r2, [r7, #0]
 8005e06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	601a      	str	r2, [r3, #0]
}
 8005e18:	bf00      	nop
 8005e1a:	3714      	adds	r7, #20
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6892      	ldr	r2, [r2, #8]
 8005e3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6852      	ldr	r2, [r2, #4]
 8005e44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d103      	bne.n	8005e58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	1e5a      	subs	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	; 0x38
 8005e7c:	af04      	add	r7, sp, #16
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10c      	bne.n	8005ea6 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e90:	b672      	cpsid	i
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	b662      	cpsie	i
 8005ea0:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10c      	bne.n	8005ec6 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb0:	b672      	cpsid	i
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	b662      	cpsie	i
 8005ec0:	61fb      	str	r3, [r7, #28]
}
 8005ec2:	bf00      	nop
 8005ec4:	e7fe      	b.n	8005ec4 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ec6:	2354      	movs	r3, #84	; 0x54
 8005ec8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	2b54      	cmp	r3, #84	; 0x54
 8005ece:	d00c      	beq.n	8005eea <xTaskCreateStatic+0x72>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	b672      	cpsid	i
 8005ed6:	f383 8811 	msr	BASEPRI, r3
 8005eda:	f3bf 8f6f 	isb	sy
 8005ede:	f3bf 8f4f 	dsb	sy
 8005ee2:	b662      	cpsie	i
 8005ee4:	61bb      	str	r3, [r7, #24]
}
 8005ee6:	bf00      	nop
 8005ee8:	e7fe      	b.n	8005ee8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005eea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d01e      	beq.n	8005f30 <xTaskCreateStatic+0xb8>
 8005ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d01b      	beq.n	8005f30 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005efa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	9303      	str	r3, [sp, #12]
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f10:	9302      	str	r3, [sp, #8]
 8005f12:	f107 0314 	add.w	r3, r7, #20
 8005f16:	9301      	str	r3, [sp, #4]
 8005f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1a:	9300      	str	r3, [sp, #0]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	687a      	ldr	r2, [r7, #4]
 8005f20:	68b9      	ldr	r1, [r7, #8]
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f850 	bl	8005fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f28:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f2a:	f000 f8d7 	bl	80060dc <prvAddNewTaskToReadyList>
 8005f2e:	e001      	b.n	8005f34 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f34:	697b      	ldr	r3, [r7, #20]
	}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b08c      	sub	sp, #48	; 0x30
 8005f42:	af04      	add	r7, sp, #16
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	603b      	str	r3, [r7, #0]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f4e:	88fb      	ldrh	r3, [r7, #6]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	4618      	mov	r0, r3
 8005f54:	f000 feba 	bl	8006ccc <pvPortMalloc>
 8005f58:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f60:	2054      	movs	r0, #84	; 0x54
 8005f62:	f000 feb3 	bl	8006ccc <pvPortMalloc>
 8005f66:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	697a      	ldr	r2, [r7, #20]
 8005f72:	631a      	str	r2, [r3, #48]	; 0x30
 8005f74:	e005      	b.n	8005f82 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f76:	6978      	ldr	r0, [r7, #20]
 8005f78:	f000 ff72 	bl	8006e60 <vPortFree>
 8005f7c:	e001      	b.n	8005f82 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f90:	88fa      	ldrh	r2, [r7, #6]
 8005f92:	2300      	movs	r3, #0
 8005f94:	9303      	str	r3, [sp, #12]
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	9302      	str	r3, [sp, #8]
 8005f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9c:	9301      	str	r3, [sp, #4]
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68b9      	ldr	r1, [r7, #8]
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 f80e 	bl	8005fc8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fac:	69f8      	ldr	r0, [r7, #28]
 8005fae:	f000 f895 	bl	80060dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	61bb      	str	r3, [r7, #24]
 8005fb6:	e002      	b.n	8005fbe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fbc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fbe:	69bb      	ldr	r3, [r7, #24]
	}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3720      	adds	r7, #32
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}

08005fc8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b088      	sub	sp, #32
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fda:	6879      	ldr	r1, [r7, #4]
 8005fdc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005fe0:	440b      	add	r3, r1
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4413      	add	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	f023 0307 	bic.w	r3, r3, #7
 8005fee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	f003 0307 	and.w	r3, r3, #7
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00c      	beq.n	8006014 <prvInitialiseNewTask+0x4c>
	__asm volatile
 8005ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ffe:	b672      	cpsid	i
 8006000:	f383 8811 	msr	BASEPRI, r3
 8006004:	f3bf 8f6f 	isb	sy
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	b662      	cpsie	i
 800600e:	617b      	str	r3, [r7, #20]
}
 8006010:	bf00      	nop
 8006012:	e7fe      	b.n	8006012 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d01f      	beq.n	800605a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800601a:	2300      	movs	r3, #0
 800601c:	61fb      	str	r3, [r7, #28]
 800601e:	e012      	b.n	8006046 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	4413      	add	r3, r2
 8006026:	7819      	ldrb	r1, [r3, #0]
 8006028:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	3334      	adds	r3, #52	; 0x34
 8006030:	460a      	mov	r2, r1
 8006032:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	4413      	add	r3, r2
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d006      	beq.n	800604e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	3301      	adds	r3, #1
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d9e9      	bls.n	8006020 <prvInitialiseNewTask+0x58>
 800604c:	e000      	b.n	8006050 <prvInitialiseNewTask+0x88>
			{
				break;
 800604e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006052:	2200      	movs	r2, #0
 8006054:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006058:	e003      	b.n	8006062 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006064:	2b06      	cmp	r3, #6
 8006066:	d901      	bls.n	800606c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006068:	2306      	movs	r3, #6
 800606a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800606c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800606e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006070:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006076:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607a:	2200      	movs	r2, #0
 800607c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006080:	3304      	adds	r3, #4
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff fe64 	bl	8005d50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	3318      	adds	r3, #24
 800608c:	4618      	mov	r0, r3
 800608e:	f7ff fe5f 	bl	8005d50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006094:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006096:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609a:	f1c3 0207 	rsb	r2, r3, #7
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	2200      	movs	r2, #0
 80060ac:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80060b6:	683a      	ldr	r2, [r7, #0]
 80060b8:	68f9      	ldr	r1, [r7, #12]
 80060ba:	69b8      	ldr	r0, [r7, #24]
 80060bc:	f000 fc14 	bl	80068e8 <pxPortInitialiseStack>
 80060c0:	4602      	mov	r2, r0
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80060c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80060cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060d2:	bf00      	nop
 80060d4:	3720      	adds	r7, #32
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
	...

080060dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80060e4:	f000 fd0a 	bl	8006afc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80060e8:	4b2a      	ldr	r3, [pc, #168]	; (8006194 <prvAddNewTaskToReadyList+0xb8>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	4a29      	ldr	r2, [pc, #164]	; (8006194 <prvAddNewTaskToReadyList+0xb8>)
 80060f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80060f2:	4b29      	ldr	r3, [pc, #164]	; (8006198 <prvAddNewTaskToReadyList+0xbc>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d109      	bne.n	800610e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80060fa:	4a27      	ldr	r2, [pc, #156]	; (8006198 <prvAddNewTaskToReadyList+0xbc>)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006100:	4b24      	ldr	r3, [pc, #144]	; (8006194 <prvAddNewTaskToReadyList+0xb8>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d110      	bne.n	800612a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006108:	f000 fac8 	bl	800669c <prvInitialiseTaskLists>
 800610c:	e00d      	b.n	800612a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <prvAddNewTaskToReadyList+0xc0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d109      	bne.n	800612a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006116:	4b20      	ldr	r3, [pc, #128]	; (8006198 <prvAddNewTaskToReadyList+0xbc>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	429a      	cmp	r2, r3
 8006122:	d802      	bhi.n	800612a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006124:	4a1c      	ldr	r2, [pc, #112]	; (8006198 <prvAddNewTaskToReadyList+0xbc>)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800612a:	4b1d      	ldr	r3, [pc, #116]	; (80061a0 <prvAddNewTaskToReadyList+0xc4>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	3301      	adds	r3, #1
 8006130:	4a1b      	ldr	r2, [pc, #108]	; (80061a0 <prvAddNewTaskToReadyList+0xc4>)
 8006132:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	2201      	movs	r2, #1
 800613a:	409a      	lsls	r2, r3
 800613c:	4b19      	ldr	r3, [pc, #100]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4313      	orrs	r3, r2
 8006142:	4a18      	ldr	r2, [pc, #96]	; (80061a4 <prvAddNewTaskToReadyList+0xc8>)
 8006144:	6013      	str	r3, [r2, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800614a:	4613      	mov	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <prvAddNewTaskToReadyList+0xcc>)
 8006154:	441a      	add	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	3304      	adds	r3, #4
 800615a:	4619      	mov	r1, r3
 800615c:	4610      	mov	r0, r2
 800615e:	f7ff fe04 	bl	8005d6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006162:	f000 fcff 	bl	8006b64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006166:	4b0d      	ldr	r3, [pc, #52]	; (800619c <prvAddNewTaskToReadyList+0xc0>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d00e      	beq.n	800618c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800616e:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvAddNewTaskToReadyList+0xbc>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d207      	bcs.n	800618c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <prvAddNewTaskToReadyList+0xd0>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800618c:	bf00      	nop
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	200037f4 	.word	0x200037f4
 8006198:	200036f4 	.word	0x200036f4
 800619c:	20003800 	.word	0x20003800
 80061a0:	20003810 	.word	0x20003810
 80061a4:	200037fc 	.word	0x200037fc
 80061a8:	200036f8 	.word	0x200036f8
 80061ac:	e000ed04 	.word	0xe000ed04

080061b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d019      	beq.n	80061f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80061c2:	4b14      	ldr	r3, [pc, #80]	; (8006214 <vTaskDelay+0x64>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00c      	beq.n	80061e4 <vTaskDelay+0x34>
	__asm volatile
 80061ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ce:	b672      	cpsid	i
 80061d0:	f383 8811 	msr	BASEPRI, r3
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	f3bf 8f4f 	dsb	sy
 80061dc:	b662      	cpsie	i
 80061de:	60bb      	str	r3, [r7, #8]
}
 80061e0:	bf00      	nop
 80061e2:	e7fe      	b.n	80061e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80061e4:	f000 f87e 	bl	80062e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80061e8:	2100      	movs	r1, #0
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fb16 	bl	800681c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80061f0:	f000 f886 	bl	8006300 <xTaskResumeAll>
 80061f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d107      	bne.n	800620c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80061fc:	4b06      	ldr	r3, [pc, #24]	; (8006218 <vTaskDelay+0x68>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800620c:	bf00      	nop
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	2000381c 	.word	0x2000381c
 8006218:	e000ed04 	.word	0xe000ed04

0800621c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b08a      	sub	sp, #40	; 0x28
 8006220:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006226:	2300      	movs	r3, #0
 8006228:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800622a:	463a      	mov	r2, r7
 800622c:	1d39      	adds	r1, r7, #4
 800622e:	f107 0308 	add.w	r3, r7, #8
 8006232:	4618      	mov	r0, r3
 8006234:	f7fa f9c6 	bl	80005c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	9202      	str	r2, [sp, #8]
 8006240:	9301      	str	r3, [sp, #4]
 8006242:	2300      	movs	r3, #0
 8006244:	9300      	str	r3, [sp, #0]
 8006246:	2300      	movs	r3, #0
 8006248:	460a      	mov	r2, r1
 800624a:	4920      	ldr	r1, [pc, #128]	; (80062cc <vTaskStartScheduler+0xb0>)
 800624c:	4820      	ldr	r0, [pc, #128]	; (80062d0 <vTaskStartScheduler+0xb4>)
 800624e:	f7ff fe13 	bl	8005e78 <xTaskCreateStatic>
 8006252:	4603      	mov	r3, r0
 8006254:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <vTaskStartScheduler+0xb8>)
 8006256:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006258:	4b1e      	ldr	r3, [pc, #120]	; (80062d4 <vTaskStartScheduler+0xb8>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d002      	beq.n	8006266 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006260:	2301      	movs	r3, #1
 8006262:	617b      	str	r3, [r7, #20]
 8006264:	e001      	b.n	800626a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006266:	2300      	movs	r3, #0
 8006268:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	2b01      	cmp	r3, #1
 800626e:	d118      	bne.n	80062a2 <vTaskStartScheduler+0x86>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006274:	b672      	cpsid	i
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	b662      	cpsie	i
 8006284:	613b      	str	r3, [r7, #16]
}
 8006286:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006288:	4b13      	ldr	r3, [pc, #76]	; (80062d8 <vTaskStartScheduler+0xbc>)
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006290:	4b12      	ldr	r3, [pc, #72]	; (80062dc <vTaskStartScheduler+0xc0>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006296:	4b12      	ldr	r3, [pc, #72]	; (80062e0 <vTaskStartScheduler+0xc4>)
 8006298:	2200      	movs	r2, #0
 800629a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800629c:	f000 fbb0 	bl	8006a00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80062a0:	e010      	b.n	80062c4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d10c      	bne.n	80062c4 <vTaskStartScheduler+0xa8>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	60fb      	str	r3, [r7, #12]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <vTaskStartScheduler+0xa6>
}
 80062c4:	bf00      	nop
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	08007aa8 	.word	0x08007aa8
 80062d0:	0800666d 	.word	0x0800666d
 80062d4:	20003818 	.word	0x20003818
 80062d8:	20003814 	.word	0x20003814
 80062dc:	20003800 	.word	0x20003800
 80062e0:	200037f8 	.word	0x200037f8

080062e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80062e8:	4b04      	ldr	r3, [pc, #16]	; (80062fc <vTaskSuspendAll+0x18>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3301      	adds	r3, #1
 80062ee:	4a03      	ldr	r2, [pc, #12]	; (80062fc <vTaskSuspendAll+0x18>)
 80062f0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80062f2:	bf00      	nop
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	2000381c 	.word	0x2000381c

08006300 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006306:	2300      	movs	r3, #0
 8006308:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800630a:	2300      	movs	r3, #0
 800630c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800630e:	4b42      	ldr	r3, [pc, #264]	; (8006418 <xTaskResumeAll+0x118>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10c      	bne.n	8006330 <xTaskResumeAll+0x30>
	__asm volatile
 8006316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800631a:	b672      	cpsid	i
 800631c:	f383 8811 	msr	BASEPRI, r3
 8006320:	f3bf 8f6f 	isb	sy
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	b662      	cpsie	i
 800632a:	603b      	str	r3, [r7, #0]
}
 800632c:	bf00      	nop
 800632e:	e7fe      	b.n	800632e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006330:	f000 fbe4 	bl	8006afc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006334:	4b38      	ldr	r3, [pc, #224]	; (8006418 <xTaskResumeAll+0x118>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3b01      	subs	r3, #1
 800633a:	4a37      	ldr	r2, [pc, #220]	; (8006418 <xTaskResumeAll+0x118>)
 800633c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800633e:	4b36      	ldr	r3, [pc, #216]	; (8006418 <xTaskResumeAll+0x118>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d161      	bne.n	800640a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006346:	4b35      	ldr	r3, [pc, #212]	; (800641c <xTaskResumeAll+0x11c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d05d      	beq.n	800640a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800634e:	e02e      	b.n	80063ae <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <xTaskResumeAll+0x120>)
 8006352:	68db      	ldr	r3, [r3, #12]
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	3318      	adds	r3, #24
 800635c:	4618      	mov	r0, r3
 800635e:	f7ff fd61 	bl	8005e24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3304      	adds	r3, #4
 8006366:	4618      	mov	r0, r3
 8006368:	f7ff fd5c 	bl	8005e24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	2201      	movs	r2, #1
 8006372:	409a      	lsls	r2, r3
 8006374:	4b2b      	ldr	r3, [pc, #172]	; (8006424 <xTaskResumeAll+0x124>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4313      	orrs	r3, r2
 800637a:	4a2a      	ldr	r2, [pc, #168]	; (8006424 <xTaskResumeAll+0x124>)
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006382:	4613      	mov	r3, r2
 8006384:	009b      	lsls	r3, r3, #2
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4a27      	ldr	r2, [pc, #156]	; (8006428 <xTaskResumeAll+0x128>)
 800638c:	441a      	add	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	3304      	adds	r3, #4
 8006392:	4619      	mov	r1, r3
 8006394:	4610      	mov	r0, r2
 8006396:	f7ff fce8 	bl	8005d6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639e:	4b23      	ldr	r3, [pc, #140]	; (800642c <xTaskResumeAll+0x12c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d302      	bcc.n	80063ae <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80063a8:	4b21      	ldr	r3, [pc, #132]	; (8006430 <xTaskResumeAll+0x130>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ae:	4b1c      	ldr	r3, [pc, #112]	; (8006420 <xTaskResumeAll+0x120>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1cc      	bne.n	8006350 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063bc:	f000 fa0e 	bl	80067dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063c0:	4b1c      	ldr	r3, [pc, #112]	; (8006434 <xTaskResumeAll+0x134>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d010      	beq.n	80063ee <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80063cc:	f000 f836 	bl	800643c <xTaskIncrementTick>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d002      	beq.n	80063dc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80063d6:	4b16      	ldr	r3, [pc, #88]	; (8006430 <xTaskResumeAll+0x130>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	3b01      	subs	r3, #1
 80063e0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1f1      	bne.n	80063cc <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80063e8:	4b12      	ldr	r3, [pc, #72]	; (8006434 <xTaskResumeAll+0x134>)
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80063ee:	4b10      	ldr	r3, [pc, #64]	; (8006430 <xTaskResumeAll+0x130>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80063f6:	2301      	movs	r3, #1
 80063f8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80063fa:	4b0f      	ldr	r3, [pc, #60]	; (8006438 <xTaskResumeAll+0x138>)
 80063fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800640a:	f000 fbab 	bl	8006b64 <vPortExitCritical>

	return xAlreadyYielded;
 800640e:	68bb      	ldr	r3, [r7, #8]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3710      	adds	r7, #16
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	2000381c 	.word	0x2000381c
 800641c:	200037f4 	.word	0x200037f4
 8006420:	200037b4 	.word	0x200037b4
 8006424:	200037fc 	.word	0x200037fc
 8006428:	200036f8 	.word	0x200036f8
 800642c:	200036f4 	.word	0x200036f4
 8006430:	20003808 	.word	0x20003808
 8006434:	20003804 	.word	0x20003804
 8006438:	e000ed04 	.word	0xe000ed04

0800643c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b086      	sub	sp, #24
 8006440:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006442:	2300      	movs	r3, #0
 8006444:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006446:	4b4f      	ldr	r3, [pc, #316]	; (8006584 <xTaskIncrementTick+0x148>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	f040 808a 	bne.w	8006564 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006450:	4b4d      	ldr	r3, [pc, #308]	; (8006588 <xTaskIncrementTick+0x14c>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006458:	4a4b      	ldr	r2, [pc, #300]	; (8006588 <xTaskIncrementTick+0x14c>)
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d122      	bne.n	80064aa <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8006464:	4b49      	ldr	r3, [pc, #292]	; (800658c <xTaskIncrementTick+0x150>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <xTaskIncrementTick+0x4c>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	b672      	cpsid	i
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	b662      	cpsie	i
 8006482:	603b      	str	r3, [r7, #0]
}
 8006484:	bf00      	nop
 8006486:	e7fe      	b.n	8006486 <xTaskIncrementTick+0x4a>
 8006488:	4b40      	ldr	r3, [pc, #256]	; (800658c <xTaskIncrementTick+0x150>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	4b40      	ldr	r3, [pc, #256]	; (8006590 <xTaskIncrementTick+0x154>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a3e      	ldr	r2, [pc, #248]	; (800658c <xTaskIncrementTick+0x150>)
 8006494:	6013      	str	r3, [r2, #0]
 8006496:	4a3e      	ldr	r2, [pc, #248]	; (8006590 <xTaskIncrementTick+0x154>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6013      	str	r3, [r2, #0]
 800649c:	4b3d      	ldr	r3, [pc, #244]	; (8006594 <xTaskIncrementTick+0x158>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	3301      	adds	r3, #1
 80064a2:	4a3c      	ldr	r2, [pc, #240]	; (8006594 <xTaskIncrementTick+0x158>)
 80064a4:	6013      	str	r3, [r2, #0]
 80064a6:	f000 f999 	bl	80067dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064aa:	4b3b      	ldr	r3, [pc, #236]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d348      	bcc.n	8006546 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064b4:	4b35      	ldr	r3, [pc, #212]	; (800658c <xTaskIncrementTick+0x150>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064be:	4b36      	ldr	r3, [pc, #216]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064c0:	f04f 32ff 	mov.w	r2, #4294967295
 80064c4:	601a      	str	r2, [r3, #0]
					break;
 80064c6:	e03e      	b.n	8006546 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064c8:	4b30      	ldr	r3, [pc, #192]	; (800658c <xTaskIncrementTick+0x150>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d203      	bcs.n	80064e8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064e0:	4a2d      	ldr	r2, [pc, #180]	; (8006598 <xTaskIncrementTick+0x15c>)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80064e6:	e02e      	b.n	8006546 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fc99 	bl	8005e24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d004      	beq.n	8006504 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	3318      	adds	r3, #24
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff fc90 	bl	8005e24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	2201      	movs	r2, #1
 800650a:	409a      	lsls	r2, r3
 800650c:	4b23      	ldr	r3, [pc, #140]	; (800659c <xTaskIncrementTick+0x160>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4313      	orrs	r3, r2
 8006512:	4a22      	ldr	r2, [pc, #136]	; (800659c <xTaskIncrementTick+0x160>)
 8006514:	6013      	str	r3, [r2, #0]
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651a:	4613      	mov	r3, r2
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	4413      	add	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4a1f      	ldr	r2, [pc, #124]	; (80065a0 <xTaskIncrementTick+0x164>)
 8006524:	441a      	add	r2, r3
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	3304      	adds	r3, #4
 800652a:	4619      	mov	r1, r3
 800652c:	4610      	mov	r0, r2
 800652e:	f7ff fc1c 	bl	8005d6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006536:	4b1b      	ldr	r3, [pc, #108]	; (80065a4 <xTaskIncrementTick+0x168>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	429a      	cmp	r2, r3
 800653e:	d3b9      	bcc.n	80064b4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006544:	e7b6      	b.n	80064b4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006546:	4b17      	ldr	r3, [pc, #92]	; (80065a4 <xTaskIncrementTick+0x168>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800654c:	4914      	ldr	r1, [pc, #80]	; (80065a0 <xTaskIncrementTick+0x164>)
 800654e:	4613      	mov	r3, r2
 8006550:	009b      	lsls	r3, r3, #2
 8006552:	4413      	add	r3, r2
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	440b      	add	r3, r1
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d907      	bls.n	800656e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
 8006562:	e004      	b.n	800656e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8006564:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xTaskIncrementTick+0x16c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <xTaskIncrementTick+0x16c>)
 800656c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800656e:	4b0f      	ldr	r3, [pc, #60]	; (80065ac <xTaskIncrementTick+0x170>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d001      	beq.n	800657a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8006576:	2301      	movs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800657a:	697b      	ldr	r3, [r7, #20]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3718      	adds	r7, #24
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	2000381c 	.word	0x2000381c
 8006588:	200037f8 	.word	0x200037f8
 800658c:	200037ac 	.word	0x200037ac
 8006590:	200037b0 	.word	0x200037b0
 8006594:	2000380c 	.word	0x2000380c
 8006598:	20003814 	.word	0x20003814
 800659c:	200037fc 	.word	0x200037fc
 80065a0:	200036f8 	.word	0x200036f8
 80065a4:	200036f4 	.word	0x200036f4
 80065a8:	20003804 	.word	0x20003804
 80065ac:	20003808 	.word	0x20003808

080065b0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065b6:	4b28      	ldr	r3, [pc, #160]	; (8006658 <vTaskSwitchContext+0xa8>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d003      	beq.n	80065c6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065be:	4b27      	ldr	r3, [pc, #156]	; (800665c <vTaskSwitchContext+0xac>)
 80065c0:	2201      	movs	r2, #1
 80065c2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065c4:	e041      	b.n	800664a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80065c6:	4b25      	ldr	r3, [pc, #148]	; (800665c <vTaskSwitchContext+0xac>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065cc:	4b24      	ldr	r3, [pc, #144]	; (8006660 <vTaskSwitchContext+0xb0>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	fab3 f383 	clz	r3, r3
 80065d8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80065da:	7afb      	ldrb	r3, [r7, #11]
 80065dc:	f1c3 031f 	rsb	r3, r3, #31
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	4920      	ldr	r1, [pc, #128]	; (8006664 <vTaskSwitchContext+0xb4>)
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4613      	mov	r3, r2
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	4413      	add	r3, r2
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	440b      	add	r3, r1
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d10c      	bne.n	8006610 <vTaskSwitchContext+0x60>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	b672      	cpsid	i
 80065fc:	f383 8811 	msr	BASEPRI, r3
 8006600:	f3bf 8f6f 	isb	sy
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	b662      	cpsie	i
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
 800660e:	e7fe      	b.n	800660e <vTaskSwitchContext+0x5e>
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	4613      	mov	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	4413      	add	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4a12      	ldr	r2, [pc, #72]	; (8006664 <vTaskSwitchContext+0xb4>)
 800661c:	4413      	add	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	685a      	ldr	r2, [r3, #4]
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	3308      	adds	r3, #8
 8006632:	429a      	cmp	r2, r3
 8006634:	d104      	bne.n	8006640 <vTaskSwitchContext+0x90>
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	4a08      	ldr	r2, [pc, #32]	; (8006668 <vTaskSwitchContext+0xb8>)
 8006648:	6013      	str	r3, [r2, #0]
}
 800664a:	bf00      	nop
 800664c:	371c      	adds	r7, #28
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2000381c 	.word	0x2000381c
 800665c:	20003808 	.word	0x20003808
 8006660:	200037fc 	.word	0x200037fc
 8006664:	200036f8 	.word	0x200036f8
 8006668:	200036f4 	.word	0x200036f4

0800666c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006674:	f000 f852 	bl	800671c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <prvIdleTask+0x28>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d9f9      	bls.n	8006674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <prvIdleTask+0x2c>)
 8006682:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006686:	601a      	str	r2, [r3, #0]
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006690:	e7f0      	b.n	8006674 <prvIdleTask+0x8>
 8006692:	bf00      	nop
 8006694:	200036f8 	.word	0x200036f8
 8006698:	e000ed04 	.word	0xe000ed04

0800669c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066a2:	2300      	movs	r3, #0
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	e00c      	b.n	80066c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4a12      	ldr	r2, [pc, #72]	; (80066fc <prvInitialiseTaskLists+0x60>)
 80066b4:	4413      	add	r3, r2
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fb2a 	bl	8005d10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	3301      	adds	r3, #1
 80066c0:	607b      	str	r3, [r7, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b06      	cmp	r3, #6
 80066c6:	d9ef      	bls.n	80066a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066c8:	480d      	ldr	r0, [pc, #52]	; (8006700 <prvInitialiseTaskLists+0x64>)
 80066ca:	f7ff fb21 	bl	8005d10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066ce:	480d      	ldr	r0, [pc, #52]	; (8006704 <prvInitialiseTaskLists+0x68>)
 80066d0:	f7ff fb1e 	bl	8005d10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066d4:	480c      	ldr	r0, [pc, #48]	; (8006708 <prvInitialiseTaskLists+0x6c>)
 80066d6:	f7ff fb1b 	bl	8005d10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066da:	480c      	ldr	r0, [pc, #48]	; (800670c <prvInitialiseTaskLists+0x70>)
 80066dc:	f7ff fb18 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066e0:	480b      	ldr	r0, [pc, #44]	; (8006710 <prvInitialiseTaskLists+0x74>)
 80066e2:	f7ff fb15 	bl	8005d10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066e6:	4b0b      	ldr	r3, [pc, #44]	; (8006714 <prvInitialiseTaskLists+0x78>)
 80066e8:	4a05      	ldr	r2, [pc, #20]	; (8006700 <prvInitialiseTaskLists+0x64>)
 80066ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066ec:	4b0a      	ldr	r3, [pc, #40]	; (8006718 <prvInitialiseTaskLists+0x7c>)
 80066ee:	4a05      	ldr	r2, [pc, #20]	; (8006704 <prvInitialiseTaskLists+0x68>)
 80066f0:	601a      	str	r2, [r3, #0]
}
 80066f2:	bf00      	nop
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	200036f8 	.word	0x200036f8
 8006700:	20003784 	.word	0x20003784
 8006704:	20003798 	.word	0x20003798
 8006708:	200037b4 	.word	0x200037b4
 800670c:	200037c8 	.word	0x200037c8
 8006710:	200037e0 	.word	0x200037e0
 8006714:	200037ac 	.word	0x200037ac
 8006718:	200037b0 	.word	0x200037b0

0800671c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006722:	e019      	b.n	8006758 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006724:	f000 f9ea 	bl	8006afc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006728:	4b10      	ldr	r3, [pc, #64]	; (800676c <prvCheckTasksWaitingTermination+0x50>)
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff fb75 	bl	8005e24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800673a:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <prvCheckTasksWaitingTermination+0x54>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3b01      	subs	r3, #1
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <prvCheckTasksWaitingTermination+0x54>)
 8006742:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	3b01      	subs	r3, #1
 800674a:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 800674c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800674e:	f000 fa09 	bl	8006b64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f810 	bl	8006778 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <prvCheckTasksWaitingTermination+0x58>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e1      	bne.n	8006724 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006760:	bf00      	nop
 8006762:	bf00      	nop
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}
 800676a:	bf00      	nop
 800676c:	200037c8 	.word	0x200037c8
 8006770:	200037f4 	.word	0x200037f4
 8006774:	200037dc 	.word	0x200037dc

08006778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006786:	2b00      	cmp	r3, #0
 8006788:	d108      	bne.n	800679c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800678e:	4618      	mov	r0, r3
 8006790:	f000 fb66 	bl	8006e60 <vPortFree>
				vPortFree( pxTCB );
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fb63 	bl	8006e60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800679a:	e01a      	b.n	80067d2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d103      	bne.n	80067ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 fb5a 	bl	8006e60 <vPortFree>
	}
 80067ac:	e011      	b.n	80067d2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d00c      	beq.n	80067d2 <prvDeleteTCB+0x5a>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	b672      	cpsid	i
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	b662      	cpsie	i
 80067cc:	60fb      	str	r3, [r7, #12]
}
 80067ce:	bf00      	nop
 80067d0:	e7fe      	b.n	80067d0 <prvDeleteTCB+0x58>
	}
 80067d2:	bf00      	nop
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
	...

080067dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067e2:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <prvResetNextTaskUnblockTime+0x38>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d104      	bne.n	80067f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067ec:	4b0a      	ldr	r3, [pc, #40]	; (8006818 <prvResetNextTaskUnblockTime+0x3c>)
 80067ee:	f04f 32ff 	mov.w	r2, #4294967295
 80067f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067f4:	e008      	b.n	8006808 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f6:	4b07      	ldr	r3, [pc, #28]	; (8006814 <prvResetNextTaskUnblockTime+0x38>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <prvResetNextTaskUnblockTime+0x3c>)
 8006806:	6013      	str	r3, [r2, #0]
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr
 8006814:	200037ac 	.word	0x200037ac
 8006818:	20003814 	.word	0x20003814

0800681c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	6078      	str	r0, [r7, #4]
 8006824:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006826:	4b29      	ldr	r3, [pc, #164]	; (80068cc <prvAddCurrentTaskToDelayedList+0xb0>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800682c:	4b28      	ldr	r3, [pc, #160]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3304      	adds	r3, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff faf6 	bl	8005e24 <uxListRemove>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d10b      	bne.n	8006856 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800683e:	4b24      	ldr	r3, [pc, #144]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006844:	2201      	movs	r2, #1
 8006846:	fa02 f303 	lsl.w	r3, r2, r3
 800684a:	43da      	mvns	r2, r3
 800684c:	4b21      	ldr	r3, [pc, #132]	; (80068d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4013      	ands	r3, r2
 8006852:	4a20      	ldr	r2, [pc, #128]	; (80068d4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006854:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d10a      	bne.n	8006874 <prvAddCurrentTaskToDelayedList+0x58>
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006864:	4b1a      	ldr	r3, [pc, #104]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3304      	adds	r3, #4
 800686a:	4619      	mov	r1, r3
 800686c:	481a      	ldr	r0, [pc, #104]	; (80068d8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800686e:	f7ff fa7c 	bl	8005d6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006872:	e026      	b.n	80068c2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800687c:	4b14      	ldr	r3, [pc, #80]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	429a      	cmp	r2, r3
 800688a:	d209      	bcs.n	80068a0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800688c:	4b13      	ldr	r3, [pc, #76]	; (80068dc <prvAddCurrentTaskToDelayedList+0xc0>)
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	4b0f      	ldr	r3, [pc, #60]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	3304      	adds	r3, #4
 8006896:	4619      	mov	r1, r3
 8006898:	4610      	mov	r0, r2
 800689a:	f7ff fa8a 	bl	8005db2 <vListInsert>
}
 800689e:	e010      	b.n	80068c2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068a0:	4b0f      	ldr	r3, [pc, #60]	; (80068e0 <prvAddCurrentTaskToDelayedList+0xc4>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4b0a      	ldr	r3, [pc, #40]	; (80068d0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3304      	adds	r3, #4
 80068aa:	4619      	mov	r1, r3
 80068ac:	4610      	mov	r0, r2
 80068ae:	f7ff fa80 	bl	8005db2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068b2:	4b0c      	ldr	r3, [pc, #48]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d202      	bcs.n	80068c2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80068bc:	4a09      	ldr	r2, [pc, #36]	; (80068e4 <prvAddCurrentTaskToDelayedList+0xc8>)
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6013      	str	r3, [r2, #0]
}
 80068c2:	bf00      	nop
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
 80068ca:	bf00      	nop
 80068cc:	200037f8 	.word	0x200037f8
 80068d0:	200036f4 	.word	0x200036f4
 80068d4:	200037fc 	.word	0x200037fc
 80068d8:	200037e0 	.word	0x200037e0
 80068dc:	200037b0 	.word	0x200037b0
 80068e0:	200037ac 	.word	0x200037ac
 80068e4:	20003814 	.word	0x20003814

080068e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	3b04      	subs	r3, #4
 80068f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006900:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3b04      	subs	r3, #4
 8006906:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	f023 0201 	bic.w	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3b04      	subs	r3, #4
 8006916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006918:	4a0c      	ldr	r2, [pc, #48]	; (800694c <pxPortInitialiseStack+0x64>)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	3b14      	subs	r3, #20
 8006922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	3b04      	subs	r3, #4
 800692e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f06f 0202 	mvn.w	r2, #2
 8006936:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	3b20      	subs	r3, #32
 800693c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	08006951 	.word	0x08006951

08006950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006956:	2300      	movs	r3, #0
 8006958:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800695a:	4b14      	ldr	r3, [pc, #80]	; (80069ac <prvTaskExitError+0x5c>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006962:	d00c      	beq.n	800697e <prvTaskExitError+0x2e>
	__asm volatile
 8006964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006968:	b672      	cpsid	i
 800696a:	f383 8811 	msr	BASEPRI, r3
 800696e:	f3bf 8f6f 	isb	sy
 8006972:	f3bf 8f4f 	dsb	sy
 8006976:	b662      	cpsie	i
 8006978:	60fb      	str	r3, [r7, #12]
}
 800697a:	bf00      	nop
 800697c:	e7fe      	b.n	800697c <prvTaskExitError+0x2c>
	__asm volatile
 800697e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006982:	b672      	cpsid	i
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	b662      	cpsie	i
 8006992:	60bb      	str	r3, [r7, #8]
}
 8006994:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006996:	bf00      	nop
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0fc      	beq.n	8006998 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	2000001c 	.word	0x2000001c

080069b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <pxCurrentTCBConst2>)
 80069b2:	6819      	ldr	r1, [r3, #0]
 80069b4:	6808      	ldr	r0, [r1, #0]
 80069b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ba:	f380 8809 	msr	PSP, r0
 80069be:	f3bf 8f6f 	isb	sy
 80069c2:	f04f 0000 	mov.w	r0, #0
 80069c6:	f380 8811 	msr	BASEPRI, r0
 80069ca:	4770      	bx	lr
 80069cc:	f3af 8000 	nop.w

080069d0 <pxCurrentTCBConst2>:
 80069d0:	200036f4 	.word	0x200036f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80069d4:	bf00      	nop
 80069d6:	bf00      	nop

080069d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80069d8:	4808      	ldr	r0, [pc, #32]	; (80069fc <prvPortStartFirstTask+0x24>)
 80069da:	6800      	ldr	r0, [r0, #0]
 80069dc:	6800      	ldr	r0, [r0, #0]
 80069de:	f380 8808 	msr	MSP, r0
 80069e2:	f04f 0000 	mov.w	r0, #0
 80069e6:	f380 8814 	msr	CONTROL, r0
 80069ea:	b662      	cpsie	i
 80069ec:	b661      	cpsie	f
 80069ee:	f3bf 8f4f 	dsb	sy
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	df00      	svc	0
 80069f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80069fa:	bf00      	nop
 80069fc:	e000ed08 	.word	0xe000ed08

08006a00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a06:	4b37      	ldr	r3, [pc, #220]	; (8006ae4 <xPortStartScheduler+0xe4>)
 8006a08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	22ff      	movs	r2, #255	; 0xff
 8006a16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a20:	78fb      	ldrb	r3, [r7, #3]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a28:	b2da      	uxtb	r2, r3
 8006a2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ae8 <xPortStartScheduler+0xe8>)
 8006a2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a2e:	4b2f      	ldr	r3, [pc, #188]	; (8006aec <xPortStartScheduler+0xec>)
 8006a30:	2207      	movs	r2, #7
 8006a32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a34:	e009      	b.n	8006a4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a36:	4b2d      	ldr	r3, [pc, #180]	; (8006aec <xPortStartScheduler+0xec>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	4a2b      	ldr	r2, [pc, #172]	; (8006aec <xPortStartScheduler+0xec>)
 8006a3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006a40:	78fb      	ldrb	r3, [r7, #3]
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a4a:	78fb      	ldrb	r3, [r7, #3]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a52:	2b80      	cmp	r3, #128	; 0x80
 8006a54:	d0ef      	beq.n	8006a36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006a56:	4b25      	ldr	r3, [pc, #148]	; (8006aec <xPortStartScheduler+0xec>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1c3 0307 	rsb	r3, r3, #7
 8006a5e:	2b04      	cmp	r3, #4
 8006a60:	d00c      	beq.n	8006a7c <xPortStartScheduler+0x7c>
	__asm volatile
 8006a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a66:	b672      	cpsid	i
 8006a68:	f383 8811 	msr	BASEPRI, r3
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	b662      	cpsie	i
 8006a76:	60bb      	str	r3, [r7, #8]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <xPortStartScheduler+0xec>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	4a1a      	ldr	r2, [pc, #104]	; (8006aec <xPortStartScheduler+0xec>)
 8006a84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006a86:	4b19      	ldr	r3, [pc, #100]	; (8006aec <xPortStartScheduler+0xec>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a8e:	4a17      	ldr	r2, [pc, #92]	; (8006aec <xPortStartScheduler+0xec>)
 8006a90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006a9a:	4b15      	ldr	r3, [pc, #84]	; (8006af0 <xPortStartScheduler+0xf0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a14      	ldr	r2, [pc, #80]	; (8006af0 <xPortStartScheduler+0xf0>)
 8006aa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006aa6:	4b12      	ldr	r3, [pc, #72]	; (8006af0 <xPortStartScheduler+0xf0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a11      	ldr	r2, [pc, #68]	; (8006af0 <xPortStartScheduler+0xf0>)
 8006aac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006ab0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006ab2:	f000 f8dd 	bl	8006c70 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006ab6:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <xPortStartScheduler+0xf4>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006abc:	f000 f8fc 	bl	8006cb8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <xPortStartScheduler+0xf8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <xPortStartScheduler+0xf8>)
 8006ac6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006aca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006acc:	f7ff ff84 	bl	80069d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ad0:	f7ff fd6e 	bl	80065b0 <vTaskSwitchContext>
	prvTaskExitError();
 8006ad4:	f7ff ff3c 	bl	8006950 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3710      	adds	r7, #16
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	e000e400 	.word	0xe000e400
 8006ae8:	20003820 	.word	0x20003820
 8006aec:	20003824 	.word	0x20003824
 8006af0:	e000ed20 	.word	0xe000ed20
 8006af4:	2000001c 	.word	0x2000001c
 8006af8:	e000ef34 	.word	0xe000ef34

08006afc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
	__asm volatile
 8006b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b06:	b672      	cpsid	i
 8006b08:	f383 8811 	msr	BASEPRI, r3
 8006b0c:	f3bf 8f6f 	isb	sy
 8006b10:	f3bf 8f4f 	dsb	sy
 8006b14:	b662      	cpsie	i
 8006b16:	607b      	str	r3, [r7, #4]
}
 8006b18:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b1a:	4b10      	ldr	r3, [pc, #64]	; (8006b5c <vPortEnterCritical+0x60>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	3301      	adds	r3, #1
 8006b20:	4a0e      	ldr	r2, [pc, #56]	; (8006b5c <vPortEnterCritical+0x60>)
 8006b22:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b24:	4b0d      	ldr	r3, [pc, #52]	; (8006b5c <vPortEnterCritical+0x60>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	d111      	bne.n	8006b50 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b2c:	4b0c      	ldr	r3, [pc, #48]	; (8006b60 <vPortEnterCritical+0x64>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d00c      	beq.n	8006b50 <vPortEnterCritical+0x54>
	__asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3a:	b672      	cpsid	i
 8006b3c:	f383 8811 	msr	BASEPRI, r3
 8006b40:	f3bf 8f6f 	isb	sy
 8006b44:	f3bf 8f4f 	dsb	sy
 8006b48:	b662      	cpsie	i
 8006b4a:	603b      	str	r3, [r7, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <vPortEnterCritical+0x52>
	}
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr
 8006b5c:	2000001c 	.word	0x2000001c
 8006b60:	e000ed04 	.word	0xe000ed04

08006b64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006b64:	b480      	push	{r7}
 8006b66:	b083      	sub	sp, #12
 8006b68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006b6a:	4b13      	ldr	r3, [pc, #76]	; (8006bb8 <vPortExitCritical+0x54>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <vPortExitCritical+0x28>
	__asm volatile
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	b672      	cpsid	i
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	b662      	cpsie	i
 8006b86:	607b      	str	r3, [r7, #4]
}
 8006b88:	bf00      	nop
 8006b8a:	e7fe      	b.n	8006b8a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <vPortExitCritical+0x54>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <vPortExitCritical+0x54>)
 8006b94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006b96:	4b08      	ldr	r3, [pc, #32]	; (8006bb8 <vPortExitCritical+0x54>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <vPortExitCritical+0x46>
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ba8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	2000001c 	.word	0x2000001c
 8006bbc:	00000000 	.word	0x00000000

08006bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006bc0:	f3ef 8009 	mrs	r0, PSP
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	4b15      	ldr	r3, [pc, #84]	; (8006c20 <pxCurrentTCBConst>)
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	f01e 0f10 	tst.w	lr, #16
 8006bd0:	bf08      	it	eq
 8006bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bda:	6010      	str	r0, [r2, #0]
 8006bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006be4:	b672      	cpsid	i
 8006be6:	f380 8811 	msr	BASEPRI, r0
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	f3bf 8f6f 	isb	sy
 8006bf2:	b662      	cpsie	i
 8006bf4:	f7ff fcdc 	bl	80065b0 <vTaskSwitchContext>
 8006bf8:	f04f 0000 	mov.w	r0, #0
 8006bfc:	f380 8811 	msr	BASEPRI, r0
 8006c00:	bc09      	pop	{r0, r3}
 8006c02:	6819      	ldr	r1, [r3, #0]
 8006c04:	6808      	ldr	r0, [r1, #0]
 8006c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c0a:	f01e 0f10 	tst.w	lr, #16
 8006c0e:	bf08      	it	eq
 8006c10:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c14:	f380 8809 	msr	PSP, r0
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop

08006c20 <pxCurrentTCBConst>:
 8006c20:	200036f4 	.word	0x200036f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop

08006c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	b082      	sub	sp, #8
 8006c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	b672      	cpsid	i
 8006c34:	f383 8811 	msr	BASEPRI, r3
 8006c38:	f3bf 8f6f 	isb	sy
 8006c3c:	f3bf 8f4f 	dsb	sy
 8006c40:	b662      	cpsie	i
 8006c42:	607b      	str	r3, [r7, #4]
}
 8006c44:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006c46:	f7ff fbf9 	bl	800643c <xTaskIncrementTick>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d003      	beq.n	8006c58 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006c50:	4b06      	ldr	r3, [pc, #24]	; (8006c6c <SysTick_Handler+0x44>)
 8006c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c56:	601a      	str	r2, [r3, #0]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	f383 8811 	msr	BASEPRI, r3
}
 8006c62:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006c74:	4b0b      	ldr	r3, [pc, #44]	; (8006ca4 <vPortSetupTimerInterrupt+0x34>)
 8006c76:	2200      	movs	r2, #0
 8006c78:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006c7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <vPortSetupTimerInterrupt+0x38>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <vPortSetupTimerInterrupt+0x3c>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a0a      	ldr	r2, [pc, #40]	; (8006cb0 <vPortSetupTimerInterrupt+0x40>)
 8006c86:	fba2 2303 	umull	r2, r3, r2, r3
 8006c8a:	099b      	lsrs	r3, r3, #6
 8006c8c:	4a09      	ldr	r2, [pc, #36]	; (8006cb4 <vPortSetupTimerInterrupt+0x44>)
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006c92:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <vPortSetupTimerInterrupt+0x34>)
 8006c94:	2207      	movs	r2, #7
 8006c96:	601a      	str	r2, [r3, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	e000e010 	.word	0xe000e010
 8006ca8:	e000e018 	.word	0xe000e018
 8006cac:	20000010 	.word	0x20000010
 8006cb0:	10624dd3 	.word	0x10624dd3
 8006cb4:	e000e014 	.word	0xe000e014

08006cb8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006cb8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006cc8 <vPortEnableVFP+0x10>
 8006cbc:	6801      	ldr	r1, [r0, #0]
 8006cbe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006cc2:	6001      	str	r1, [r0, #0]
 8006cc4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006cc6:	bf00      	nop
 8006cc8:	e000ed88 	.word	0xe000ed88

08006ccc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	; 0x28
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006cd8:	f7ff fb04 	bl	80062e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006cdc:	4b5b      	ldr	r3, [pc, #364]	; (8006e4c <pvPortMalloc+0x180>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d101      	bne.n	8006ce8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ce4:	f000 f91a 	bl	8006f1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ce8:	4b59      	ldr	r3, [pc, #356]	; (8006e50 <pvPortMalloc+0x184>)
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	4013      	ands	r3, r2
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f040 8092 	bne.w	8006e1a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d01f      	beq.n	8006d3c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006cfc:	2208      	movs	r2, #8
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4413      	add	r3, r2
 8006d02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0307 	and.w	r3, r3, #7
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f023 0307 	bic.w	r3, r3, #7
 8006d14:	3308      	adds	r3, #8
 8006d16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d00c      	beq.n	8006d3c <pvPortMalloc+0x70>
	__asm volatile
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	b672      	cpsid	i
 8006d28:	f383 8811 	msr	BASEPRI, r3
 8006d2c:	f3bf 8f6f 	isb	sy
 8006d30:	f3bf 8f4f 	dsb	sy
 8006d34:	b662      	cpsie	i
 8006d36:	617b      	str	r3, [r7, #20]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d06b      	beq.n	8006e1a <pvPortMalloc+0x14e>
 8006d42:	4b44      	ldr	r3, [pc, #272]	; (8006e54 <pvPortMalloc+0x188>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d866      	bhi.n	8006e1a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006d4c:	4b42      	ldr	r3, [pc, #264]	; (8006e58 <pvPortMalloc+0x18c>)
 8006d4e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006d50:	4b41      	ldr	r3, [pc, #260]	; (8006e58 <pvPortMalloc+0x18c>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d56:	e004      	b.n	8006d62 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d903      	bls.n	8006d74 <pvPortMalloc+0xa8>
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1f1      	bne.n	8006d58 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006d74:	4b35      	ldr	r3, [pc, #212]	; (8006e4c <pvPortMalloc+0x180>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	d04d      	beq.n	8006e1a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2208      	movs	r2, #8
 8006d84:	4413      	add	r3, r2
 8006d86:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	685a      	ldr	r2, [r3, #4]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	1ad2      	subs	r2, r2, r3
 8006d98:	2308      	movs	r3, #8
 8006d9a:	005b      	lsls	r3, r3, #1
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d921      	bls.n	8006de4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006da0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	4413      	add	r3, r2
 8006da6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	f003 0307 	and.w	r3, r3, #7
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <pvPortMalloc+0x100>
	__asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db6:	b672      	cpsid	i
 8006db8:	f383 8811 	msr	BASEPRI, r3
 8006dbc:	f3bf 8f6f 	isb	sy
 8006dc0:	f3bf 8f4f 	dsb	sy
 8006dc4:	b662      	cpsie	i
 8006dc6:	613b      	str	r3, [r7, #16]
}
 8006dc8:	bf00      	nop
 8006dca:	e7fe      	b.n	8006dca <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	1ad2      	subs	r2, r2, r3
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006dde:	69b8      	ldr	r0, [r7, #24]
 8006de0:	f000 f900 	bl	8006fe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006de4:	4b1b      	ldr	r3, [pc, #108]	; (8006e54 <pvPortMalloc+0x188>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	4a19      	ldr	r2, [pc, #100]	; (8006e54 <pvPortMalloc+0x188>)
 8006df0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006df2:	4b18      	ldr	r3, [pc, #96]	; (8006e54 <pvPortMalloc+0x188>)
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b19      	ldr	r3, [pc, #100]	; (8006e5c <pvPortMalloc+0x190>)
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	d203      	bcs.n	8006e06 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006dfe:	4b15      	ldr	r3, [pc, #84]	; (8006e54 <pvPortMalloc+0x188>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a16      	ldr	r2, [pc, #88]	; (8006e5c <pvPortMalloc+0x190>)
 8006e04:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e08:	685a      	ldr	r2, [r3, #4]
 8006e0a:	4b11      	ldr	r3, [pc, #68]	; (8006e50 <pvPortMalloc+0x184>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	431a      	orrs	r2, r3
 8006e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e12:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e16:	2200      	movs	r2, #0
 8006e18:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e1a:	f7ff fa71 	bl	8006300 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d00c      	beq.n	8006e42 <pvPortMalloc+0x176>
	__asm volatile
 8006e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e2c:	b672      	cpsid	i
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	b662      	cpsie	i
 8006e3c:	60fb      	str	r3, [r7, #12]
}
 8006e3e:	bf00      	nop
 8006e40:	e7fe      	b.n	8006e40 <pvPortMalloc+0x174>
	return pvReturn;
 8006e42:	69fb      	ldr	r3, [r7, #28]
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3728      	adds	r7, #40	; 0x28
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	2004cc10 	.word	0x2004cc10
 8006e50:	2004cc1c 	.word	0x2004cc1c
 8006e54:	2004cc14 	.word	0x2004cc14
 8006e58:	2004cc08 	.word	0x2004cc08
 8006e5c:	2004cc18 	.word	0x2004cc18

08006e60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b086      	sub	sp, #24
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d04c      	beq.n	8006f0c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006e72:	2308      	movs	r3, #8
 8006e74:	425b      	negs	r3, r3
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	685a      	ldr	r2, [r3, #4]
 8006e84:	4b23      	ldr	r3, [pc, #140]	; (8006f14 <vPortFree+0xb4>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10c      	bne.n	8006ea8 <vPortFree+0x48>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	b672      	cpsid	i
 8006e94:	f383 8811 	msr	BASEPRI, r3
 8006e98:	f3bf 8f6f 	isb	sy
 8006e9c:	f3bf 8f4f 	dsb	sy
 8006ea0:	b662      	cpsie	i
 8006ea2:	60fb      	str	r3, [r7, #12]
}
 8006ea4:	bf00      	nop
 8006ea6:	e7fe      	b.n	8006ea6 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d00c      	beq.n	8006eca <vPortFree+0x6a>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eb4:	b672      	cpsid	i
 8006eb6:	f383 8811 	msr	BASEPRI, r3
 8006eba:	f3bf 8f6f 	isb	sy
 8006ebe:	f3bf 8f4f 	dsb	sy
 8006ec2:	b662      	cpsie	i
 8006ec4:	60bb      	str	r3, [r7, #8]
}
 8006ec6:	bf00      	nop
 8006ec8:	e7fe      	b.n	8006ec8 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	4b11      	ldr	r3, [pc, #68]	; (8006f14 <vPortFree+0xb4>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4013      	ands	r3, r2
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d019      	beq.n	8006f0c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d115      	bne.n	8006f0c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4b0b      	ldr	r3, [pc, #44]	; (8006f14 <vPortFree+0xb4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	43db      	mvns	r3, r3
 8006eea:	401a      	ands	r2, r3
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006ef0:	f7ff f9f8 	bl	80062e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <vPortFree+0xb8>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4413      	add	r3, r2
 8006efe:	4a06      	ldr	r2, [pc, #24]	; (8006f18 <vPortFree+0xb8>)
 8006f00:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f02:	6938      	ldr	r0, [r7, #16]
 8006f04:	f000 f86e 	bl	8006fe4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f08:	f7ff f9fa 	bl	8006300 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f0c:	bf00      	nop
 8006f0e:	3718      	adds	r7, #24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}
 8006f14:	2004cc1c 	.word	0x2004cc1c
 8006f18:	2004cc14 	.word	0x2004cc14

08006f1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f22:	4b29      	ldr	r3, [pc, #164]	; (8006fc8 <prvHeapInit+0xac>)
 8006f24:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f26:	4b29      	ldr	r3, [pc, #164]	; (8006fcc <prvHeapInit+0xb0>)
 8006f28:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00c      	beq.n	8006f4e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	3307      	adds	r3, #7
 8006f38:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f023 0307 	bic.w	r3, r3, #7
 8006f40:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	4a20      	ldr	r2, [pc, #128]	; (8006fcc <prvHeapInit+0xb0>)
 8006f4a:	4413      	add	r3, r2
 8006f4c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006f52:	4a1f      	ldr	r2, [pc, #124]	; (8006fd0 <prvHeapInit+0xb4>)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006f58:	4b1d      	ldr	r3, [pc, #116]	; (8006fd0 <prvHeapInit+0xb4>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	68ba      	ldr	r2, [r7, #8]
 8006f62:	4413      	add	r3, r2
 8006f64:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006f66:	2208      	movs	r2, #8
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	1a9b      	subs	r3, r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f023 0307 	bic.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4a16      	ldr	r2, [pc, #88]	; (8006fd4 <prvHeapInit+0xb8>)
 8006f7a:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006f7c:	4b15      	ldr	r3, [pc, #84]	; (8006fd4 <prvHeapInit+0xb8>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2200      	movs	r2, #0
 8006f82:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006f84:	4b13      	ldr	r3, [pc, #76]	; (8006fd4 <prvHeapInit+0xb8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	1ad2      	subs	r2, r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006f9a:	4b0e      	ldr	r3, [pc, #56]	; (8006fd4 <prvHeapInit+0xb8>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	4a0c      	ldr	r2, [pc, #48]	; (8006fd8 <prvHeapInit+0xbc>)
 8006fa8:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4a0b      	ldr	r2, [pc, #44]	; (8006fdc <prvHeapInit+0xc0>)
 8006fb0:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	; (8006fe0 <prvHeapInit+0xc4>)
 8006fb4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006fb8:	601a      	str	r2, [r3, #0]
}
 8006fba:	bf00      	nop
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	000493e0 	.word	0x000493e0
 8006fcc:	20003828 	.word	0x20003828
 8006fd0:	2004cc08 	.word	0x2004cc08
 8006fd4:	2004cc10 	.word	0x2004cc10
 8006fd8:	2004cc18 	.word	0x2004cc18
 8006fdc:	2004cc14 	.word	0x2004cc14
 8006fe0:	2004cc1c 	.word	0x2004cc1c

08006fe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006fec:	4b28      	ldr	r3, [pc, #160]	; (8007090 <prvInsertBlockIntoFreeList+0xac>)
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e002      	b.n	8006ff8 <prvInsertBlockIntoFreeList+0x14>
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	429a      	cmp	r2, r3
 8007000:	d8f7      	bhi.n	8006ff2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	4413      	add	r3, r2
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	429a      	cmp	r2, r3
 8007012:	d108      	bne.n	8007026 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	685a      	ldr	r2, [r3, #4]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	441a      	add	r2, r3
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d118      	bne.n	800706c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b15      	ldr	r3, [pc, #84]	; (8007094 <prvInsertBlockIntoFreeList+0xb0>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	429a      	cmp	r2, r3
 8007044:	d00d      	beq.n	8007062 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	685a      	ldr	r2, [r3, #4]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	441a      	add	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	601a      	str	r2, [r3, #0]
 8007060:	e008      	b.n	8007074 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007062:	4b0c      	ldr	r3, [pc, #48]	; (8007094 <prvInsertBlockIntoFreeList+0xb0>)
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	601a      	str	r2, [r3, #0]
 800706a:	e003      	b.n	8007074 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	429a      	cmp	r2, r3
 800707a:	d002      	beq.n	8007082 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	687a      	ldr	r2, [r7, #4]
 8007080:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007082:	bf00      	nop
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	2004cc08 	.word	0x2004cc08
 8007094:	2004cc10 	.word	0x2004cc10

08007098 <__errno>:
 8007098:	4b01      	ldr	r3, [pc, #4]	; (80070a0 <__errno+0x8>)
 800709a:	6818      	ldr	r0, [r3, #0]
 800709c:	4770      	bx	lr
 800709e:	bf00      	nop
 80070a0:	20000020 	.word	0x20000020

080070a4 <__libc_init_array>:
 80070a4:	b570      	push	{r4, r5, r6, lr}
 80070a6:	4d0d      	ldr	r5, [pc, #52]	; (80070dc <__libc_init_array+0x38>)
 80070a8:	4c0d      	ldr	r4, [pc, #52]	; (80070e0 <__libc_init_array+0x3c>)
 80070aa:	1b64      	subs	r4, r4, r5
 80070ac:	10a4      	asrs	r4, r4, #2
 80070ae:	2600      	movs	r6, #0
 80070b0:	42a6      	cmp	r6, r4
 80070b2:	d109      	bne.n	80070c8 <__libc_init_array+0x24>
 80070b4:	4d0b      	ldr	r5, [pc, #44]	; (80070e4 <__libc_init_array+0x40>)
 80070b6:	4c0c      	ldr	r4, [pc, #48]	; (80070e8 <__libc_init_array+0x44>)
 80070b8:	f000 fc8e 	bl	80079d8 <_init>
 80070bc:	1b64      	subs	r4, r4, r5
 80070be:	10a4      	asrs	r4, r4, #2
 80070c0:	2600      	movs	r6, #0
 80070c2:	42a6      	cmp	r6, r4
 80070c4:	d105      	bne.n	80070d2 <__libc_init_array+0x2e>
 80070c6:	bd70      	pop	{r4, r5, r6, pc}
 80070c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070cc:	4798      	blx	r3
 80070ce:	3601      	adds	r6, #1
 80070d0:	e7ee      	b.n	80070b0 <__libc_init_array+0xc>
 80070d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070d6:	4798      	blx	r3
 80070d8:	3601      	adds	r6, #1
 80070da:	e7f2      	b.n	80070c2 <__libc_init_array+0x1e>
 80070dc:	08007b0c 	.word	0x08007b0c
 80070e0:	08007b0c 	.word	0x08007b0c
 80070e4:	08007b0c 	.word	0x08007b0c
 80070e8:	08007b10 	.word	0x08007b10

080070ec <memcpy>:
 80070ec:	440a      	add	r2, r1
 80070ee:	4291      	cmp	r1, r2
 80070f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80070f4:	d100      	bne.n	80070f8 <memcpy+0xc>
 80070f6:	4770      	bx	lr
 80070f8:	b510      	push	{r4, lr}
 80070fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007102:	4291      	cmp	r1, r2
 8007104:	d1f9      	bne.n	80070fa <memcpy+0xe>
 8007106:	bd10      	pop	{r4, pc}

08007108 <memset>:
 8007108:	4402      	add	r2, r0
 800710a:	4603      	mov	r3, r0
 800710c:	4293      	cmp	r3, r2
 800710e:	d100      	bne.n	8007112 <memset+0xa>
 8007110:	4770      	bx	lr
 8007112:	f803 1b01 	strb.w	r1, [r3], #1
 8007116:	e7f9      	b.n	800710c <memset+0x4>

08007118 <siprintf>:
 8007118:	b40e      	push	{r1, r2, r3}
 800711a:	b500      	push	{lr}
 800711c:	b09c      	sub	sp, #112	; 0x70
 800711e:	ab1d      	add	r3, sp, #116	; 0x74
 8007120:	9002      	str	r0, [sp, #8]
 8007122:	9006      	str	r0, [sp, #24]
 8007124:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007128:	4809      	ldr	r0, [pc, #36]	; (8007150 <siprintf+0x38>)
 800712a:	9107      	str	r1, [sp, #28]
 800712c:	9104      	str	r1, [sp, #16]
 800712e:	4909      	ldr	r1, [pc, #36]	; (8007154 <siprintf+0x3c>)
 8007130:	f853 2b04 	ldr.w	r2, [r3], #4
 8007134:	9105      	str	r1, [sp, #20]
 8007136:	6800      	ldr	r0, [r0, #0]
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	a902      	add	r1, sp, #8
 800713c:	f000 f868 	bl	8007210 <_svfiprintf_r>
 8007140:	9b02      	ldr	r3, [sp, #8]
 8007142:	2200      	movs	r2, #0
 8007144:	701a      	strb	r2, [r3, #0]
 8007146:	b01c      	add	sp, #112	; 0x70
 8007148:	f85d eb04 	ldr.w	lr, [sp], #4
 800714c:	b003      	add	sp, #12
 800714e:	4770      	bx	lr
 8007150:	20000020 	.word	0x20000020
 8007154:	ffff0208 	.word	0xffff0208

08007158 <__ssputs_r>:
 8007158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800715c:	688e      	ldr	r6, [r1, #8]
 800715e:	429e      	cmp	r6, r3
 8007160:	4682      	mov	sl, r0
 8007162:	460c      	mov	r4, r1
 8007164:	4690      	mov	r8, r2
 8007166:	461f      	mov	r7, r3
 8007168:	d838      	bhi.n	80071dc <__ssputs_r+0x84>
 800716a:	898a      	ldrh	r2, [r1, #12]
 800716c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007170:	d032      	beq.n	80071d8 <__ssputs_r+0x80>
 8007172:	6825      	ldr	r5, [r4, #0]
 8007174:	6909      	ldr	r1, [r1, #16]
 8007176:	eba5 0901 	sub.w	r9, r5, r1
 800717a:	6965      	ldr	r5, [r4, #20]
 800717c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007180:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007184:	3301      	adds	r3, #1
 8007186:	444b      	add	r3, r9
 8007188:	106d      	asrs	r5, r5, #1
 800718a:	429d      	cmp	r5, r3
 800718c:	bf38      	it	cc
 800718e:	461d      	movcc	r5, r3
 8007190:	0553      	lsls	r3, r2, #21
 8007192:	d531      	bpl.n	80071f8 <__ssputs_r+0xa0>
 8007194:	4629      	mov	r1, r5
 8007196:	f000 fb55 	bl	8007844 <_malloc_r>
 800719a:	4606      	mov	r6, r0
 800719c:	b950      	cbnz	r0, 80071b4 <__ssputs_r+0x5c>
 800719e:	230c      	movs	r3, #12
 80071a0:	f8ca 3000 	str.w	r3, [sl]
 80071a4:	89a3      	ldrh	r3, [r4, #12]
 80071a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	f04f 30ff 	mov.w	r0, #4294967295
 80071b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071b4:	6921      	ldr	r1, [r4, #16]
 80071b6:	464a      	mov	r2, r9
 80071b8:	f7ff ff98 	bl	80070ec <memcpy>
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80071c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071c6:	81a3      	strh	r3, [r4, #12]
 80071c8:	6126      	str	r6, [r4, #16]
 80071ca:	6165      	str	r5, [r4, #20]
 80071cc:	444e      	add	r6, r9
 80071ce:	eba5 0509 	sub.w	r5, r5, r9
 80071d2:	6026      	str	r6, [r4, #0]
 80071d4:	60a5      	str	r5, [r4, #8]
 80071d6:	463e      	mov	r6, r7
 80071d8:	42be      	cmp	r6, r7
 80071da:	d900      	bls.n	80071de <__ssputs_r+0x86>
 80071dc:	463e      	mov	r6, r7
 80071de:	6820      	ldr	r0, [r4, #0]
 80071e0:	4632      	mov	r2, r6
 80071e2:	4641      	mov	r1, r8
 80071e4:	f000 faa8 	bl	8007738 <memmove>
 80071e8:	68a3      	ldr	r3, [r4, #8]
 80071ea:	1b9b      	subs	r3, r3, r6
 80071ec:	60a3      	str	r3, [r4, #8]
 80071ee:	6823      	ldr	r3, [r4, #0]
 80071f0:	4433      	add	r3, r6
 80071f2:	6023      	str	r3, [r4, #0]
 80071f4:	2000      	movs	r0, #0
 80071f6:	e7db      	b.n	80071b0 <__ssputs_r+0x58>
 80071f8:	462a      	mov	r2, r5
 80071fa:	f000 fb97 	bl	800792c <_realloc_r>
 80071fe:	4606      	mov	r6, r0
 8007200:	2800      	cmp	r0, #0
 8007202:	d1e1      	bne.n	80071c8 <__ssputs_r+0x70>
 8007204:	6921      	ldr	r1, [r4, #16]
 8007206:	4650      	mov	r0, sl
 8007208:	f000 fab0 	bl	800776c <_free_r>
 800720c:	e7c7      	b.n	800719e <__ssputs_r+0x46>
	...

08007210 <_svfiprintf_r>:
 8007210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007214:	4698      	mov	r8, r3
 8007216:	898b      	ldrh	r3, [r1, #12]
 8007218:	061b      	lsls	r3, r3, #24
 800721a:	b09d      	sub	sp, #116	; 0x74
 800721c:	4607      	mov	r7, r0
 800721e:	460d      	mov	r5, r1
 8007220:	4614      	mov	r4, r2
 8007222:	d50e      	bpl.n	8007242 <_svfiprintf_r+0x32>
 8007224:	690b      	ldr	r3, [r1, #16]
 8007226:	b963      	cbnz	r3, 8007242 <_svfiprintf_r+0x32>
 8007228:	2140      	movs	r1, #64	; 0x40
 800722a:	f000 fb0b 	bl	8007844 <_malloc_r>
 800722e:	6028      	str	r0, [r5, #0]
 8007230:	6128      	str	r0, [r5, #16]
 8007232:	b920      	cbnz	r0, 800723e <_svfiprintf_r+0x2e>
 8007234:	230c      	movs	r3, #12
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	f04f 30ff 	mov.w	r0, #4294967295
 800723c:	e0d1      	b.n	80073e2 <_svfiprintf_r+0x1d2>
 800723e:	2340      	movs	r3, #64	; 0x40
 8007240:	616b      	str	r3, [r5, #20]
 8007242:	2300      	movs	r3, #0
 8007244:	9309      	str	r3, [sp, #36]	; 0x24
 8007246:	2320      	movs	r3, #32
 8007248:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800724c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007250:	2330      	movs	r3, #48	; 0x30
 8007252:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073fc <_svfiprintf_r+0x1ec>
 8007256:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800725a:	f04f 0901 	mov.w	r9, #1
 800725e:	4623      	mov	r3, r4
 8007260:	469a      	mov	sl, r3
 8007262:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007266:	b10a      	cbz	r2, 800726c <_svfiprintf_r+0x5c>
 8007268:	2a25      	cmp	r2, #37	; 0x25
 800726a:	d1f9      	bne.n	8007260 <_svfiprintf_r+0x50>
 800726c:	ebba 0b04 	subs.w	fp, sl, r4
 8007270:	d00b      	beq.n	800728a <_svfiprintf_r+0x7a>
 8007272:	465b      	mov	r3, fp
 8007274:	4622      	mov	r2, r4
 8007276:	4629      	mov	r1, r5
 8007278:	4638      	mov	r0, r7
 800727a:	f7ff ff6d 	bl	8007158 <__ssputs_r>
 800727e:	3001      	adds	r0, #1
 8007280:	f000 80aa 	beq.w	80073d8 <_svfiprintf_r+0x1c8>
 8007284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007286:	445a      	add	r2, fp
 8007288:	9209      	str	r2, [sp, #36]	; 0x24
 800728a:	f89a 3000 	ldrb.w	r3, [sl]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80a2 	beq.w	80073d8 <_svfiprintf_r+0x1c8>
 8007294:	2300      	movs	r3, #0
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729e:	f10a 0a01 	add.w	sl, sl, #1
 80072a2:	9304      	str	r3, [sp, #16]
 80072a4:	9307      	str	r3, [sp, #28]
 80072a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072aa:	931a      	str	r3, [sp, #104]	; 0x68
 80072ac:	4654      	mov	r4, sl
 80072ae:	2205      	movs	r2, #5
 80072b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b4:	4851      	ldr	r0, [pc, #324]	; (80073fc <_svfiprintf_r+0x1ec>)
 80072b6:	f7f8 ffb3 	bl	8000220 <memchr>
 80072ba:	9a04      	ldr	r2, [sp, #16]
 80072bc:	b9d8      	cbnz	r0, 80072f6 <_svfiprintf_r+0xe6>
 80072be:	06d0      	lsls	r0, r2, #27
 80072c0:	bf44      	itt	mi
 80072c2:	2320      	movmi	r3, #32
 80072c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072c8:	0711      	lsls	r1, r2, #28
 80072ca:	bf44      	itt	mi
 80072cc:	232b      	movmi	r3, #43	; 0x2b
 80072ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072d2:	f89a 3000 	ldrb.w	r3, [sl]
 80072d6:	2b2a      	cmp	r3, #42	; 0x2a
 80072d8:	d015      	beq.n	8007306 <_svfiprintf_r+0xf6>
 80072da:	9a07      	ldr	r2, [sp, #28]
 80072dc:	4654      	mov	r4, sl
 80072de:	2000      	movs	r0, #0
 80072e0:	f04f 0c0a 	mov.w	ip, #10
 80072e4:	4621      	mov	r1, r4
 80072e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072ea:	3b30      	subs	r3, #48	; 0x30
 80072ec:	2b09      	cmp	r3, #9
 80072ee:	d94e      	bls.n	800738e <_svfiprintf_r+0x17e>
 80072f0:	b1b0      	cbz	r0, 8007320 <_svfiprintf_r+0x110>
 80072f2:	9207      	str	r2, [sp, #28]
 80072f4:	e014      	b.n	8007320 <_svfiprintf_r+0x110>
 80072f6:	eba0 0308 	sub.w	r3, r0, r8
 80072fa:	fa09 f303 	lsl.w	r3, r9, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	9304      	str	r3, [sp, #16]
 8007302:	46a2      	mov	sl, r4
 8007304:	e7d2      	b.n	80072ac <_svfiprintf_r+0x9c>
 8007306:	9b03      	ldr	r3, [sp, #12]
 8007308:	1d19      	adds	r1, r3, #4
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	9103      	str	r1, [sp, #12]
 800730e:	2b00      	cmp	r3, #0
 8007310:	bfbb      	ittet	lt
 8007312:	425b      	neglt	r3, r3
 8007314:	f042 0202 	orrlt.w	r2, r2, #2
 8007318:	9307      	strge	r3, [sp, #28]
 800731a:	9307      	strlt	r3, [sp, #28]
 800731c:	bfb8      	it	lt
 800731e:	9204      	strlt	r2, [sp, #16]
 8007320:	7823      	ldrb	r3, [r4, #0]
 8007322:	2b2e      	cmp	r3, #46	; 0x2e
 8007324:	d10c      	bne.n	8007340 <_svfiprintf_r+0x130>
 8007326:	7863      	ldrb	r3, [r4, #1]
 8007328:	2b2a      	cmp	r3, #42	; 0x2a
 800732a:	d135      	bne.n	8007398 <_svfiprintf_r+0x188>
 800732c:	9b03      	ldr	r3, [sp, #12]
 800732e:	1d1a      	adds	r2, r3, #4
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	9203      	str	r2, [sp, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	bfb8      	it	lt
 8007338:	f04f 33ff 	movlt.w	r3, #4294967295
 800733c:	3402      	adds	r4, #2
 800733e:	9305      	str	r3, [sp, #20]
 8007340:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800740c <_svfiprintf_r+0x1fc>
 8007344:	7821      	ldrb	r1, [r4, #0]
 8007346:	2203      	movs	r2, #3
 8007348:	4650      	mov	r0, sl
 800734a:	f7f8 ff69 	bl	8000220 <memchr>
 800734e:	b140      	cbz	r0, 8007362 <_svfiprintf_r+0x152>
 8007350:	2340      	movs	r3, #64	; 0x40
 8007352:	eba0 000a 	sub.w	r0, r0, sl
 8007356:	fa03 f000 	lsl.w	r0, r3, r0
 800735a:	9b04      	ldr	r3, [sp, #16]
 800735c:	4303      	orrs	r3, r0
 800735e:	3401      	adds	r4, #1
 8007360:	9304      	str	r3, [sp, #16]
 8007362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007366:	4826      	ldr	r0, [pc, #152]	; (8007400 <_svfiprintf_r+0x1f0>)
 8007368:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800736c:	2206      	movs	r2, #6
 800736e:	f7f8 ff57 	bl	8000220 <memchr>
 8007372:	2800      	cmp	r0, #0
 8007374:	d038      	beq.n	80073e8 <_svfiprintf_r+0x1d8>
 8007376:	4b23      	ldr	r3, [pc, #140]	; (8007404 <_svfiprintf_r+0x1f4>)
 8007378:	bb1b      	cbnz	r3, 80073c2 <_svfiprintf_r+0x1b2>
 800737a:	9b03      	ldr	r3, [sp, #12]
 800737c:	3307      	adds	r3, #7
 800737e:	f023 0307 	bic.w	r3, r3, #7
 8007382:	3308      	adds	r3, #8
 8007384:	9303      	str	r3, [sp, #12]
 8007386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007388:	4433      	add	r3, r6
 800738a:	9309      	str	r3, [sp, #36]	; 0x24
 800738c:	e767      	b.n	800725e <_svfiprintf_r+0x4e>
 800738e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007392:	460c      	mov	r4, r1
 8007394:	2001      	movs	r0, #1
 8007396:	e7a5      	b.n	80072e4 <_svfiprintf_r+0xd4>
 8007398:	2300      	movs	r3, #0
 800739a:	3401      	adds	r4, #1
 800739c:	9305      	str	r3, [sp, #20]
 800739e:	4619      	mov	r1, r3
 80073a0:	f04f 0c0a 	mov.w	ip, #10
 80073a4:	4620      	mov	r0, r4
 80073a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073aa:	3a30      	subs	r2, #48	; 0x30
 80073ac:	2a09      	cmp	r2, #9
 80073ae:	d903      	bls.n	80073b8 <_svfiprintf_r+0x1a8>
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0c5      	beq.n	8007340 <_svfiprintf_r+0x130>
 80073b4:	9105      	str	r1, [sp, #20]
 80073b6:	e7c3      	b.n	8007340 <_svfiprintf_r+0x130>
 80073b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80073bc:	4604      	mov	r4, r0
 80073be:	2301      	movs	r3, #1
 80073c0:	e7f0      	b.n	80073a4 <_svfiprintf_r+0x194>
 80073c2:	ab03      	add	r3, sp, #12
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	462a      	mov	r2, r5
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <_svfiprintf_r+0x1f8>)
 80073ca:	a904      	add	r1, sp, #16
 80073cc:	4638      	mov	r0, r7
 80073ce:	f3af 8000 	nop.w
 80073d2:	1c42      	adds	r2, r0, #1
 80073d4:	4606      	mov	r6, r0
 80073d6:	d1d6      	bne.n	8007386 <_svfiprintf_r+0x176>
 80073d8:	89ab      	ldrh	r3, [r5, #12]
 80073da:	065b      	lsls	r3, r3, #25
 80073dc:	f53f af2c 	bmi.w	8007238 <_svfiprintf_r+0x28>
 80073e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073e2:	b01d      	add	sp, #116	; 0x74
 80073e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073e8:	ab03      	add	r3, sp, #12
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	462a      	mov	r2, r5
 80073ee:	4b06      	ldr	r3, [pc, #24]	; (8007408 <_svfiprintf_r+0x1f8>)
 80073f0:	a904      	add	r1, sp, #16
 80073f2:	4638      	mov	r0, r7
 80073f4:	f000 f87a 	bl	80074ec <_printf_i>
 80073f8:	e7eb      	b.n	80073d2 <_svfiprintf_r+0x1c2>
 80073fa:	bf00      	nop
 80073fc:	08007ad0 	.word	0x08007ad0
 8007400:	08007ada 	.word	0x08007ada
 8007404:	00000000 	.word	0x00000000
 8007408:	08007159 	.word	0x08007159
 800740c:	08007ad6 	.word	0x08007ad6

08007410 <_printf_common>:
 8007410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007414:	4616      	mov	r6, r2
 8007416:	4699      	mov	r9, r3
 8007418:	688a      	ldr	r2, [r1, #8]
 800741a:	690b      	ldr	r3, [r1, #16]
 800741c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007420:	4293      	cmp	r3, r2
 8007422:	bfb8      	it	lt
 8007424:	4613      	movlt	r3, r2
 8007426:	6033      	str	r3, [r6, #0]
 8007428:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800742c:	4607      	mov	r7, r0
 800742e:	460c      	mov	r4, r1
 8007430:	b10a      	cbz	r2, 8007436 <_printf_common+0x26>
 8007432:	3301      	adds	r3, #1
 8007434:	6033      	str	r3, [r6, #0]
 8007436:	6823      	ldr	r3, [r4, #0]
 8007438:	0699      	lsls	r1, r3, #26
 800743a:	bf42      	ittt	mi
 800743c:	6833      	ldrmi	r3, [r6, #0]
 800743e:	3302      	addmi	r3, #2
 8007440:	6033      	strmi	r3, [r6, #0]
 8007442:	6825      	ldr	r5, [r4, #0]
 8007444:	f015 0506 	ands.w	r5, r5, #6
 8007448:	d106      	bne.n	8007458 <_printf_common+0x48>
 800744a:	f104 0a19 	add.w	sl, r4, #25
 800744e:	68e3      	ldr	r3, [r4, #12]
 8007450:	6832      	ldr	r2, [r6, #0]
 8007452:	1a9b      	subs	r3, r3, r2
 8007454:	42ab      	cmp	r3, r5
 8007456:	dc26      	bgt.n	80074a6 <_printf_common+0x96>
 8007458:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800745c:	1e13      	subs	r3, r2, #0
 800745e:	6822      	ldr	r2, [r4, #0]
 8007460:	bf18      	it	ne
 8007462:	2301      	movne	r3, #1
 8007464:	0692      	lsls	r2, r2, #26
 8007466:	d42b      	bmi.n	80074c0 <_printf_common+0xb0>
 8007468:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800746c:	4649      	mov	r1, r9
 800746e:	4638      	mov	r0, r7
 8007470:	47c0      	blx	r8
 8007472:	3001      	adds	r0, #1
 8007474:	d01e      	beq.n	80074b4 <_printf_common+0xa4>
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	68e5      	ldr	r5, [r4, #12]
 800747a:	6832      	ldr	r2, [r6, #0]
 800747c:	f003 0306 	and.w	r3, r3, #6
 8007480:	2b04      	cmp	r3, #4
 8007482:	bf08      	it	eq
 8007484:	1aad      	subeq	r5, r5, r2
 8007486:	68a3      	ldr	r3, [r4, #8]
 8007488:	6922      	ldr	r2, [r4, #16]
 800748a:	bf0c      	ite	eq
 800748c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007490:	2500      	movne	r5, #0
 8007492:	4293      	cmp	r3, r2
 8007494:	bfc4      	itt	gt
 8007496:	1a9b      	subgt	r3, r3, r2
 8007498:	18ed      	addgt	r5, r5, r3
 800749a:	2600      	movs	r6, #0
 800749c:	341a      	adds	r4, #26
 800749e:	42b5      	cmp	r5, r6
 80074a0:	d11a      	bne.n	80074d8 <_printf_common+0xc8>
 80074a2:	2000      	movs	r0, #0
 80074a4:	e008      	b.n	80074b8 <_printf_common+0xa8>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4649      	mov	r1, r9
 80074ac:	4638      	mov	r0, r7
 80074ae:	47c0      	blx	r8
 80074b0:	3001      	adds	r0, #1
 80074b2:	d103      	bne.n	80074bc <_printf_common+0xac>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074bc:	3501      	adds	r5, #1
 80074be:	e7c6      	b.n	800744e <_printf_common+0x3e>
 80074c0:	18e1      	adds	r1, r4, r3
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	2030      	movs	r0, #48	; 0x30
 80074c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ca:	4422      	add	r2, r4
 80074cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d4:	3302      	adds	r3, #2
 80074d6:	e7c7      	b.n	8007468 <_printf_common+0x58>
 80074d8:	2301      	movs	r3, #1
 80074da:	4622      	mov	r2, r4
 80074dc:	4649      	mov	r1, r9
 80074de:	4638      	mov	r0, r7
 80074e0:	47c0      	blx	r8
 80074e2:	3001      	adds	r0, #1
 80074e4:	d0e6      	beq.n	80074b4 <_printf_common+0xa4>
 80074e6:	3601      	adds	r6, #1
 80074e8:	e7d9      	b.n	800749e <_printf_common+0x8e>
	...

080074ec <_printf_i>:
 80074ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f0:	7e0f      	ldrb	r7, [r1, #24]
 80074f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074f4:	2f78      	cmp	r7, #120	; 0x78
 80074f6:	4691      	mov	r9, r2
 80074f8:	4680      	mov	r8, r0
 80074fa:	460c      	mov	r4, r1
 80074fc:	469a      	mov	sl, r3
 80074fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007502:	d807      	bhi.n	8007514 <_printf_i+0x28>
 8007504:	2f62      	cmp	r7, #98	; 0x62
 8007506:	d80a      	bhi.n	800751e <_printf_i+0x32>
 8007508:	2f00      	cmp	r7, #0
 800750a:	f000 80d8 	beq.w	80076be <_printf_i+0x1d2>
 800750e:	2f58      	cmp	r7, #88	; 0x58
 8007510:	f000 80a3 	beq.w	800765a <_printf_i+0x16e>
 8007514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007518:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800751c:	e03a      	b.n	8007594 <_printf_i+0xa8>
 800751e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007522:	2b15      	cmp	r3, #21
 8007524:	d8f6      	bhi.n	8007514 <_printf_i+0x28>
 8007526:	a101      	add	r1, pc, #4	; (adr r1, 800752c <_printf_i+0x40>)
 8007528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800752c:	08007585 	.word	0x08007585
 8007530:	08007599 	.word	0x08007599
 8007534:	08007515 	.word	0x08007515
 8007538:	08007515 	.word	0x08007515
 800753c:	08007515 	.word	0x08007515
 8007540:	08007515 	.word	0x08007515
 8007544:	08007599 	.word	0x08007599
 8007548:	08007515 	.word	0x08007515
 800754c:	08007515 	.word	0x08007515
 8007550:	08007515 	.word	0x08007515
 8007554:	08007515 	.word	0x08007515
 8007558:	080076a5 	.word	0x080076a5
 800755c:	080075c9 	.word	0x080075c9
 8007560:	08007687 	.word	0x08007687
 8007564:	08007515 	.word	0x08007515
 8007568:	08007515 	.word	0x08007515
 800756c:	080076c7 	.word	0x080076c7
 8007570:	08007515 	.word	0x08007515
 8007574:	080075c9 	.word	0x080075c9
 8007578:	08007515 	.word	0x08007515
 800757c:	08007515 	.word	0x08007515
 8007580:	0800768f 	.word	0x0800768f
 8007584:	682b      	ldr	r3, [r5, #0]
 8007586:	1d1a      	adds	r2, r3, #4
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	602a      	str	r2, [r5, #0]
 800758c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007590:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007594:	2301      	movs	r3, #1
 8007596:	e0a3      	b.n	80076e0 <_printf_i+0x1f4>
 8007598:	6820      	ldr	r0, [r4, #0]
 800759a:	6829      	ldr	r1, [r5, #0]
 800759c:	0606      	lsls	r6, r0, #24
 800759e:	f101 0304 	add.w	r3, r1, #4
 80075a2:	d50a      	bpl.n	80075ba <_printf_i+0xce>
 80075a4:	680e      	ldr	r6, [r1, #0]
 80075a6:	602b      	str	r3, [r5, #0]
 80075a8:	2e00      	cmp	r6, #0
 80075aa:	da03      	bge.n	80075b4 <_printf_i+0xc8>
 80075ac:	232d      	movs	r3, #45	; 0x2d
 80075ae:	4276      	negs	r6, r6
 80075b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b4:	485e      	ldr	r0, [pc, #376]	; (8007730 <_printf_i+0x244>)
 80075b6:	230a      	movs	r3, #10
 80075b8:	e019      	b.n	80075ee <_printf_i+0x102>
 80075ba:	680e      	ldr	r6, [r1, #0]
 80075bc:	602b      	str	r3, [r5, #0]
 80075be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80075c2:	bf18      	it	ne
 80075c4:	b236      	sxthne	r6, r6
 80075c6:	e7ef      	b.n	80075a8 <_printf_i+0xbc>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	6820      	ldr	r0, [r4, #0]
 80075cc:	1d19      	adds	r1, r3, #4
 80075ce:	6029      	str	r1, [r5, #0]
 80075d0:	0601      	lsls	r1, r0, #24
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0xec>
 80075d4:	681e      	ldr	r6, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0xf2>
 80075d8:	0646      	lsls	r6, r0, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0xe8>
 80075dc:	881e      	ldrh	r6, [r3, #0]
 80075de:	4854      	ldr	r0, [pc, #336]	; (8007730 <_printf_i+0x244>)
 80075e0:	2f6f      	cmp	r7, #111	; 0x6f
 80075e2:	bf0c      	ite	eq
 80075e4:	2308      	moveq	r3, #8
 80075e6:	230a      	movne	r3, #10
 80075e8:	2100      	movs	r1, #0
 80075ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ee:	6865      	ldr	r5, [r4, #4]
 80075f0:	60a5      	str	r5, [r4, #8]
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	bfa2      	ittt	ge
 80075f6:	6821      	ldrge	r1, [r4, #0]
 80075f8:	f021 0104 	bicge.w	r1, r1, #4
 80075fc:	6021      	strge	r1, [r4, #0]
 80075fe:	b90e      	cbnz	r6, 8007604 <_printf_i+0x118>
 8007600:	2d00      	cmp	r5, #0
 8007602:	d04d      	beq.n	80076a0 <_printf_i+0x1b4>
 8007604:	4615      	mov	r5, r2
 8007606:	fbb6 f1f3 	udiv	r1, r6, r3
 800760a:	fb03 6711 	mls	r7, r3, r1, r6
 800760e:	5dc7      	ldrb	r7, [r0, r7]
 8007610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007614:	4637      	mov	r7, r6
 8007616:	42bb      	cmp	r3, r7
 8007618:	460e      	mov	r6, r1
 800761a:	d9f4      	bls.n	8007606 <_printf_i+0x11a>
 800761c:	2b08      	cmp	r3, #8
 800761e:	d10b      	bne.n	8007638 <_printf_i+0x14c>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07de      	lsls	r6, r3, #31
 8007624:	d508      	bpl.n	8007638 <_printf_i+0x14c>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6861      	ldr	r1, [r4, #4]
 800762a:	4299      	cmp	r1, r3
 800762c:	bfde      	ittt	le
 800762e:	2330      	movle	r3, #48	; 0x30
 8007630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007634:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007638:	1b52      	subs	r2, r2, r5
 800763a:	6122      	str	r2, [r4, #16]
 800763c:	f8cd a000 	str.w	sl, [sp]
 8007640:	464b      	mov	r3, r9
 8007642:	aa03      	add	r2, sp, #12
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fee2 	bl	8007410 <_printf_common>
 800764c:	3001      	adds	r0, #1
 800764e:	d14c      	bne.n	80076ea <_printf_i+0x1fe>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	b004      	add	sp, #16
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	4835      	ldr	r0, [pc, #212]	; (8007730 <_printf_i+0x244>)
 800765c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007660:	6829      	ldr	r1, [r5, #0]
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	f851 6b04 	ldr.w	r6, [r1], #4
 8007668:	6029      	str	r1, [r5, #0]
 800766a:	061d      	lsls	r5, r3, #24
 800766c:	d514      	bpl.n	8007698 <_printf_i+0x1ac>
 800766e:	07df      	lsls	r7, r3, #31
 8007670:	bf44      	itt	mi
 8007672:	f043 0320 	orrmi.w	r3, r3, #32
 8007676:	6023      	strmi	r3, [r4, #0]
 8007678:	b91e      	cbnz	r6, 8007682 <_printf_i+0x196>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f023 0320 	bic.w	r3, r3, #32
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	2310      	movs	r3, #16
 8007684:	e7b0      	b.n	80075e8 <_printf_i+0xfc>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	f043 0320 	orr.w	r3, r3, #32
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	2378      	movs	r3, #120	; 0x78
 8007690:	4828      	ldr	r0, [pc, #160]	; (8007734 <_printf_i+0x248>)
 8007692:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007696:	e7e3      	b.n	8007660 <_printf_i+0x174>
 8007698:	0659      	lsls	r1, r3, #25
 800769a:	bf48      	it	mi
 800769c:	b2b6      	uxthmi	r6, r6
 800769e:	e7e6      	b.n	800766e <_printf_i+0x182>
 80076a0:	4615      	mov	r5, r2
 80076a2:	e7bb      	b.n	800761c <_printf_i+0x130>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	6826      	ldr	r6, [r4, #0]
 80076a8:	6961      	ldr	r1, [r4, #20]
 80076aa:	1d18      	adds	r0, r3, #4
 80076ac:	6028      	str	r0, [r5, #0]
 80076ae:	0635      	lsls	r5, r6, #24
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0x1cc>
 80076b4:	6019      	str	r1, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0x1d2>
 80076b8:	0670      	lsls	r0, r6, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0x1c8>
 80076bc:	8019      	strh	r1, [r3, #0]
 80076be:	2300      	movs	r3, #0
 80076c0:	6123      	str	r3, [r4, #16]
 80076c2:	4615      	mov	r5, r2
 80076c4:	e7ba      	b.n	800763c <_printf_i+0x150>
 80076c6:	682b      	ldr	r3, [r5, #0]
 80076c8:	1d1a      	adds	r2, r3, #4
 80076ca:	602a      	str	r2, [r5, #0]
 80076cc:	681d      	ldr	r5, [r3, #0]
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	2100      	movs	r1, #0
 80076d2:	4628      	mov	r0, r5
 80076d4:	f7f8 fda4 	bl	8000220 <memchr>
 80076d8:	b108      	cbz	r0, 80076de <_printf_i+0x1f2>
 80076da:	1b40      	subs	r0, r0, r5
 80076dc:	6060      	str	r0, [r4, #4]
 80076de:	6863      	ldr	r3, [r4, #4]
 80076e0:	6123      	str	r3, [r4, #16]
 80076e2:	2300      	movs	r3, #0
 80076e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e8:	e7a8      	b.n	800763c <_printf_i+0x150>
 80076ea:	6923      	ldr	r3, [r4, #16]
 80076ec:	462a      	mov	r2, r5
 80076ee:	4649      	mov	r1, r9
 80076f0:	4640      	mov	r0, r8
 80076f2:	47d0      	blx	sl
 80076f4:	3001      	adds	r0, #1
 80076f6:	d0ab      	beq.n	8007650 <_printf_i+0x164>
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	079b      	lsls	r3, r3, #30
 80076fc:	d413      	bmi.n	8007726 <_printf_i+0x23a>
 80076fe:	68e0      	ldr	r0, [r4, #12]
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	4298      	cmp	r0, r3
 8007704:	bfb8      	it	lt
 8007706:	4618      	movlt	r0, r3
 8007708:	e7a4      	b.n	8007654 <_printf_i+0x168>
 800770a:	2301      	movs	r3, #1
 800770c:	4632      	mov	r2, r6
 800770e:	4649      	mov	r1, r9
 8007710:	4640      	mov	r0, r8
 8007712:	47d0      	blx	sl
 8007714:	3001      	adds	r0, #1
 8007716:	d09b      	beq.n	8007650 <_printf_i+0x164>
 8007718:	3501      	adds	r5, #1
 800771a:	68e3      	ldr	r3, [r4, #12]
 800771c:	9903      	ldr	r1, [sp, #12]
 800771e:	1a5b      	subs	r3, r3, r1
 8007720:	42ab      	cmp	r3, r5
 8007722:	dcf2      	bgt.n	800770a <_printf_i+0x21e>
 8007724:	e7eb      	b.n	80076fe <_printf_i+0x212>
 8007726:	2500      	movs	r5, #0
 8007728:	f104 0619 	add.w	r6, r4, #25
 800772c:	e7f5      	b.n	800771a <_printf_i+0x22e>
 800772e:	bf00      	nop
 8007730:	08007ae1 	.word	0x08007ae1
 8007734:	08007af2 	.word	0x08007af2

08007738 <memmove>:
 8007738:	4288      	cmp	r0, r1
 800773a:	b510      	push	{r4, lr}
 800773c:	eb01 0402 	add.w	r4, r1, r2
 8007740:	d902      	bls.n	8007748 <memmove+0x10>
 8007742:	4284      	cmp	r4, r0
 8007744:	4623      	mov	r3, r4
 8007746:	d807      	bhi.n	8007758 <memmove+0x20>
 8007748:	1e43      	subs	r3, r0, #1
 800774a:	42a1      	cmp	r1, r4
 800774c:	d008      	beq.n	8007760 <memmove+0x28>
 800774e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007756:	e7f8      	b.n	800774a <memmove+0x12>
 8007758:	4402      	add	r2, r0
 800775a:	4601      	mov	r1, r0
 800775c:	428a      	cmp	r2, r1
 800775e:	d100      	bne.n	8007762 <memmove+0x2a>
 8007760:	bd10      	pop	{r4, pc}
 8007762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800776a:	e7f7      	b.n	800775c <memmove+0x24>

0800776c <_free_r>:
 800776c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800776e:	2900      	cmp	r1, #0
 8007770:	d044      	beq.n	80077fc <_free_r+0x90>
 8007772:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007776:	9001      	str	r0, [sp, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	f1a1 0404 	sub.w	r4, r1, #4
 800777e:	bfb8      	it	lt
 8007780:	18e4      	addlt	r4, r4, r3
 8007782:	f000 f913 	bl	80079ac <__malloc_lock>
 8007786:	4a1e      	ldr	r2, [pc, #120]	; (8007800 <_free_r+0x94>)
 8007788:	9801      	ldr	r0, [sp, #4]
 800778a:	6813      	ldr	r3, [r2, #0]
 800778c:	b933      	cbnz	r3, 800779c <_free_r+0x30>
 800778e:	6063      	str	r3, [r4, #4]
 8007790:	6014      	str	r4, [r2, #0]
 8007792:	b003      	add	sp, #12
 8007794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007798:	f000 b90e 	b.w	80079b8 <__malloc_unlock>
 800779c:	42a3      	cmp	r3, r4
 800779e:	d908      	bls.n	80077b2 <_free_r+0x46>
 80077a0:	6825      	ldr	r5, [r4, #0]
 80077a2:	1961      	adds	r1, r4, r5
 80077a4:	428b      	cmp	r3, r1
 80077a6:	bf01      	itttt	eq
 80077a8:	6819      	ldreq	r1, [r3, #0]
 80077aa:	685b      	ldreq	r3, [r3, #4]
 80077ac:	1949      	addeq	r1, r1, r5
 80077ae:	6021      	streq	r1, [r4, #0]
 80077b0:	e7ed      	b.n	800778e <_free_r+0x22>
 80077b2:	461a      	mov	r2, r3
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	b10b      	cbz	r3, 80077bc <_free_r+0x50>
 80077b8:	42a3      	cmp	r3, r4
 80077ba:	d9fa      	bls.n	80077b2 <_free_r+0x46>
 80077bc:	6811      	ldr	r1, [r2, #0]
 80077be:	1855      	adds	r5, r2, r1
 80077c0:	42a5      	cmp	r5, r4
 80077c2:	d10b      	bne.n	80077dc <_free_r+0x70>
 80077c4:	6824      	ldr	r4, [r4, #0]
 80077c6:	4421      	add	r1, r4
 80077c8:	1854      	adds	r4, r2, r1
 80077ca:	42a3      	cmp	r3, r4
 80077cc:	6011      	str	r1, [r2, #0]
 80077ce:	d1e0      	bne.n	8007792 <_free_r+0x26>
 80077d0:	681c      	ldr	r4, [r3, #0]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	6053      	str	r3, [r2, #4]
 80077d6:	4421      	add	r1, r4
 80077d8:	6011      	str	r1, [r2, #0]
 80077da:	e7da      	b.n	8007792 <_free_r+0x26>
 80077dc:	d902      	bls.n	80077e4 <_free_r+0x78>
 80077de:	230c      	movs	r3, #12
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	e7d6      	b.n	8007792 <_free_r+0x26>
 80077e4:	6825      	ldr	r5, [r4, #0]
 80077e6:	1961      	adds	r1, r4, r5
 80077e8:	428b      	cmp	r3, r1
 80077ea:	bf04      	itt	eq
 80077ec:	6819      	ldreq	r1, [r3, #0]
 80077ee:	685b      	ldreq	r3, [r3, #4]
 80077f0:	6063      	str	r3, [r4, #4]
 80077f2:	bf04      	itt	eq
 80077f4:	1949      	addeq	r1, r1, r5
 80077f6:	6021      	streq	r1, [r4, #0]
 80077f8:	6054      	str	r4, [r2, #4]
 80077fa:	e7ca      	b.n	8007792 <_free_r+0x26>
 80077fc:	b003      	add	sp, #12
 80077fe:	bd30      	pop	{r4, r5, pc}
 8007800:	2004cc20 	.word	0x2004cc20

08007804 <sbrk_aligned>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4e0e      	ldr	r6, [pc, #56]	; (8007840 <sbrk_aligned+0x3c>)
 8007808:	460c      	mov	r4, r1
 800780a:	6831      	ldr	r1, [r6, #0]
 800780c:	4605      	mov	r5, r0
 800780e:	b911      	cbnz	r1, 8007816 <sbrk_aligned+0x12>
 8007810:	f000 f8bc 	bl	800798c <_sbrk_r>
 8007814:	6030      	str	r0, [r6, #0]
 8007816:	4621      	mov	r1, r4
 8007818:	4628      	mov	r0, r5
 800781a:	f000 f8b7 	bl	800798c <_sbrk_r>
 800781e:	1c43      	adds	r3, r0, #1
 8007820:	d00a      	beq.n	8007838 <sbrk_aligned+0x34>
 8007822:	1cc4      	adds	r4, r0, #3
 8007824:	f024 0403 	bic.w	r4, r4, #3
 8007828:	42a0      	cmp	r0, r4
 800782a:	d007      	beq.n	800783c <sbrk_aligned+0x38>
 800782c:	1a21      	subs	r1, r4, r0
 800782e:	4628      	mov	r0, r5
 8007830:	f000 f8ac 	bl	800798c <_sbrk_r>
 8007834:	3001      	adds	r0, #1
 8007836:	d101      	bne.n	800783c <sbrk_aligned+0x38>
 8007838:	f04f 34ff 	mov.w	r4, #4294967295
 800783c:	4620      	mov	r0, r4
 800783e:	bd70      	pop	{r4, r5, r6, pc}
 8007840:	2004cc24 	.word	0x2004cc24

08007844 <_malloc_r>:
 8007844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007848:	1ccd      	adds	r5, r1, #3
 800784a:	f025 0503 	bic.w	r5, r5, #3
 800784e:	3508      	adds	r5, #8
 8007850:	2d0c      	cmp	r5, #12
 8007852:	bf38      	it	cc
 8007854:	250c      	movcc	r5, #12
 8007856:	2d00      	cmp	r5, #0
 8007858:	4607      	mov	r7, r0
 800785a:	db01      	blt.n	8007860 <_malloc_r+0x1c>
 800785c:	42a9      	cmp	r1, r5
 800785e:	d905      	bls.n	800786c <_malloc_r+0x28>
 8007860:	230c      	movs	r3, #12
 8007862:	603b      	str	r3, [r7, #0]
 8007864:	2600      	movs	r6, #0
 8007866:	4630      	mov	r0, r6
 8007868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800786c:	4e2e      	ldr	r6, [pc, #184]	; (8007928 <_malloc_r+0xe4>)
 800786e:	f000 f89d 	bl	80079ac <__malloc_lock>
 8007872:	6833      	ldr	r3, [r6, #0]
 8007874:	461c      	mov	r4, r3
 8007876:	bb34      	cbnz	r4, 80078c6 <_malloc_r+0x82>
 8007878:	4629      	mov	r1, r5
 800787a:	4638      	mov	r0, r7
 800787c:	f7ff ffc2 	bl	8007804 <sbrk_aligned>
 8007880:	1c43      	adds	r3, r0, #1
 8007882:	4604      	mov	r4, r0
 8007884:	d14d      	bne.n	8007922 <_malloc_r+0xde>
 8007886:	6834      	ldr	r4, [r6, #0]
 8007888:	4626      	mov	r6, r4
 800788a:	2e00      	cmp	r6, #0
 800788c:	d140      	bne.n	8007910 <_malloc_r+0xcc>
 800788e:	6823      	ldr	r3, [r4, #0]
 8007890:	4631      	mov	r1, r6
 8007892:	4638      	mov	r0, r7
 8007894:	eb04 0803 	add.w	r8, r4, r3
 8007898:	f000 f878 	bl	800798c <_sbrk_r>
 800789c:	4580      	cmp	r8, r0
 800789e:	d13a      	bne.n	8007916 <_malloc_r+0xd2>
 80078a0:	6821      	ldr	r1, [r4, #0]
 80078a2:	3503      	adds	r5, #3
 80078a4:	1a6d      	subs	r5, r5, r1
 80078a6:	f025 0503 	bic.w	r5, r5, #3
 80078aa:	3508      	adds	r5, #8
 80078ac:	2d0c      	cmp	r5, #12
 80078ae:	bf38      	it	cc
 80078b0:	250c      	movcc	r5, #12
 80078b2:	4629      	mov	r1, r5
 80078b4:	4638      	mov	r0, r7
 80078b6:	f7ff ffa5 	bl	8007804 <sbrk_aligned>
 80078ba:	3001      	adds	r0, #1
 80078bc:	d02b      	beq.n	8007916 <_malloc_r+0xd2>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	442b      	add	r3, r5
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	e00e      	b.n	80078e4 <_malloc_r+0xa0>
 80078c6:	6822      	ldr	r2, [r4, #0]
 80078c8:	1b52      	subs	r2, r2, r5
 80078ca:	d41e      	bmi.n	800790a <_malloc_r+0xc6>
 80078cc:	2a0b      	cmp	r2, #11
 80078ce:	d916      	bls.n	80078fe <_malloc_r+0xba>
 80078d0:	1961      	adds	r1, r4, r5
 80078d2:	42a3      	cmp	r3, r4
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	bf18      	it	ne
 80078d8:	6059      	strne	r1, [r3, #4]
 80078da:	6863      	ldr	r3, [r4, #4]
 80078dc:	bf08      	it	eq
 80078de:	6031      	streq	r1, [r6, #0]
 80078e0:	5162      	str	r2, [r4, r5]
 80078e2:	604b      	str	r3, [r1, #4]
 80078e4:	4638      	mov	r0, r7
 80078e6:	f104 060b 	add.w	r6, r4, #11
 80078ea:	f000 f865 	bl	80079b8 <__malloc_unlock>
 80078ee:	f026 0607 	bic.w	r6, r6, #7
 80078f2:	1d23      	adds	r3, r4, #4
 80078f4:	1af2      	subs	r2, r6, r3
 80078f6:	d0b6      	beq.n	8007866 <_malloc_r+0x22>
 80078f8:	1b9b      	subs	r3, r3, r6
 80078fa:	50a3      	str	r3, [r4, r2]
 80078fc:	e7b3      	b.n	8007866 <_malloc_r+0x22>
 80078fe:	6862      	ldr	r2, [r4, #4]
 8007900:	42a3      	cmp	r3, r4
 8007902:	bf0c      	ite	eq
 8007904:	6032      	streq	r2, [r6, #0]
 8007906:	605a      	strne	r2, [r3, #4]
 8007908:	e7ec      	b.n	80078e4 <_malloc_r+0xa0>
 800790a:	4623      	mov	r3, r4
 800790c:	6864      	ldr	r4, [r4, #4]
 800790e:	e7b2      	b.n	8007876 <_malloc_r+0x32>
 8007910:	4634      	mov	r4, r6
 8007912:	6876      	ldr	r6, [r6, #4]
 8007914:	e7b9      	b.n	800788a <_malloc_r+0x46>
 8007916:	230c      	movs	r3, #12
 8007918:	603b      	str	r3, [r7, #0]
 800791a:	4638      	mov	r0, r7
 800791c:	f000 f84c 	bl	80079b8 <__malloc_unlock>
 8007920:	e7a1      	b.n	8007866 <_malloc_r+0x22>
 8007922:	6025      	str	r5, [r4, #0]
 8007924:	e7de      	b.n	80078e4 <_malloc_r+0xa0>
 8007926:	bf00      	nop
 8007928:	2004cc20 	.word	0x2004cc20

0800792c <_realloc_r>:
 800792c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007930:	4680      	mov	r8, r0
 8007932:	4614      	mov	r4, r2
 8007934:	460e      	mov	r6, r1
 8007936:	b921      	cbnz	r1, 8007942 <_realloc_r+0x16>
 8007938:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800793c:	4611      	mov	r1, r2
 800793e:	f7ff bf81 	b.w	8007844 <_malloc_r>
 8007942:	b92a      	cbnz	r2, 8007950 <_realloc_r+0x24>
 8007944:	f7ff ff12 	bl	800776c <_free_r>
 8007948:	4625      	mov	r5, r4
 800794a:	4628      	mov	r0, r5
 800794c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007950:	f000 f838 	bl	80079c4 <_malloc_usable_size_r>
 8007954:	4284      	cmp	r4, r0
 8007956:	4607      	mov	r7, r0
 8007958:	d802      	bhi.n	8007960 <_realloc_r+0x34>
 800795a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800795e:	d812      	bhi.n	8007986 <_realloc_r+0x5a>
 8007960:	4621      	mov	r1, r4
 8007962:	4640      	mov	r0, r8
 8007964:	f7ff ff6e 	bl	8007844 <_malloc_r>
 8007968:	4605      	mov	r5, r0
 800796a:	2800      	cmp	r0, #0
 800796c:	d0ed      	beq.n	800794a <_realloc_r+0x1e>
 800796e:	42bc      	cmp	r4, r7
 8007970:	4622      	mov	r2, r4
 8007972:	4631      	mov	r1, r6
 8007974:	bf28      	it	cs
 8007976:	463a      	movcs	r2, r7
 8007978:	f7ff fbb8 	bl	80070ec <memcpy>
 800797c:	4631      	mov	r1, r6
 800797e:	4640      	mov	r0, r8
 8007980:	f7ff fef4 	bl	800776c <_free_r>
 8007984:	e7e1      	b.n	800794a <_realloc_r+0x1e>
 8007986:	4635      	mov	r5, r6
 8007988:	e7df      	b.n	800794a <_realloc_r+0x1e>
	...

0800798c <_sbrk_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_sbrk_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7f9 ffa8 	bl	80018ec <_sbrk>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_sbrk_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_sbrk_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	2004cc28 	.word	0x2004cc28

080079ac <__malloc_lock>:
 80079ac:	4801      	ldr	r0, [pc, #4]	; (80079b4 <__malloc_lock+0x8>)
 80079ae:	f000 b811 	b.w	80079d4 <__retarget_lock_acquire_recursive>
 80079b2:	bf00      	nop
 80079b4:	2004cc2c 	.word	0x2004cc2c

080079b8 <__malloc_unlock>:
 80079b8:	4801      	ldr	r0, [pc, #4]	; (80079c0 <__malloc_unlock+0x8>)
 80079ba:	f000 b80c 	b.w	80079d6 <__retarget_lock_release_recursive>
 80079be:	bf00      	nop
 80079c0:	2004cc2c 	.word	0x2004cc2c

080079c4 <_malloc_usable_size_r>:
 80079c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079c8:	1f18      	subs	r0, r3, #4
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	bfbc      	itt	lt
 80079ce:	580b      	ldrlt	r3, [r1, r0]
 80079d0:	18c0      	addlt	r0, r0, r3
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_acquire_recursive>:
 80079d4:	4770      	bx	lr

080079d6 <__retarget_lock_release_recursive>:
 80079d6:	4770      	bx	lr

080079d8 <_init>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	bf00      	nop
 80079dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079de:	bc08      	pop	{r3}
 80079e0:	469e      	mov	lr, r3
 80079e2:	4770      	bx	lr

080079e4 <_fini>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr
